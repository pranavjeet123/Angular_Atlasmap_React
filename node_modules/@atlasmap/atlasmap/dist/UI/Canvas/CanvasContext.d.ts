import { Coords, RectWithId, Rects } from './models';
import { FunctionComponent } from 'react';
import { ReactElement } from 'react';
import { useGesture } from 'react-use-gesture';
declare type RedrawCallback = () => unknown;
export interface ICanvasDimension {
    width: number;
    height: number;
    offsetTop: number;
    offsetLeft: number;
}
export interface ICanvasContext {
    initialWidth?: number;
    initialHeight?: number;
    dimensions: ICanvasDimension;
    setDimension: (dimension: ICanvasDimension) => void;
    panX: number;
    panY: number;
    addRedrawListener: (callback: RedrawCallback) => void;
    removeRedrawListener: (callback: RedrawCallback) => void;
    addRect: (rect: RectWithId) => void;
    removeRect: (id: string) => void;
    getRects: () => Rects;
    zoom: number;
    updateZoom: (tick: number) => void;
    resetZoom: () => void;
    pan: Coords;
    setPan: (pan: Coords) => void;
    resetPan: () => void;
    allowPanning: boolean;
    isPanning: boolean;
    bindCanvas: ReturnType<typeof useGesture>;
}
export interface ICanvasProviderProps {
    allowPanning?: boolean;
    initialWidth?: number;
    initialHeight?: number;
    initialZoom?: number;
    initialPanX?: number;
    initialPanY?: number;
}
export declare const CanvasProvider: FunctionComponent<ICanvasProviderProps>;
export declare function useCanvas(): {
    xDomain: import("d3-scale").ScaleLinear<number, number, never>;
    yDomain: import("d3-scale").ScaleLinear<number, number, never>;
    initialWidth?: number | undefined;
    initialHeight?: number | undefined;
    dimensions: ICanvasDimension;
    setDimension: (dimension: ICanvasDimension) => void;
    panX: number;
    panY: number;
    addRedrawListener: (callback: RedrawCallback) => void;
    removeRedrawListener: (callback: RedrawCallback) => void;
    addRect: (rect: RectWithId) => void;
    removeRect: (id: string) => void;
    getRects: () => Rects;
    zoom: number;
    updateZoom: (tick: number) => void;
    resetZoom: () => void;
    pan: Coords;
    setPan: (pan: Coords) => void;
    resetPan: () => void;
    allowPanning: boolean;
    isPanning: boolean;
    bindCanvas: (...args: any[]) => import("react-use-gesture/dist/types").ReactEventHandlers;
};
export interface IWithCanvasProps {
    children: (props: ICanvasContext) => ReactElement;
}
export declare const WithCanvas: FunctionComponent<IWithCanvasProps>;
export {};
//# sourceMappingURL=CanvasContext.d.ts.map