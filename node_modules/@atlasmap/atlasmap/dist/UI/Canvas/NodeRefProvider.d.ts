import React, { FunctionComponent, MutableRefObject } from 'react';
export interface NodeRect extends DOMRect {
    clipped?: boolean;
}
export interface NodeRefProps {
    ref: MutableRefObject<HTMLElement | SVGElement | null>;
    parentId?: string;
    boundaryId?: string;
    overrideWidth?: string;
    overrideHeight?: string;
}
export interface NodeRefPropsWithOptionalId extends NodeRefProps {
    id: string | undefined | Array<string | undefined>;
}
export interface NodeRefPropsWithId extends NodeRefProps {
    id: string;
}
export interface NodeRefPropsWithKey extends NodeRefProps {
    key: string;
}
export interface NodeRefMap {
    [id: string]: NodeRefPropsWithKey;
}
export interface INodeRefContext {
    nodes: MutableRefObject<NodeRefMap>;
    setRef: (props: NodeRefPropsWithId) => string;
    unsetRef: (id: string | undefined | Array<string | undefined>, key: string) => void;
}
export declare const NodeRefContext: React.Context<INodeRefContext | null>;
export declare const NodeRefProvider: FunctionComponent;
export declare function useNodeRef(props: NodeRefPropsWithOptionalId): void;
export declare function useNodeRect(): (id: string) => NodeRect | null;
//# sourceMappingURL=NodeRefProvider.d.ts.map