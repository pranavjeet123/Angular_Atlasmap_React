import { EnumValue } from '../impl/utils';
import { Observable } from 'rxjs';
import { FunctionComponent } from 'react';
import { IExpressionNode } from '@atlasmap/core';
interface IExpressionUpdatedEvent {
    node: IExpressionNode;
    offset: number;
}
export interface IExpressionContentProps {
    executeFieldSearch: (searchFilter: string, isSource: boolean) => string[][];
    getFieldEnums: (nodeId: string) => EnumValue[];
    mappingExpressionAddField: (selectedDocId: string, selectedField: string, newTextNode: IExpressionNode, atIndex: number, isTrailer: boolean) => void;
    mappingExpressionClearText: (nodeId?: string, startOffset?: number, endOffset?: number) => IExpressionNode | null;
    isMappingExpressionEmpty: boolean;
    mappingExpressionInit: () => void;
    mappingExpressionInsertText: (str: string, nodeId?: string | undefined, offset?: number | undefined) => void;
    mappingExpressionObservable: () => Observable<IExpressionUpdatedEvent> | null;
    mappingExpressionRemoveField: (tokenPosition?: string, offset?: number, removeNext?: boolean) => void;
    mappingExpression?: string;
    trailerId: string;
    disabled: boolean;
    onToggle: () => void;
    setSelectedEnumValue: (selectedEnum: string, selectedEnumValueIndex: number) => void;
}
export declare function initializeMappingExpression(): void;
export declare const ExpressionContent: FunctionComponent<IExpressionContentProps>;
export {};
//# sourceMappingURL=ExpressionContent.d.ts.map