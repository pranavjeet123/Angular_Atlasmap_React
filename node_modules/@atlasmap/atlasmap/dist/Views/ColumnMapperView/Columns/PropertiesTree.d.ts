import { AtlasmapDocumentType, IAtlasmapDocument, IAtlasmapField, IAtlasmapMapping } from '../../models';
import { IDragAndDropField } from '../../../UI';
import { ITraverseFieldsProps } from './TraverseFields';
import { FunctionComponent } from 'react';
export interface IPropertiesTreeCallbacks {
    acceptDropType: AtlasmapDocumentType;
    draggableType: AtlasmapDocumentType;
    isSource: boolean;
    onDrop: (source: IAtlasmapField, target: IDragAndDropField | null) => void;
    canDrop: (source: IAtlasmapField, target: IDragAndDropField) => boolean;
    onShowMappingDetails: (mapping: IAtlasmapMapping) => void;
    canAddFieldToSelectedMapping: (source: IAtlasmapField) => boolean;
    onAddToSelectedMapping: (source: IAtlasmapField) => void;
    canRemoveFromSelectedMapping: (source: IAtlasmapField) => boolean;
    onRemoveFromSelectedMapping: (source: IAtlasmapField) => void;
    onEditProperty: (name: string, scope: string, isSource: boolean) => void;
    onDeleteProperty: (name: string, scope: string, isSource: boolean) => void;
    canStartMapping: (field: IAtlasmapField) => boolean;
    onStartMapping: (field: IAtlasmapField) => void;
}
export interface IPropertiesTreeProps extends IPropertiesTreeCallbacks {
    fields: IAtlasmapDocument['fields'];
    showTypes: boolean;
    renderPreview: ITraverseFieldsProps['renderPreview'];
}
export declare const PropertiesTree: FunctionComponent<IPropertiesTreeProps>;
//# sourceMappingURL=PropertiesTree.d.ts.map