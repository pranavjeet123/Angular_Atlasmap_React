import { AtlasmapDocumentType, GroupId, IAtlasmapDocument, IAtlasmapField, IAtlasmapMapping } from '../../models';
import { IDragAndDropField } from '../../../UI';
import { IPropertiesTreeCallbacks } from './PropertiesTree';
import { FunctionComponent } from 'react';
export interface ITargetsColumnCallbacks extends IPropertiesTreeCallbacks {
    acceptDropType: AtlasmapDocumentType;
    draggableType: AtlasmapDocumentType;
    isSource: boolean;
    onCreateProperty: (isSource: boolean) => void;
    onCaptureDocumentID?: (id: string) => void;
    onChangeDocumentName?: (id: string, name: string) => void;
    onDeleteDocument?: (id: GroupId) => void;
    onImportDocument?: (selectedFile: File) => void;
    onCustomClassSearch?: (isSource: boolean) => void;
    onSearch: (content: string) => void;
    onDrop: (source: IAtlasmapField, target: IDragAndDropField | null) => void;
    canDrop: (source: IAtlasmapField, target: IDragAndDropField) => boolean;
    onShowMappingDetails: (mapping: IAtlasmapMapping) => void;
    canAddFieldToSelectedMapping: (field: IAtlasmapField) => boolean;
    onAddToSelectedMapping: (field: IAtlasmapField) => void;
    canRemoveFromSelectedMapping: (field: IAtlasmapField) => boolean;
    onRemoveFromSelectedMapping: (field: IAtlasmapField) => void;
    canStartMapping: (field: IAtlasmapField) => boolean;
    onStartMapping: (field: IAtlasmapField) => void;
    shouldShowMappingPreviewForField: (field: IAtlasmapField) => boolean;
    onFieldPreviewChange: (field: IAtlasmapField, value: string) => void;
    canAddToSelectedMapping: (isSource: boolean) => boolean;
    onEditCSVParams: (id: string, isSource: boolean) => void;
}
export interface ITargetsColumnData {
    targetProperties?: IAtlasmapDocument | null;
    showMappingPreview: boolean;
    showTypes: boolean;
    targets: Array<IAtlasmapDocument>;
}
export declare const TargetsColumn: FunctionComponent<ITargetsColumnData & ITargetsColumnCallbacks>;
//# sourceMappingURL=TargetsColumn.d.ts.map