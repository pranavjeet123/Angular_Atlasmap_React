'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var core = require('@atlasmap/core');
var ky = _interopDefault(require('ky'));
var React = require('react');
var React__default = _interopDefault(React);
var d3Scale = require('d3-scale');
var reactUseGesture = require('react-use-gesture');
var reactStyles = require('@patternfly/react-styles');
var d3Shape = require('d3-shape');
var reactCore = require('@patternfly/react-core');
var reactIcons = require('@patternfly/react-icons');
var reactDnd = require('react-dnd');
var reactDndHtml5Backend = require('react-dnd-html5-backend');
var reactDndTouchBackend = require('react-dnd-touch-backend');
var styles$B = _interopDefault(require('@patternfly/react-styles/css/components/FormControl/form-control'));
var useDebounce = require('use-debounce');
var reactDom = require('react-dom');
var reactTopology = require('@patternfly/react-topology');
var reactSage = require('react-sage');
var reactTable = require('@patternfly/react-table');
var operators = require('rxjs/operators');

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

/**
 * Modify the document name of the document specified by the document ID.
 *
 * @param docId
 * @param newDocName
 * @param isSource
 */

/**
 * Set CSV document inspection parameters.
 *
 * @param docId
 * @param isSource
 * @param parameters
 */
var setDocCSVParams = function setDocCSVParams(docId, isSource, parameters) {
  try {
    var cfg = core.ConfigModel.getConfig();
    var docDef = getDocDef(docId, cfg, isSource);
    docDef.inspectionParameters = parameters;
    return Promise.resolve(cfg.mappingService.notifyMappingUpdated()).then(function () {
      return Promise.resolve(cfg.fileService.updateDigestFile()).then(function () {});
    });
  } catch (e) {
    return Promise.reject(e);
  }
};

/**
 * Import a CSV, instance or schema document into either the Source panel or Target
 * panel (CSV, JSON, XML, XSD).
 *
 * @param selectedFile
 * @param cfg
 * @param isSource
 * @param isSchema - user-specified instance/ schema (true === schema)
 * @param inspectionParameters - CSV parameters
 */
var importInstanceSchema = function importInstanceSchema(selectedFile, cfg, isSource, isSchema, inspectionParameters) {
  try {
    return Promise.resolve(new Promise(function (resolve) {
      try {
        cfg.initCfg.initialized = false;
        cfg.initializationService.updateLoadingStatus('Importing Document ' + selectedFile.name);
        cfg.documentService.importNonJavaDocument(selectedFile, isSource, isSchema, inspectionParameters).then(function () {
          cfg.fileService.updateDigestFile()["finally"](function () {
            cfg.initializationService.updateStatus();
            resolve(true);
          });
        });
        return Promise.resolve();
      } catch (e) {
        return Promise.reject(e);
      }
    }));
  } catch (e) {
    return Promise.reject(e);
  }
};
/**
 * Enable the specified class name and collection type in the targetted
 * panel for use in Java document loading. The user must have previously
 * imported a JAR file containing the class.
 *
 * @param selectedClass
 * @param selectedCollection
 * @param isSource
 */

/**
 * Determine the user-defined class names associated with previously
 * imported JARs.
 */
var getCustomClassNameOptions = function getCustomClassNameOptions() {
  try {
    return Promise.resolve(new Promise(function (resolve, reject) {
      try {
        var cfg = core.ConfigModel.getConfig();
        cfg.documentService.getLibraryClassNames().then(function (classNames) {
          resolve(classNames);
        })["catch"](function () {
          reject();
        });
        return Promise.resolve();
      } catch (e) {
        return Promise.reject(e);
      }
    }));
  } catch (e) {
    return Promise.reject(e);
  }
};

/**
 * Remove a document from the UI and backend service.
 *
 * @param docDef
 * @param cfg
 */
var removeDocumentRef = function removeDocumentRef(docDef, cfg) {
  try {
    return Promise.resolve(new Promise(function (resolve) {
      try {
        cfg.mappingService.removeDocumentReferenceFromAllMappings(docDef.id);

        if (docDef.isSource) {
          core.CommonUtil.removeItemFromArray(docDef, cfg.sourceDocs);
        } else {
          core.CommonUtil.removeItemFromArray(docDef, cfg.targetDocs);
        }

        return Promise.resolve(cfg.mappingService.notifyMappingUpdated()).then(function () {
          return Promise.resolve(cfg.fileService.updateDigestFile()).then(function () {
            resolve(true);
          });
        });
      } catch (e) {
        return Promise.reject(e);
      }
    }));
  } catch (e) {
    return Promise.reject(e);
  }
};
/**
 * Return the document definition associated with the specified document ID.
 *
 * @param docId - document ID
 * @param cfg
 * @param isSource
 */

var changeDocumentName = function changeDocumentName(docId, newDocName, isSource) {
  try {
    var cfg = core.ConfigModel.getConfig();
    var docDef = getDocDef(docId, cfg, isSource);
    docDef.name = newDocName;
    return Promise.resolve(cfg.mappingService.notifyMappingUpdated()).then(function () {
      return Promise.resolve(cfg.fileService.updateDigestFile()).then(function () {});
    });
  } catch (e) {
    return Promise.reject(e);
  }
};
/**
 * Create a new namespace for the supplied XML document.
 *
 * @param docName
 * @param alias
 * @param uri
 * @param locationUri
 */

function createNamespace(docName, alias, uri, locationUri, isTarget) {
  var cfg = core.ConfigModel.getConfig();
  var docDef = getDocDefByName(docName, cfg, true);
  var namespace = {
    alias: alias,
    uri: uri,
    locationUri: locationUri,
    createdByUser: true,
    isTarget: isTarget,
    getPrettyLabel: function getPrettyLabel() {
      return alias + ' [' + uri + ']';
    },
    copy: function copy() {
      return Object.assign({}, namespace);
    },
    copyFrom: function copyFrom(n) {
      return Object.assign(namespace, n);
    }
  };
  docDef.namespaces.push(namespace);
  cfg.mappingService.notifyMappingUpdated();
}
function editNamespace(docName, initAlias, alias, uri, locationUri, isTarget) {
  var cfg = core.ConfigModel.getConfig();
  var docDef = getDocDefByName(docName, cfg, true);
  var namespace = docDef.getNamespaceForAlias(initAlias);
  namespace.alias = alias;
  namespace.uri = uri;
  namespace.locationUri = locationUri;
  namespace.isTarget = isTarget;
  cfg.mappingService.notifyMappingUpdated();
}
function deleteNamespace(docName, alias) {
  var cfg = core.ConfigModel.getConfig();
  var docDef = getDocDefByName(docName, cfg, true);
  docDef.namespaces = docDef.namespaces.filter(function (namespace) {
    return namespace.alias !== alias;
  });
  cfg.mappingService.notifyMappingUpdated();
}
function getDocDef(docId, cfg, isSource) {
  for (var _iterator = _createForOfIteratorHelperLoose(cfg.getDocs(isSource)), _step; !(_step = _iterator()).done;) {
    var docDef = _step.value;

    if (docDef.id.match(docId)) {
      return docDef;
    }
  }

  return null;
}
/**
 * Return the document definition associated with the specified document name.
 *
 * @param docName - document name
 * @param cfg
 * @param isSource
 */

function getDocDefByName(docName, cfg, isSource) {
  for (var _iterator2 = _createForOfIteratorHelperLoose(cfg.getDocs(isSource)), _step2; !(_step2 = _iterator2()).done;) {
    var docDef = _step2.value;
    var candidateDocName = docDef.getName(false) + '.' + docDef.type.toLowerCase();

    if (candidateDocName.match(docName)) {
      return docDef;
    }
  }

  return null;
}
function enableCustomClass(cfg, selectedClass, selectedCollection, isSource) {
  return new Promise(function (resolve) {
    cfg.initCfg.initialized = false;
    cfg.initializationService.updateLoadingStatus('Importing Document ' + selectedClass);
    cfg.documentService.importJavaDocument(selectedClass, isSource, selectedCollection).then(function () {
      cfg.fileService.updateDigestFile()["finally"](function () {
        cfg.initializationService.updateStatus();
        resolve(true);
      });
    });
  });
}
function getPropertyScopeOptions(isSource) {
  var cfg = core.ConfigModel.getConfig();
  var scopeOptions = [{
    label: 'Current Message Header',
    value: 'current'
  }, {
    label: 'Camel Exchange Property',
    value: 'camelExchangeProperty'
  }];
  var propertyDocOptions = isSource ? cfg.sourceDocs : cfg.targetDocs;

  for (var _iterator3 = _createForOfIteratorHelperLoose(propertyDocOptions), _step3; !(_step3 = _iterator3()).done;) {
    var propertyDocOption = _step3.value;
    scopeOptions.push({
      value: propertyDocOption.id,
      label: propertyDocOption.name
    });
  }

  return scopeOptions;
}
/**
 * Return CSV document inspection parameters.
 *
 * @param docId
 * @param isSource
 * @returns
 */

function getDocCSVParams(docId, isSource) {
  var doc = getDocDef(docId, core.ConfigModel.getConfig(), isSource);
  return doc === null || doc === void 0 ? void 0 : doc.inspectionParameters;
}

var trailerId = 'expression-trailer';

function activeMapping() {
  var _cfg$mappings;

  var cfg = core.ConfigModel.getConfig();
  return !!(cfg !== null && cfg !== void 0 && (_cfg$mappings = cfg.mappings) !== null && _cfg$mappings !== void 0 && _cfg$mappings.activeMapping);
}

var ExpressionNode = /*#__PURE__*/function () {
  function ExpressionNode(prefix) {
    this.uuid = prefix + ExpressionNode.sequence++;
  }

  var _proto = ExpressionNode.prototype;

  _proto.getUuid = function getUuid() {
    return this.uuid;
  };

  return ExpressionNode;
}();
ExpressionNode.sequence = 0;
var TextNode = /*#__PURE__*/function (_ExpressionNode) {
  _inheritsLoose(TextNode, _ExpressionNode);

  function TextNode(str) {
    var _this;

    _this = _ExpressionNode.call(this, TextNode.PREFIX) || this;
    _this.str = str;
    return _this;
  }

  var _proto2 = TextNode.prototype;

  _proto2.toText = function toText() {
    return this.str;
  };

  _proto2.toHTML = function toHTML() {
    return "<span id=\"" + this.uuid + "\">" + this.str.replace(/ /g, '&nbsp;') + "</span>";
  };

  return TextNode;
}(ExpressionNode);
TextNode.PREFIX = 'expression-text-';
var FieldNode = /*#__PURE__*/function (_ExpressionNode2) {
  _inheritsLoose(FieldNode, _ExpressionNode2);

  function FieldNode(mapping, mfield, index) {
    var _this2;

    _this2 = _ExpressionNode2.call(this, FieldNode.PREFIX) || this;
    _this2.mapping = mapping;
    _this2.mfield = mfield;

    if (!mfield && index) {
      _this2.field = mapping.getMappedFieldForIndex((index + 1).toString(), true);
    }

    return _this2;
  }

  var _proto3 = FieldNode.prototype;

  _proto3.toText = function toText() {
    if (!this.mapping || !this.field) {
      return '';
    }

    return '${' + (this.mapping.getIndexForMappedField(this.field) - 1) + '}';
  };

  _proto3.toHTML = function toHTML() {
    if (!this.field) {
      return '';
    }

    if (this.field && this.field.field) {
      return "<span contenteditable=\"false\" id=\"" + this.uuid + "\" title=\"" + this.field.field.docDef.name + ":" + this.field.field.path + "\"\n        class=\"expressionFieldLabel label label-default\">" + this.field.field.name + "</span>";
    } else {
      return "<span contenteditable=\"false\" id=\"" + this.uuid + "\"\n        title=\"Field index '" + (this.mapping.getIndexForMappedField(this.field) - 1) + "' is not available\"\n        class=\"expressionFieldLabel label label-danger\">N/A</span>";
    }
  };

  return FieldNode;
}(ExpressionNode);
FieldNode.PREFIX = 'expression-field-';
function getExpression() {
  var _cfg$mappings2;

  var cfg = core.ConfigModel.getConfig();

  if (!activeMapping() || !((_cfg$mappings2 = cfg.mappings) !== null && _cfg$mappings2 !== void 0 && _cfg$mappings2.activeMapping)) {
    return null;
  }

  var mapping = cfg.mappings.activeMapping;
  var expression = mapping.transition.expression;

  if (!expression) {
    mapping.transition.expression = new core.ExpressionModel(mapping, cfg);
    expression = mapping.transition.expression;
    expression.generateInitialExpression();
    expression.updateFieldReference(mapping);
  } else {
    if (mapping.transition.expression) {
      mapping.transition.expression.setConfigModel(cfg);
    }
  }

  return mapping.transition.expression;
}
function getMappingExpression() {
  var _cfg$mappings3, _cfg$mappings3$active, _cfg$mappings3$active2;

  var cfg = core.ConfigModel.getConfig();

  if (!activeMapping()) {
    return '';
  }

  if (!((_cfg$mappings3 = cfg.mappings) !== null && _cfg$mappings3 !== void 0 && (_cfg$mappings3$active = _cfg$mappings3.activeMapping) !== null && _cfg$mappings3$active !== void 0 && (_cfg$mappings3$active2 = _cfg$mappings3$active.transition) !== null && _cfg$mappings3$active2 !== void 0 && _cfg$mappings3$active2.expression)) {
    if (!getExpression()) {
      return '';
    }
  }

  return cfg.mappings.activeMapping.transition.expression && cfg.mappings.activeMapping.transition.enableExpression ? cfg.mappings.activeMapping.transition.expression.toHTML() : '';
}

var api = /*#__PURE__*/ky.create({
  headers: {
    'ATLASMAP-XSRF-TOKEN': 'awesome'
  }
});
function copyToClipboard(text) {
  var textArea = document.createElement('textarea');
  textArea.value = text;
  document.body.appendChild(textArea);
  textArea.select();

  try {
    document.execCommand('copy');
  } catch (err) {
    core.ConfigModel.getConfig().errorService.addError(new core.ErrorInfo({
      message: 'Error copying ' + text + ' to clipboard',
      level: core.ErrorLevel.ERROR,
      scope: core.ErrorScope.APPLICATION,
      type: core.ErrorType.INTERNAL
    }));
  }

  document.body.removeChild(textArea);
}
var initializationService = /*#__PURE__*/new core.InitializationService(api);
var configModel = initializationService.cfg;
function fromFieldToIFieldsGroup(field) {
  var fields = field.children.map(fromFieldToIFields).filter(function (f) {
    return f;
  });
  return fields.length > 0 && field.visibleInCurrentDocumentSearch ? {
    id: (field.docDef.uri || field.docDef.type + '-' + field.scope) + ":" + (field.docDef.isSource ? 'source' : 'target') + ":" + field.path,
    name: field.name,
    type: field.type,
    isCollection: field.isCollection,
    isInCollection: field.isInCollection(),
    fields: fields,
    amField: field
  } : null;
}
function fromFieldToIFieldsNode(field) {
  var _cfg$mappings;

  var cfg = core.ConfigModel.getConfig();
  var partOfMapping = field.partOfMapping;
  var shouldBeVisible = partOfMapping ? cfg.showMappedFields : cfg.showUnmappedFields && field.visibleInCurrentDocumentSearch;
  return shouldBeVisible ? {
    id: (field.docDef.uri || field.docDef.type + '-' + field.scope) + ":" + (field.docDef.isSource ? 'source' : 'target') + ":" + field.path,
    name: field.getFieldLabel(false, false),
    type: field.type,
    path: field.path,
    scope: field.scope ? field.scope : '',
    value: field.value,
    amField: field,
    mappings: ((_cfg$mappings = cfg.mappings) === null || _cfg$mappings === void 0 ? void 0 : _cfg$mappings.findMappingsForField(field).map(fromMappingModelToImapping).filter(function (d) {
      return d;
    })) || [],
    hasTransformations: field.partOfTransformation,
    isAttribute: field.isAttribute,
    isCollection: field.isCollection,
    isInCollection: field.isInCollection(),
    isConnected: partOfMapping,
    isDisabled: field.type === 'UNSUPPORTED' || field.type === 'COMPLEX' && !field.enumeration,
    enumeration: field.enumeration
  } : null;
}
function fromFieldToIFields(field) {
  return field.children.length > 0 ? fromFieldToIFieldsGroup(field) : fromFieldToIFieldsNode(field);
}
function fromNamespaceModelToINamespace(namespace) {
  return {
    alias: namespace.alias,
    uri: namespace.uri,
    locationUri: namespace.locationUri,
    isTarget: namespace.isTarget
  };
}
function fromDocumentDefinitionToFieldGroup(def) {
  if (!def || !def.fields || def.fields.length === 0) {
    return null;
  }

  var fields = def.fields.map(fromFieldToIFields).filter(function (f) {
    return f;
  });
  var namespaces = def.namespaces.map(fromNamespaceModelToINamespace).filter(function (n) {
    return n;
  });
  return def.visibleInCurrentDocumentSearch && fields.length > 0 ? {
    id: def.id,
    fields: fields,
    name: def.name,
    type: def.type,
    namespaces: namespaces
  } : null;
}
function fromMappedFieldToIMappingField(mappedField) {
  var _mappedField$field;

  if (!mappedField.field || !mappedField.field.docDef) {
    return null;
  }

  return {
    id: (mappedField.field.docDef.uri || mappedField.field.docDef.type + '-' + mappedField.field.scope) + ":" + (mappedField.field.docDef.isSource ? 'source' : 'target') + ":" + mappedField.field.path,
    name: mappedField.field.getFieldLabel(false, false),
    type: mappedField.field.type,
    path: mappedField.field.path,
    scope: (_mappedField$field = mappedField.field) !== null && _mappedField$field !== void 0 && _mappedField$field.scope ? mappedField.field.scope : '',
    value: mappedField.field.value,
    hasTransformations: false,
    mappings: [],
    isAttribute: false,
    isCollection: false,
    isInCollection: false,
    isConnected: false,
    isDisabled: false,
    enumeration: false,
    amField: mappedField.field,
    transformations: mappedField.actions.map(function (a) {
      return {
        name: a.name,
        options: getMappingActions(mappedField.isSource()).map(function (a) {
          return {
            name: core.CommonUtil.toDisplayable(a.name),
            value: a.name
          };
        }),
        arguments: a.definition.arguments.map(function (av, idx) {
          var _av$serviceObject, _av$serviceObject$tit;

          return {
            label: ((_av$serviceObject = av.serviceObject) === null || _av$serviceObject === void 0 ? void 0 : (_av$serviceObject$tit = _av$serviceObject.title) === null || _av$serviceObject$tit === void 0 ? void 0 : _av$serviceObject$tit.length) > 0 ? av.serviceObject.title : core.CommonUtil.toDisplayable(av.name),
            type: av.type,
            name: av.name,
            value: a.argumentValues[idx].value,
            options: av.values ? av.values.map(function (avv) {
              return {
                name: avv,
                value: avv
              };
            }) : undefined
          };
        })
      };
    })
  };
}
function errorLevelToVariant(level) {
  switch (level) {
    case core.ErrorLevel.INFO:
      return 'info';

    case core.ErrorLevel.WARN:
      return 'warning';

    case core.ErrorLevel.ERROR:
      return 'danger';

    default:
      return 'default';
  }
}
function errorMessageToString(message) {
  switch (typeof message) {
    case 'string':
      return message;

    default:
      return (message === null || message === void 0 ? void 0 : message.message) || JSON.stringify(message);
  }
}
function errorTypeToString(type) {
  switch (type) {
    case core.ErrorType.INTERNAL:
      return 'Internal';

    case core.ErrorType.USER:
      return 'User';

    case core.ErrorType.VALIDATION:
      return 'Validation';

    case core.ErrorType.PREVIEW:
      return 'Preview';

    case core.ErrorType.FORM:
      return 'Form';
  }
}
function errorInfoToNotification(e) {
  var _e$mapping;

  return {
    variant: errorLevelToVariant(e.level),
    title: e.mapping && e.type !== core.ErrorType.PREVIEW ? errorTypeToString(e.type) + ": \"" + e.mapping.transition.getPrettyName() + "\"" : errorTypeToString(e.type),
    description: errorMessageToString(e.message),
    id: e.identifier,
    mappingId: (_e$mapping = e.mapping) === null || _e$mapping === void 0 ? void 0 : _e$mapping.uuid
  };
}
function fromMappingModelToImapping(m) {
  return m ? {
    id: m.uuid,
    name: m.transition.getPrettyName(),
    sourceFields: m.getUserMappedFields(true).map(fromMappedFieldToIMappingField).filter(function (f) {
      return f;
    }),
    targetFields: m.getUserMappedFields(false).map(fromMappedFieldToIMappingField).filter(function (f) {
      return f;
    }),
    mapping: m
  } : null;
}
function fromMappingDefinitionToIMappings(def) {
  return def ? def.mappings.map(fromMappingModelToImapping).filter(function (d) {
    return d;
  }) : [];
}
function executeFieldSearch(searchFilter, isSource) {
  return initializationService.cfg.expressionService.executeFieldSearch(initializationService.cfg, searchFilter, isSource);
}
function getField(fieldPath, isSource) {
  var field = null;

  for (var _iterator = _createForOfIteratorHelperLoose(initializationService.cfg.getDocs(isSource)), _step; !(_step = _iterator()).done;) {
    var doc = _step.value;
    field = core.Field.getField(fieldPath, doc.getAllFields());

    if (field) {
      break;
    }
  }

  return field;
}
function mappingExpressionAddField(selectedDocId, selectedField, newTextNode, atIndex, isTrailer) {
  var mapping = initializationService.cfg.mappings.activeMapping;

  if (!mapping || !selectedDocId || !selectedField) {
    return;
  }

  configModel.expressionService.addFieldToExpression(mapping, selectedDocId, selectedField, newTextNode, atIndex, isTrailer);
  initializationService.cfg.mappingService.notifyMappingUpdated();
}
function mappingExpressionInit() {
  if (!initializationService.cfg.mappings || !initializationService.cfg.mappings.activeMapping) {
    return;
  }

  var mapping = initializationService.cfg.mappings.activeMapping; // Filter out padding fields for expression mapping.

  mapping.getMappedFields(true).filter(function (mf) {
    return mf.isPadField();
  }).forEach(function (mf) {
    return mapping.removeMappedField(mf);
  });

  if (!mapping.transition.expression) {
    mapping.transition.expression = new core.ExpressionModel(mapping, initializationService.cfg);
    mapping.transition.expression.generateInitialExpression();
  } else {
    mapping.transition.expression.setConfigModel(initializationService.cfg);
  }

  mapping.transition.expression.updateFieldReference(mapping);
}
function mappingExpressionClearText(nodeId, startOffset, endOffset) {
  var uuidNode = initializationService.cfg.mappings.activeMapping.transition.expression.clearText(nodeId, startOffset, endOffset);
  initializationService.cfg.mappingService.notifyMappingUpdated();
  return uuidNode;
}
function mappingExpressionInsertText(str, nodeId, offset) {
  initializationService.cfg.mappings.activeMapping.transition.expression.insertText(str, nodeId, offset);
  initializationService.cfg.mappingService.notifyMappingUpdated();
}
function mappingExpressionObservable() {
  var _initializationServic, _initializationServic2, _initializationServic3;

  if (!((_initializationServic = initializationService.cfg.mappings) !== null && _initializationServic !== void 0 && (_initializationServic2 = _initializationServic.activeMapping) !== null && _initializationServic2 !== void 0 && (_initializationServic3 = _initializationServic2.transition) !== null && _initializationServic3 !== void 0 && _initializationServic3.expression)) {
    return null;
  }

  return initializationService.cfg.mappings.activeMapping.transition.expression.expressionUpdated$;
}
function mappingExpressionRemoveField(tokenPosition, offset, removeNext) {
  initializationService.cfg.mappings.activeMapping.transition.expression.removeToken(tokenPosition, offset, removeNext);
  initializationService.cfg.mappingService.notifyMappingUpdated();
}
function onFieldPreviewChange(field, value) {
  field.amField.value = value;
  initializationService.cfg.mappingService.notifyMappingUpdated();
}
function toggleExpressionMode() {
  initializationService.cfg.expressionService.toggleExpressionMode();
  initializationService.cfg.mappingService.notifyMappingUpdated();
}
function getMappingActions(isSource) {
  return initializationService.cfg.fieldActionService.getActionsAppliesToField(initializationService.cfg.mappings.activeMapping, isSource, core.Multiplicity.ONE_TO_ONE);
}
function getMultiplicityActions(mapping) {
  if (mapping.transition.mode === core.TransitionMode.ONE_TO_MANY) {
    return initializationService.cfg.fieldActionService.getActionsAppliesToField(mapping, true, core.Multiplicity.ONE_TO_MANY);
  } else if (mapping.transition.mode === core.TransitionMode.MANY_TO_ONE) {
    return initializationService.cfg.fieldActionService.getActionsAppliesToField(mapping, true, core.Multiplicity.MANY_TO_ONE);
  } else {
    return [];
  }
}
function getMultiplicityActionDelimiters() {
  return core.TransitionModel.delimiterModels;
}
function handleActionChange(action, definition) {
  action.argumentValues = []; // Invalidate the previously selected field action arguments.

  definition.populateFieldAction(action); // If the field action configuration predefines argument values then populate the fields with
  // default values.  Needed to support pull-down menus in action argument definitions.

  if (action.argumentValues.values() && action.argumentValues.length > 0 && definition.arguments[0] && definition.arguments[0].values && definition.arguments[0].values.length > 0) {
    for (var i = 0; i < action.argumentValues.length; i++) {
      action.argumentValues[i].value = definition.arguments[i].values[i];
    }
  }

  initializationService.cfg.mappingService.notifyMappingUpdated();
}
/**
 * Process a mapped field index change.  The source field is represented by
 * currentIndex.  The target index is represented either by a number or by a
 * mapped field (depending on whether the index was physically modified or
 * d&d modified).
 *
 * @param isSource
 * @param currentIndex
 * @param target
 */

function handleIndexChange(isSource, currentIndex, target) {
  var _cfg$mappings2;

  var cfg = core.ConfigModel.getConfig();
  var activeMapping = (_cfg$mappings2 = cfg.mappings) === null || _cfg$mappings2 === void 0 ? void 0 : _cfg$mappings2.activeMapping;

  if (!activeMapping) {
    return;
  }

  var sourceField = activeMapping.getMappedFieldForIndex('' + (currentIndex + 1), isSource);

  if (!sourceField) {
    return;
  }

  var newIndex = 0; // If the target is an actual index value then check for the need to add padding.

  if (typeof target === 'number') {
    newIndex = target;

    if (target <= 0 || !activeMapping) {
      return;
    }

    var mappedFields = activeMapping.getMappedFields(isSource);
    var maxIndex = mappedFields.length;

    if (target > maxIndex) {
      // Add place-holders for each index value between the previous max index
      // and the insertion index.
      cfg.mappingService.addPlaceholders(target - mappedFields.length, activeMapping, maxIndex, isSource);
    } // If the target is a dropped field then extract the mapped field to determine the index.

  } else {
    var field = activeMapping.getMappedFieldForField(target);

    if (!field) {
      return;
    }

    newIndex = activeMapping.getIndexForMappedField(field);
  }

  cfg.mappingService.moveMappedFieldTo(activeMapping, sourceField, newIndex);
}
function handleNewTransformation(isSource, index) {
  var _cfg$mappings3;

  var cfg = core.ConfigModel.getConfig();
  var activeMapping = (_cfg$mappings3 = cfg.mappings) === null || _cfg$mappings3 === void 0 ? void 0 : _cfg$mappings3.activeMapping;

  if (!activeMapping) {
    return;
  }

  var field = activeMapping.getMappedFieldForIndex('' + (index + 1), isSource);

  if (!field) {
    return;
  }

  var action = new core.FieldAction();
  var availableActions = getMappingActions(isSource);
  availableActions[0].populateFieldAction(action);
  field.actions.push(action);
  cfg.mappingService.notifyMappingUpdated();
}
function handleTransformationChange(isSource, index, currentTransformationIndex, newTransformationName) {
  var _cfg$mappings4;

  var cfg = core.ConfigModel.getConfig();
  var activeMapping = (_cfg$mappings4 = cfg.mappings) === null || _cfg$mappings4 === void 0 ? void 0 : _cfg$mappings4.activeMapping;

  if (!activeMapping) {
    return;
  }

  var field = activeMapping.getMappedFieldForIndex('' + (index + 1), isSource);

  if (!field) {
    return;
  }

  var action = field.actions[currentTransformationIndex];
  var newAction = getMappingActions(isSource).find(function (a) {
    return a.name === newTransformationName;
  });

  if (action && newAction) {
    action.argumentValues = []; // Invalidate the previously selected field action arguments.

    newAction.populateFieldAction(action); // If the field action configuration predefines argument values then populate the fields with
    // default values.  Needed to support pull-down menus in action argument definitions.

    if (action.argumentValues.values() && action.argumentValues.length > 0 && newAction.arguments[0] && newAction.arguments[0].values && newAction.arguments[0].values.length > 0) {
      for (var i = 0; i < action.argumentValues.length; i++) {
        action.argumentValues[i].value = newAction.arguments[i].values[i];
      }
    }

    cfg.mappingService.notifyMappingUpdated();
  }
}
function handleTransformationArgumentChange(isSource, index, transformationIndex, argumentName, argumentValue) {
  var _cfg$mappings5;

  var cfg = core.ConfigModel.getConfig();
  var activeMapping = (_cfg$mappings5 = cfg.mappings) === null || _cfg$mappings5 === void 0 ? void 0 : _cfg$mappings5.activeMapping;

  if (!activeMapping) {
    return;
  }

  var field = activeMapping.getMappedFieldForIndex('' + (index + 1), isSource);

  if (!field) {
    return;
  }

  var action = field.actions[transformationIndex];

  if (action) {
    action.setArgumentValue(argumentName, argumentValue);
    cfg.mappingService.notifyMappingUpdated();
  }
}
function handleRemoveTransformation(isSource, index, transformationIndex) {
  var _cfg$mappings6;

  var cfg = core.ConfigModel.getConfig();
  var activeMapping = (_cfg$mappings6 = cfg.mappings) === null || _cfg$mappings6 === void 0 ? void 0 : _cfg$mappings6.activeMapping;

  if (!activeMapping) {
    return;
  }

  var field = activeMapping.getMappedFieldForIndex('' + (index + 1), isSource);

  if (!field) {
    return;
  }

  var action = field.actions[transformationIndex];

  if (action) {
    core.CommonUtil.removeItemFromArray(action, field.actions);
    cfg.mappingService.notifyMappingUpdated();
  }
}
function handleMultiplicityChange(action, name) {
  var _cfg$mappings7;

  var cfg = core.ConfigModel.getConfig();
  var activeMapping = (_cfg$mappings7 = cfg.mappings) === null || _cfg$mappings7 === void 0 ? void 0 : _cfg$mappings7.activeMapping;

  if (!activeMapping) {
    return;
  }

  var newAction = getMultiplicityActions(activeMapping).find(function (a) {
    return a.name === name;
  });

  if (action && newAction) {
    action.argumentValues = []; // Invalidate the previously selected field action arguments.

    newAction.populateFieldAction(action); // If the field action configuration predefines argument values then populate the fields with
    // default values.  Needed to support pull-down menus in action argument definitions.

    if (action.argumentValues.values() && action.argumentValues.length > 0 && newAction.arguments[0] && newAction.arguments[0].values && newAction.arguments[0].values.length > 0) {
      for (var i = 0; i < action.argumentValues.length; i++) {
        action.argumentValues[i].value = newAction.arguments[i].values[i];
      }
    }

    initializationService.cfg.mappingService.notifyMappingUpdated();
  }
}
function handleMultiplicityArgumentChange(multiplicityFieldAction, argumentName, argumentValue) {
  var cfg = core.ConfigModel.getConfig();
  multiplicityFieldAction.setArgumentValue(argumentName, argumentValue);
  cfg.mappingService.notifyMappingUpdated();
}
function selectMapping(mapping) {
  initializationService.cfg.mappingService.selectMapping(mapping.mapping);
}
function deselectMapping() {
  initializationService.cfg.mappingService.deselectMapping();
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function createConstant(constName, constValue, constType, addToActiveMapping) {
  var cfg = core.ConfigModel.getConfig();
  cfg.documentService.createConstant(constName, constValue, constType, addToActiveMapping);
}
function deleteConstant(constName) {
  var cfg = core.ConfigModel.getConfig();
  cfg.documentService.deleteConstant(constName);
}
function editConstant(constName, constValue, constType, origName) {
  var cfg = core.ConfigModel.getConfig();
  cfg.documentService.editConstant(constName, constValue, constType, origName);
}
function getConstantType(constName) {
  var cfg = core.ConfigModel.getConfig();
  return cfg.documentService.getConstantType(constName);
}
function getConstantTypeIndex(constName) {
  var cfg = core.ConfigModel.getConfig();
  return cfg.documentService.getConstantTypeIndex(constName);
}
function createProperty(propName, propType, propScope, isSource, addToActiveMapping) {
  var cfg = core.ConfigModel.getConfig();
  cfg.documentService.createProperty(propName, propType, propScope, isSource, addToActiveMapping);
}
function deleteProperty(propName, propScope, isSource) {
  var cfg = core.ConfigModel.getConfig();
  cfg.documentService.deleteProperty(propName, propScope, isSource);
}
function editProperty(propName, propType, propScope, isSource, newName, newScope) {
  var cfg = core.ConfigModel.getConfig();
  cfg.documentService.editProperty(propName, propType, propScope, isSource, newName, newScope);
}
function getPropertyType(propName, propScope, isSource) {
  var cfg = core.ConfigModel.getConfig();
  return cfg.documentService.getPropertyType(propName, propScope, isSource);
}
function getPropertyTypeIndex(propName, propScope, isSource) {
  var cfg = core.ConfigModel.getConfig();
  return cfg.documentService.getPropertyTypeIndex(propName, propScope, isSource);
}
/**
 * Create a new mapping or modify the existing active mapping using the specified source and target IDs.
 *
 * @param source
 * @param target
 */

function createMapping(source, target) {
  var cfg = core.ConfigModel.getConfig();
  var ms = initializationService.cfg.mappingService;

  if (target) {
    var _cfg$mappings, _cfg$mappings2;

    if (!((_cfg$mappings = cfg.mappings) !== null && _cfg$mappings !== void 0 && _cfg$mappings.activeMapping) && (source !== null && source !== void 0 && source.partOfMapping || target.partOfMapping)) {
      cfg.errorService.addError(new core.ErrorInfo({
        message: "Unable to map '" + source.name + "/" + target.name + "'.  Please select a mapping before adding to it.",
        level: core.ErrorLevel.INFO,
        scope: core.ErrorScope.MAPPING,
        type: core.ErrorType.USER
      }));
      return;
    }

    if (source && (_cfg$mappings2 = cfg.mappings) !== null && _cfg$mappings2 !== void 0 && _cfg$mappings2.activeMapping && (source.partOfMapping || target.partOfMapping)) {
      var exclusionReason = null;

      if (!source.partOfMapping) {
        var _cfg$mappings3;

        exclusionReason = ms.getFieldSelectionExclusionReason((_cfg$mappings3 = cfg.mappings) === null || _cfg$mappings3 === void 0 ? void 0 : _cfg$mappings3.activeMapping, source);
      } else {
        var _cfg$mappings4;

        exclusionReason = ms.getFieldSelectionExclusionReason((_cfg$mappings4 = cfg.mappings) === null || _cfg$mappings4 === void 0 ? void 0 : _cfg$mappings4.activeMapping, target);
      }

      if (exclusionReason !== null) {
        var _cfg$mappings5;

        cfg.errorService.addError(new core.ErrorInfo({
          message: "The field '" + target.name + "' cannot be selected, " + exclusionReason + ".",
          level: core.ErrorLevel.ERROR,
          mapping: (_cfg$mappings5 = cfg.mappings) === null || _cfg$mappings5 === void 0 ? void 0 : _cfg$mappings5.activeMapping,
          scope: core.ErrorScope.MAPPING,
          type: core.ErrorType.USER
        }));
        return;
      }

      if (target.partOfMapping && cfg.mappings.activeMapping.targetFields[0].field.path === target.path) {
        addToCurrentMapping(source);
        return;
      }

      if (source.partOfMapping && cfg.mappings.activeMapping.sourceFields[0].field.path === source.path) {
        addToCurrentMapping(target);
        return;
      }
    }
  }

  if (source) {
    cfg.mappingService.addNewMapping(source, false);
  } else {
    cfg.mappingService.newMapping();
  }

  if (target) {
    addToCurrentMapping(target);
  }
}
/**
 * Create a new mapping.
 */

function newMapping() {
  var cfg = core.ConfigModel.getConfig();
  cfg.mappingService.newMapping();
}
/**
 * Removes a mapping.
 */

function removeMapping(mappingModel) {
  core.ConfigModel.getConfig().mappingService.removeMapping(mappingModel);
}
/**
 * Add the specified field to the current mapping.
 *
 * @param field
 */

function addToCurrentMapping(field) {
  var cfg = core.ConfigModel.getConfig();
  cfg.mappingService.addFieldToActiveMapping(field);
}
/**
 * Remove the specified field from the current mapping.
 *
 * @param field
 */

function removeFromCurrentMapping(field) {
  var _cfg$mappings6;

  var cfg = core.ConfigModel.getConfig();
  var mapping = (_cfg$mappings6 = cfg.mappings) === null || _cfg$mappings6 === void 0 ? void 0 : _cfg$mappings6.activeMapping;

  if (mapping) {
    var mappedField = mapping.getMappedFieldForField(field);

    if (mappedField) {
      mapping.removeMappedField(mappedField);
      cfg.mappingService.updateMappedField(mapping);
    }
  }
}
/**
 * Add the specified field to the current mapping.
 *
 * @param field
 */

function removeMappedFieldFromCurrentMapping(field) {
  var _cfg$mappings7;

  var cfg = core.ConfigModel.getConfig();
  var mapping = (_cfg$mappings7 = cfg.mappings) === null || _cfg$mappings7 === void 0 ? void 0 : _cfg$mappings7.activeMapping;

  if (mapping && field) {
    mapping.removeMappedField(field);
    cfg.mappingService.updateMappedField(mapping);
  }
}
/**
 * Return the enumeration mapping lookup table associated with the active mapping.
 *
 */

function getEnumerationValues() {
  var _cfg$mappings8;

  var cfg = core.ConfigModel.getConfig();
  var activeMapping = (_cfg$mappings8 = cfg.mappings) === null || _cfg$mappings8 === void 0 ? void 0 : _cfg$mappings8.activeMapping;

  if (!activeMapping) {
    return [];
  }

  return initializationService.cfg.mappingService.getEnumerationValues(cfg, activeMapping);
}
/**
 * Retrieve the enumeration values for the specified field node ID.
 *
 * @param nodeId - enumeration field node ID
 */

function getFieldEnums(nodeId) {
  var _uuidNode$mappedField;

  var uuidNode = initializationService.cfg.mappings.activeMapping.transition.expression.getNode(nodeId);

  if (uuidNode && (_uuidNode$mappedField = uuidNode.mappedField) !== null && _uuidNode$mappedField !== void 0 && _uuidNode$mappedField.field.enumeration) {
    return uuidNode.mappedField.field.enumValues;
  }

  return [];
}
/**
 * Set the value for a enumeration reference field.  This way the enumeration field may be
 * used in conditional expressions.  Not used for enumeration mappings.
 *
 * @param selectedEnumNodeId - enumeration field node ID
 * @param selectedEnumValueIndex - enumeration index value
 */

function setSelectedEnumValue(selectedEnumNodeId, selectedEnumValueIndex) {
  var _uuidNode$mappedField2;

  var mapping = initializationService.cfg.mappings.activeMapping;
  var uuidNode = mapping.transition.expression.getNode(selectedEnumNodeId);

  if (uuidNode && (_uuidNode$mappedField2 = uuidNode.mappedField) !== null && _uuidNode$mappedField2 !== void 0 && _uuidNode$mappedField2.field.enumeration) {
    initializationService.cfg.mappingService.setEnumFieldValue(uuidNode.mappedField.field, selectedEnumValueIndex);
    mapping.transition.expression.updateFieldReference(mapping);
    initializationService.cfg.mappingService.notifyMappingUpdated();
  }
}
function updateEnumerationValues(enumerationValues) {
  var _cfg$mappings9;

  var cfg = core.ConfigModel.getConfig();
  var activeMapping = (_cfg$mappings9 = cfg.mappings) === null || _cfg$mappings9 === void 0 ? void 0 : _cfg$mappings9.activeMapping;

  if (!activeMapping) {
    return;
  }

  initializationService.cfg.mappingService.updateEnumerationValues(cfg, activeMapping, enumerationValues);
}
function isEnumerationMapping() {
  var _cfg$mappings10;

  var cfg = core.ConfigModel.getConfig();
  return initializationService.cfg.mappingService.isEnumerationMapping((_cfg$mappings10 = cfg.mappings) === null || _cfg$mappings10 === void 0 ? void 0 : _cfg$mappings10.activeMapping);
}

var version = "2.3.8";

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
/**
 * Return true if the specified file object exists as a source or target
 * document, false otherwise.
 *
 * @param file - file object
 * @param isSource - source or target panel
 */

/**
 * Delete the specified source or target document.
 *
 * @param fileId - document ID to delete
 * @param isSource - source or target panel
 */
var deleteAtlasFile = function deleteAtlasFile(fileId, isSource) {
  try {
    var cfg = core.ConfigModel.getConfig();
    var docDef = getDocDef(fileId, cfg, isSource);
    return Promise.resolve(removeDocumentRef(docDef, cfg)).then(function () {
      cfg.initializationService.updateInitComplete();
    });
  } catch (e) {
    return Promise.reject(e);
  }
};
/**
 * The user has requested their current mappings be exported.  Use the mapping management
 * service to establish the file content and to push it down to the server.
 *
 * @param fileName - user-specified ADM archive file name
 */

function documentExists(file, isSource) {
  var docDef = getDocDefByName(file.name, core.ConfigModel.getConfig(), isSource);
  return docDef ? true : false;
}
function exportADMArchiveFile(fileName) {
  var cfg = core.ConfigModel.getConfig();
  return cfg.fileService.exportADMArchive(fileName);
}
/**
 * Import an ADM archive file or a user JAR file.
 *
 * @param selectedFile
 * @param userFileSuffix
 * @param cfg
 */

function importADMArchiveFile(selectedFile, cfg) {
  cfg.initializationService.initializeWithADMArchiveFile(selectedFile);
}
/**
 * Import a JAR file.
 *
 * @param selectedFile
 * @param userFileSuffix
 * @param cfg
 */

function importJarFile(selectedFile, cfg) {
  cfg.fileService.importJarFile(selectedFile);
}
/**
 * Remove all documents and imported JARs from the server.
 */

function resetAtlasmap() {
  var cfg = core.ConfigModel.getConfig();
  cfg.initializationService.resetAtlasMap();
}
function getRuntimeVersion() {
  var cfg = core.ConfigModel.getConfig();
  return cfg.initializationService.getRuntimeVersion();
}
function getUIVersion() {
  return version;
}
function toggleMappingPreview(enabled) {
  var cfg = core.ConfigModel.getConfig();
  return cfg.previewService.toggleMappingPreview(enabled);
}
function toggleShowMappedFields(enabled) {
  var cfg = core.ConfigModel.getConfig();
  cfg.showMappedFields = enabled;
  cfg.initializationService.systemInitializedSource.next();
  return enabled;
}
function toggleShowUnmappedFields(enabled) {
  var cfg = core.ConfigModel.getConfig();
  cfg.showUnmappedFields = enabled;
  cfg.initializationService.systemInitializedSource.next();
  return enabled;
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function useToggle(initialState, onToggle) {
  var _useState = React.useState(initialState),
      state = _useState[0],
      setState = _useState[1];

  React.useEffect(function () {
    return setState(initialState);
  }, [initialState]);
  var toggle = React.useCallback(function () {
    try {
      var _temp2 = function _temp2(newState) {
        setState(newState);
      };

      return Promise.resolve(onToggle ? Promise.resolve(onToggle(!state)).then(_temp2) : _temp2(!state));
    } catch (e) {
      return Promise.reject(e);
    }
  }, [onToggle, state]);
  var toggleOff = React.useCallback(function () {
    return setState(false);
  }, []);
  var toggleOn = React.useCallback(function () {
    return setState(true);
  }, []);
  return {
    state: state,
    toggle: toggle,
    toggleOff: toggleOff,
    toggleOn: toggleOn,
    setToggle: setState
  };
}

var CanvasContext = /*#__PURE__*/React.createContext(null);
var CanvasProvider = function CanvasProvider(_ref) {
  var children = _ref.children,
      _ref$allowPanning = _ref.allowPanning,
      allowPanning = _ref$allowPanning === void 0 ? false : _ref$allowPanning,
      _ref$initialWidth = _ref.initialWidth,
      initialWidth = _ref$initialWidth === void 0 ? 0 : _ref$initialWidth,
      _ref$initialHeight = _ref.initialHeight,
      initialHeight = _ref$initialHeight === void 0 ? 0 : _ref$initialHeight,
      _ref$initialZoom = _ref.initialZoom,
      initialZoom = _ref$initialZoom === void 0 ? 1 : _ref$initialZoom,
      _ref$initialPanX = _ref.initialPanX,
      initialPanX = _ref$initialPanX === void 0 ? 0 : _ref$initialPanX,
      _ref$initialPanY = _ref.initialPanY,
      initialPanY = _ref$initialPanY === void 0 ? 0 : _ref$initialPanY;

  var _useState = React.useState({
    width: 0,
    height: 0,
    offsetLeft: 0,
    offsetTop: 0
  }),
      canvasDimension = _useState[0],
      setCanvasDimension = _useState[1];

  var rects = React.useRef([]);
  var removeRect = React.useCallback(function (id) {
    rects.current = rects.current.filter(function (r) {
      return r.id !== id;
    });
  }, []);
  var addRect = React.useCallback(function (rect) {
    removeRect(rect.id);
    rects.current = [].concat(rects.current, [rect]);
  }, [removeRect]);
  var getRects = React.useCallback(function () {
    return rects.current;
  }, []);
  var redrawCallbacks = React.useRef([]);
  var addRedrawListener = React.useCallback(function (cb) {
    redrawCallbacks.current = [].concat(redrawCallbacks.current, [cb]);
  }, []);
  var removeRedrawListener = React.useCallback(function (cb) {
    redrawCallbacks.current = redrawCallbacks.current.filter(function (c) {
      return c !== cb;
    });
  }, []);
  React.useEffect(function effectLoop() {
    var frame = requestAnimationFrame(function loop() {
      frame = requestAnimationFrame(loop);

      for (var i = 0, len = redrawCallbacks.current.length; i < len; i++) {
        redrawCallbacks.current[i]();
      }
    });
    return function cancelEffectLoop() {
      cancelAnimationFrame(frame);
    };
  }, []);

  var _useState2 = React.useState({
    x: initialPanX,
    y: initialPanY
  }),
      _useState2$ = _useState2[0],
      panX = _useState2$.x,
      panY = _useState2$.y,
      setPan = _useState2[1];

  var _useState3 = React.useState(initialZoom),
      zoom = _useState3[0],
      setZoom = _useState3[1];

  var updateZoom = React.useCallback(function (tick) {
    setZoom(function (currentZoom) {
      return Math.max(0.2, Math.min(2, currentZoom + tick));
    });
  }, [setZoom]);
  var resetZoom = React.useCallback(function () {
    return setZoom(1);
  }, [setZoom]);
  var resetPan = React.useCallback(function () {
    return setPan({
      x: 0,
      y: 0
    });
  }, [setPan]);

  var _useState4 = React.useState(false),
      isPanning = _useState4[0],
      setIsPanning = _useState4[1];

  var bindCanvas = reactUseGesture.useGesture({
    onDrag: function onDrag(_ref2) {
      var _ref2$movement = _ref2.movement,
          x = _ref2$movement[0],
          y = _ref2$movement[1],
          first = _ref2.first,
          last = _ref2.last,
          _ref2$memo = _ref2.memo,
          memo = _ref2$memo === void 0 ? [panX, panY] : _ref2$memo;
      if (first) setIsPanning(true);
      if (last) setIsPanning(false);
      setPan({
        x: x + memo[0],
        y: y + memo[1]
      });
      return memo;
    },
    onWheel: function onWheel(_ref3) {
      var delta = _ref3.delta;
      updateZoom(delta[1] * -0.001);
    }
  }, {
    drag: {
      delay: true
    },
    enabled: allowPanning
  });
  return React__default.createElement(CanvasContext.Provider, {
    value: {
      initialWidth: initialWidth,
      initialHeight: initialHeight,
      dimensions: canvasDimension,
      setDimension: setCanvasDimension,
      panX: panX,
      panY: panY,
      addRedrawListener: addRedrawListener,
      removeRedrawListener: removeRedrawListener,
      addRect: addRect,
      removeRect: removeRect,
      getRects: getRects,
      zoom: zoom,
      updateZoom: updateZoom,
      resetZoom: resetZoom,
      pan: {
        x: panX,
        y: panY
      },
      setPan: setPan,
      resetPan: resetPan,
      allowPanning: allowPanning,
      isPanning: isPanning,
      bindCanvas: bindCanvas
    }
  }, children);
};
function useCanvas() {
  var context = React.useContext(CanvasContext);

  if (!context) {
    throw new Error('A CanvasProvider wrapper is required to use this hook.');
  }

  var _context$dimensions = context.dimensions,
      width = _context$dimensions.width,
      height = _context$dimensions.height,
      zoom = context.zoom;
  var xDomain = React.useMemo(function () {
    return d3Scale.scaleLinear().range([0, width]).domain([0, width * zoom]);
  }, [width, zoom]);
  var yDomain = React.useMemo(function () {
    return d3Scale.scaleLinear().range([height, 0]).domain([height * zoom, 0]);
  }, [height, zoom]);
  return _extends({}, context, {
    xDomain: xDomain,
    yDomain: yDomain
  });
}
var WithCanvas = function WithCanvas(_ref4) {
  var children = _ref4.children;
  var context = useCanvas();
  return children(context);
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var CanvasTransforms = function CanvasTransforms(_ref) {
  var children = _ref.children;

  var _useCanvas = useCanvas(),
      panX = _useCanvas.panX,
      panY = _useCanvas.panY,
      zoom = _useCanvas.zoom; // const originX = width / 2;
  // const originY = height / 2;
  // const x = xDomain(zoom * (panX + originX) - originX);
  // const y = yDomain(zoom * (panY + originY) - originY);


  return React__default.createElement("g", {
    transform: "\n        translate(" + panX + " " + panY + ")\n        scale(" + zoom + ")\n      "
  }, children);
};

var styles = {"canvasWrapper":"Canvas-module_canvasWrapper__2zUnn","svg":"Canvas-module_svg__21OUU","panning":"Canvas-module_panning__3mi51"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var noSize = {
  width: 0,
  height: 0,
  top: 0,
  left: 0,
  x: 0,
  y: 0,
  right: 0,
  bottom: 0
};

function areRectsDifferent(a, b) {
  return a.width !== b.width || a.height !== b.height || a.top !== b.top || a.left !== b.left || a.x !== b.x || a.y !== b.y || a.right !== b.right || a.bottom !== b.bottom;
}

function useDimensions(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$liveMeasure = _ref.liveMeasure,
      liveMeasure = _ref$liveMeasure === void 0 ? true : _ref$liveMeasure;

  var previousDimensions = React.useRef(noSize);

  var _useState = React.useState(noSize),
      dimensions = _useState[0],
      setDimensions = _useState[1];

  var ref = React.useRef(null);
  var measure = React.useCallback(function () {
    if (ref.current) {
      var d = ref.current.getBoundingClientRect();

      if (areRectsDifferent(d, previousDimensions.current)) {
        setDimensions(d);
        previousDimensions.current = d;
      }
    }
  }, [setDimensions]);
  React.useLayoutEffect(function () {
    measure();

    if (liveMeasure) {
      window.addEventListener('resize', measure);
      window.addEventListener('scroll', measure);
    }

    return function () {
      if (liveMeasure) {
        window.removeEventListener('resize', measure);
        window.removeEventListener('scroll', measure);
      }
    };
  }, [liveMeasure, measure]);
  return [ref, dimensions, measure];
}

var Canvas = function Canvas(_ref) {
  var children = _ref.children,
      className = _ref.className,
      style = _ref.style,
      _ref$isFilled = _ref.isFilled,
      isFilled = _ref$isFilled === void 0 ? true : _ref$isFilled,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "className", "style", "isFilled"]);

  var _useCanvas = useCanvas(),
      initialWidth = _useCanvas.initialWidth,
      initialHeight = _useCanvas.initialHeight,
      setDimension = _useCanvas.setDimension,
      addRedrawListener = _useCanvas.addRedrawListener,
      removeRedrawListener = _useCanvas.removeRedrawListener;

  var _useDimensions = useDimensions(),
      dimensionsRef = _useDimensions[0],
      dimensions = _useDimensions[1],
      measure = _useDimensions[2];

  React.useEffect(function () {
    setDimension({
      width: dimensions.width,
      height: dimensions.height,
      offsetLeft: dimensions.left,
      offsetTop: dimensions.top
    });
  }, [dimensions, setDimension]);
  React.useEffect(function () {
    addRedrawListener(measure);
    return function () {
      return removeRedrawListener(measure);
    };
  }, [addRedrawListener, measure, removeRedrawListener]);

  var _useCanvas2 = useCanvas(),
      allowPanning = _useCanvas2.allowPanning,
      isPanning = _useCanvas2.isPanning,
      zoom = _useCanvas2.zoom,
      bindCanvas = _useCanvas2.bindCanvas;

  var svgStyle = React.useMemo(function () {
    return _extends({
      cursor: allowPanning ? isPanning ? 'grabbing' : 'grab' : undefined,
      userSelect: allowPanning && isPanning ? 'none' : 'auto',
      backgroundSize: 30 * zoom + "px " + 30 * zoom + "px",
      width: initialWidth || '100%',
      height: initialHeight || '100%'
    }, style);
  }, [allowPanning, initialHeight, initialWidth, isPanning, style, zoom]);
  return React__default.createElement("div", {
    ref: dimensionsRef,
    className: reactStyles.css(isFilled && styles.canvasWrapper)
  }, React__default.createElement("svg", Object.assign({}, props, {
    className: reactStyles.css(styles.svg, allowPanning && styles.panning, className),
    style: svgStyle
  }, bindCanvas()), React__default.createElement(CanvasTransforms, null, children)));
};

var styles$1 = {"foreignObject":"HTMLObject-module_foreignObject__2v8cW"};

var HTMLObject = /*#__PURE__*/React.forwardRef(function HTMLObject(_ref, ref) {
  var children = _ref.children,
      width = _ref.width,
      height = _ref.height,
      x = _ref.x,
      y = _ref.y,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "width", "height", "x", "y", "className"]);

  return React__default.createElement("foreignObject", Object.assign({
    width: width,
    height: height,
    x: x,
    y: y,
    className: reactStyles.css(styles$1.foreignObject, className)
  }, props, {
    ref: ref
  }), children);
});

var styles$2 = {"clickable":"Arc-module_clickable__25tnx"};

var Arc = function Arc(_ref) {
  var start = _ref.start,
      end = _ref.end,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'horizontal' : _ref$type,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? 'grey' : _ref$color,
      _ref$hoveredColor = _ref.hoveredColor,
      hoveredColor = _ref$hoveredColor === void 0 ? color : _ref$hoveredColor,
      _ref$strokeWidth = _ref.strokeWidth,
      strokeWidth = _ref$strokeWidth === void 0 ? 2 : _ref$strokeWidth,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, ["start", "end", "type", "color", "hoveredColor", "strokeWidth", "startSideSize", "endSideSize", "sideStrokeWidth", "className", "children"]);

  var _useToggle = useToggle(false),
      hovered = _useToggle.state,
      toggleHoverOn = _useToggle.toggleOn,
      toggleHoverOff = _useToggle.toggleOff;

  var s = strokeWidth;
  var appliedColor = hovered ? hoveredColor : color;
  var link = React.useMemo(function () {
    return (type === 'horizontal' ? d3Shape.linkHorizontal : d3Shape.linkVertical)().context(null).source(function (d) {
      return d.start;
    }).target(function (d) {
      return d.end;
    }).x(function (d) {
      return d.x;
    }).y(function (d) {
      return d.y;
    });
  }, [type]);
  var d = link({
    start: start,
    end: end
  });
  return d ? React__default.createElement("g", {
    onMouseEnter: toggleHoverOn,
    onMouseLeave: toggleHoverOff,
    style: {
      pointerEvents: 'all'
    }
  }, React__default.createElement("path", {
    d: d,
    stroke: appliedColor,
    strokeWidth: s,
    fill: 'none'
  }), React__default.createElement("path", Object.assign({
    d: d,
    stroke: 'transparent',
    strokeWidth: 20,
    fill: 'none',
    className: reactStyles.css(props.onClick && styles$2.clickable)
  }, props)), children) : null;
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var ArcEdge = function ArcEdge(_ref) {
  var start = _ref.start,
      end = _ref.end,
      strokeWidth = _ref.strokeWidth,
      color = _ref.color;
  return React__default.createElement("line", {
    x1: start.x,
    y1: start.y,
    x2: end.x,
    y2: end.y,
    stroke: color,
    strokeWidth: strokeWidth
  });
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function useBoundingCanvasRect() {
  var _useCanvas = useCanvas(),
      xDomain = _useCanvas.xDomain,
      yDomain = _useCanvas.yDomain,
      _useCanvas$dimensions = _useCanvas.dimensions,
      offsetLeft = _useCanvas$dimensions.offsetLeft,
      offsetTop = _useCanvas$dimensions.offsetTop,
      panX = _useCanvas.panX,
      panY = _useCanvas.panY;

  var convertClientX = React.useCallback(function (x) {
    return xDomain(x - offsetLeft - panX);
  }, [offsetLeft, panX, xDomain]);
  var convertClientY = React.useCallback(function (y) {
    return yDomain(y - offsetTop - panY);
  }, [offsetTop, panY, yDomain]);
  var convertDOMRectToCanvasRect = React.useCallback(function (rect) {
    return {
      x: convertClientX(rect.x),
      y: convertClientY(rect.y),
      width: xDomain(rect.width),
      height: yDomain(rect.height),
      top: convertClientY(rect.top),
      right: convertClientX(rect.right),
      bottom: convertClientY(rect.bottom),
      left: convertClientX(rect.left)
    };
  }, [convertClientX, convertClientY, xDomain, yDomain]);
  return {
    getBoundingCanvasRect: React.useCallback(function (element) {
      var rect = element.getBoundingClientRect();
      return convertDOMRectToCanvasRect(rect);
    }, [convertDOMRectToCanvasRect]),
    convertDOMRectToCanvasRect: convertDOMRectToCanvasRect,
    convertClientX: convertClientX,
    convertClientY: convertClientY
  };
}

var NodeRefContext = /*#__PURE__*/React.createContext(null);
var NodeRefProvider = function NodeRefProvider(_ref) {
  var children = _ref.children;
  var nodes = React.useRef({});

  var setRef = function setRef(_ref2) {
    var id = _ref2.id,
        props = _objectWithoutPropertiesLoose(_ref2, ["id"]);

    var key = id + "-" + Date.now();
    var ids = Array.isArray(id) ? id : [id];

    for (var index = 0; index < ids.length; index++) {
      var curId = ids[index];

      if (curId) {
        nodes.current[ids[index]] = _extends({}, props, {
          key: key
        });
      }
    }

    return key;
  };

  var unsetRef = function unsetRef(id, key) {
    var ids = Array.isArray(id) ? id : [id];

    for (var index = 0; index < ids.length; index++) {
      var _nodes$current$curId;

      var curId = ids[index];

      if (curId && ((_nodes$current$curId = nodes.current[curId]) === null || _nodes$current$curId === void 0 ? void 0 : _nodes$current$curId.key) === key) {
        delete nodes.current[curId];
      }
    }
  };

  return React__default.createElement(NodeRefContext.Provider, {
    value: {
      nodes: nodes,
      setRef: setRef,
      unsetRef: unsetRef
    }
  }, children);
};
function useNodeRef(props) {
  var context = React.useContext(NodeRefContext);
  React.useEffect(function () {
    if (context && props.id) {
      var setRef = context.setRef,
          unsetRef = context.unsetRef;
      var key = setRef(props);
      return function () {
        return unsetRef(props.id, key);
      };
    }

    return;
  }, [context, props]);
}
function useNodeRect() {
  var context = React.useContext(NodeRefContext);

  var _useBoundingCanvasRec = useBoundingCanvasRect(),
      getBoundingCanvasRect = _useBoundingCanvasRec.getBoundingCanvasRect;

  var getRect = React.useCallback(function (id) {
    if (!context) {
      return null;
    }

    var nodes = context.nodes;
    var node = nodes.current[id];
    var element = node ? node.ref.current : undefined;

    if (element) {
      var dimensions = getBoundingCanvasRect(element);

      if (dimensions.height === 0 && node.parentId) {
        return getRect(node.parentId);
      }

      var boundaryRect;

      if (node.boundaryId && (boundaryRect = getRect(node.boundaryId))) {
        var overrideWidthRect = node.overrideWidth ? getRect(node.overrideWidth) : undefined;
        var overrideHeightRect = node.overrideHeight ? getRect(node.overrideHeight) : undefined;
        var width = (overrideWidthRect === null || overrideWidthRect === void 0 ? void 0 : overrideWidthRect.width) || dimensions.width;
        var height = (overrideHeightRect === null || overrideHeightRect === void 0 ? void 0 : overrideHeightRect.height) || dimensions.height;
        var x = Math.min(Math.max((overrideWidthRect === null || overrideWidthRect === void 0 ? void 0 : overrideWidthRect.left) || dimensions.left, boundaryRect.left), boundaryRect.width + boundaryRect.left - dimensions.width);
        var isXClipped = x !== ((overrideWidthRect === null || overrideWidthRect === void 0 ? void 0 : overrideWidthRect.x) || dimensions.x);
        var y = Math.min(Math.max((overrideHeightRect === null || overrideHeightRect === void 0 ? void 0 : overrideHeightRect.top) || dimensions.top + dimensions.height / 2, boundaryRect.top), boundaryRect.height + boundaryRect.top);
        var isYClipped = y === boundaryRect.top || y === boundaryRect.height + boundaryRect.top;
        return {
          width: width,
          height: height,
          x: x,
          y: y,
          left: x,
          top: y,
          right: x + width,
          bottom: y + height,
          toJSON: function toJSON() {
            return '';
          },
          clipped: isXClipped || isYClipped
        };
      }

      return dimensions;
    }

    return null;
  }, [context, getBoundingCanvasRect]);
  return getRect;
}

var NodeRef = /*#__PURE__*/React.forwardRef(function NodeRef(_ref, ref) {
  var children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, ["children"]);

  var node = React.Children.only(children);
  var nodeRef = React.useRef(null);
  useNodeRef(_extends({}, props, {
    ref: nodeRef
  }));

  var handleRef = function handleRef(el) {
    if (ref) {
      // @ts-ignore
      // by default forwardedRef.current is readonly. Let's ignore it
      ref.current = el;
    }

    nodeRef.current = el;
  };

  return React.isValidElement(node) ? React.cloneElement(node, {
    ref: handleRef
  }) : null;
});

function leftCoords(rect) {
  var left = rect.left,
      y = rect.y;
  return {
    x: left,
    y: y
  };
}

function rightCoords(rect) {
  var right = rect.right,
      y = rect.y;
  return {
    x: right,
    y: y
  };
}

function topCoords(rect) {
  var x = rect.x,
      top = rect.top;
  return {
    x: x,
    y: top
  };
}

function bottomCoords(rect) {
  var x = rect.x,
      bottom = rect.bottom;
  return {
    x: x,
    y: bottom
  };
}

var NodesArc = function NodesArc(_ref) {
  var startId = _ref.start,
      endId = _ref.end,
      color = _ref.color,
      props = _objectWithoutPropertiesLoose(_ref, ["start", "end", "color"]);

  var _useCanvas = useCanvas(),
      addRedrawListener = _useCanvas.addRedrawListener,
      removeRedrawListener = _useCanvas.removeRedrawListener;

  var getRect = useNodeRect();

  var _useState = React.useState(null),
      coords = _useState[0],
      setCoords = _useState[1];

  var _useState2 = React.useState('horizontal'),
      linkType = _useState2[0],
      setLinkType = _useState2[1];

  var calculateCoords = React.useCallback(function calculateCoordsCb() {
    var startRect = getRect(startId);
    var endRect = getRect(endId);

    if (startRect && endRect) {
      var _ref2 = startRect.width < endRect.width ? [startRect, endRect] : [endRect, startRect],
          smallRect = _ref2[0],
          bigRect = _ref2[1];

      var sameVerticalSpace = smallRect.left > bigRect.left && smallRect.left < bigRect.right || smallRect.right < bigRect.right && smallRect.right > bigRect.left;

      if (sameVerticalSpace) {
        var _ref3 = startRect.top > endRect.top ? [startId, endId] : [endId, startId],
            aboveId = _ref3[0],
            bottomId = _ref3[1];

        var start = getRect(aboveId);
        var end = getRect(bottomId);

        if (start && end) {
          setCoords({
            start: topCoords(start),
            end: bottomCoords(end),
            startSideSize: start.clipped ? 0 : start.width,
            endSideSize: end.clipped ? 0 : end.width
          });
          setLinkType('vertical');
        } else {
          setCoords(null);
        }
      } else {
        var _ref4 = startRect.left > endRect.left ? [startId, endId] : [endId, startId],
            leftId = _ref4[0],
            rightId = _ref4[1];

        var _start = getRect(leftId);

        var _end = getRect(rightId);

        if (_start && _end) {
          setCoords({
            start: leftCoords(_start),
            end: rightCoords(_end),
            startSideSize: _start.clipped ? 0 : _start.height,
            endSideSize: _end.clipped ? 0 : _end.height
          });
          setLinkType('horizontal');
        } else {
          setCoords(null);
        }
      }
    } else {
      setCoords(null);
    }
  }, [endId, startId, getRect]);
  React.useEffect(function onNodeArcRedrawCb() {
    addRedrawListener(calculateCoords);
    return function () {
      removeRedrawListener(calculateCoords);
    };
  }, [addRedrawListener, removeRedrawListener, calculateCoords]);
  return coords ? React__default.createElement(Arc, Object.assign({
    start: coords.start,
    end: coords.end,
    type: linkType,
    startSideSize: coords.startSideSize,
    endSideSize: coords.endSideSize,
    color: color || ((coords.startSideSize && coords.endSideSize) === 0 ? 'var(--pf-global--Color--light-300)' : 'var(--pf-global--Color--dark-200)')
  }, props)) : null;
};

var styles$3 = {"column":"Column-module_column__1sNi2","hidden":"Column-module_hidden__rsQTt"};

var Column = function Column(_ref) {
  var _ref$totalColumns = _ref.totalColumns,
      totalColumns = _ref$totalColumns === void 0 ? 1 : _ref$totalColumns,
      _ref$visible = _ref.visible,
      visible = _ref$visible === void 0 ? true : _ref$visible,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, ["totalColumns", "visible", "children"]);

  var style = React.useMemo(function () {
    return {
      flex: "0 0 " + 100 / totalColumns + "%"
    };
  }, [totalColumns]);
  return React__default.createElement("div", Object.assign({
    className: reactStyles.css(styles$3.column, !visible && styles$3.hidden),
    style: style
  }, props), children);
};

var styles$4 = {"body":"ColumnBody-module_body__2hALu"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var ColumnBody = /*#__PURE__*/React.forwardRef(function ColumnBody(_ref, ref) {
  var children = _ref.children;
  return React__default.createElement("div", {
    className: styles$4.body,
    ref: ref
  }, children);
});

var styles$5 = {"toolbar":"Actions-module_toolbar__TsQ-9","toolbarItem":"Actions-module_toolbarItem__3_5IA"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var Actions = function Actions(_ref) {
  var children = _ref.children;
  return React__default.createElement("div", {
    className: styles$5.toolbar
  }, React.Children.map(children, function (c, idx) {
    return React__default.createElement("div", {
      className: styles$5.toolbarItem,
      key: idx
    }, c);
  }));
};

var styles$6 = {"header":"ColumnHeader-module_header__V1RS7","plain":"ColumnHeader-module_plain__2oPqT","toolbar":"ColumnHeader-module_toolbar__30am1","title":"ColumnHeader-module_title__2ysEf"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var ColumnHeader = function ColumnHeader(_ref) {
  var title = _ref.title,
      actions = _ref.actions,
      variant = _ref.variant,
      children = _ref.children;
  return React__default.createElement("div", {
    className: styles$6.header
  }, React__default.createElement("div", {
    className: reactStyles.css(styles$6.toolbar, variant === 'plain' && styles$6.plain)
  }, React__default.createElement("div", {
    className: styles$6.title
  }, React__default.createElement(reactCore.Title, {
    headingLevel: "h2",
    size: "lg"
  }, title)), React__default.createElement(Actions, null, actions === null || actions === void 0 ? void 0 : actions.filter(function (a) {
    return a;
  }))), children);
};

var styles$7 = {"canvas":"ColumnMapper-module_canvas__MPzdp"};

var ColumnMapper = function ColumnMapper(_ref) {
  var className = _ref.className,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "children"]);

  return React__default.createElement(Canvas, Object.assign({}, props, {
    className: reactStyles.css(styles$7.canvas, className)
  }), children);
};

var styles$8 = {"wrapper":"Columns-module_wrapper__3eMnz"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var Columns = function Columns(_ref) {
  var children = _ref.children;

  var _useCanvas = useCanvas(),
      _useCanvas$dimensions = _useCanvas.dimensions,
      width = _useCanvas$dimensions.width,
      height = _useCanvas$dimensions.height;

  return React__default.createElement(HTMLObject, {
    width: width,
    height: height,
    x: 0,
    y: 0
  }, React__default.createElement("div", {
    className: styles$8.wrapper
  }, children));
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var SearchableColumnHeader = function SearchableColumnHeader(_ref) {
  var title = _ref.title,
      _ref$actions = _ref.actions,
      actions = _ref$actions === void 0 ? [] : _ref$actions,
      onSearch = _ref.onSearch;
  var searchRef = React.useRef(null);

  var onSearchSubmit = function onSearchSubmit(event) {
    if (searchRef.current) {
      onSearch(searchRef.current.value);
    }

    event.preventDefault();
    return false;
  };

  return React__default.createElement(ColumnHeader, {
    title: title,
    actions: [React__default.createElement("form", {
      onSubmit: onSearchSubmit,
      key: "search-form"
    }, React__default.createElement(reactCore.InputGroup, null, React__default.createElement(reactCore.TextInput, {
      name: 'search',
      id: "search-" + title,
      type: "search",
      "aria-label": "Search fields",
      onChange: onSearch,
      ref: searchRef,
      "data-testid": "search-" + title + "-fields-input-field"
    }), React__default.createElement(reactCore.Button, {
      type: 'submit',
      "aria-label": "Search",
      "data-testid": "run-search-" + title + "-button",
      variant: 'control'
    }, React__default.createElement(reactIcons.SearchIcon, null))))].concat(actions)
  });
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var probablyTouch = window.matchMedia && ( /*#__PURE__*/window.matchMedia('(pointer: none)').matches || /*#__PURE__*/window.matchMedia('(pointer: coarse)').matches) && /*#__PURE__*/window.matchMedia('(hover: none)').matches;

var TouchAndPointerProvider = function TouchAndPointerProvider(_ref) {
  var children = _ref.children;
  return React__default.createElement(reactDnd.DndProvider, {
    backend: reactDndTouchBackend.TouchBackend,
    options: {
      enableMouseEvents: true
    }
  }, children);
};

var MouseOnlyProvider = function MouseOnlyProvider(_ref2) {
  var children = _ref2.children;
  return React__default.createElement(reactDnd.DndProvider, {
    backend: reactDndHtml5Backend.HTML5Backend
  }, children);
};

var FieldsDndContext = /*#__PURE__*/React.createContext(null);
var FieldsDndProvider = function FieldsDndProvider(_ref3) {
  var children = _ref3.children;
  var hoveredTarget = React.useRef(null);

  var getHoveredTarget = function getHoveredTarget() {
    return hoveredTarget.current;
  };

  var setHoveredTarget = function setHoveredTarget(target) {
    return hoveredTarget.current = target;
  };

  var Provider = probablyTouch ? TouchAndPointerProvider : MouseOnlyProvider;
  return React__default.createElement(Provider, null, React__default.createElement(FieldsDndContext.Provider, {
    value: {
      getHoveredTarget: getHoveredTarget,
      setHoveredTarget: setHoveredTarget
    }
  }, children));
};
function useFieldsDnd() {
  var context = React.useContext(FieldsDndContext);

  if (!context) {
    throw new Error('A FieldsDndProvider wrapper is required to use this hook.');
  }

  return context;
}

var DraggedField = function DraggedField(_ref) {
  var children = _ref.children;

  var _useFieldsDnd = useFieldsDnd(),
      getHoveredTarget = _useFieldsDnd.getHoveredTarget;

  var _useDragLayer = reactDnd.useDragLayer(function (monitor) {
    return {
      draggedField: monitor.getItem(),
      currentOffset: monitor.getClientOffset(),
      isDragging: monitor.isDragging()
    };
  }),
      isDragging = _useDragLayer.isDragging,
      draggedField = _useDragLayer.draggedField,
      currentOffset = _useDragLayer.currentOffset;

  return children({
    isDragging: isDragging,
    currentOffset: currentOffset,
    draggedField: draggedField,
    getHoveredTarget: getHoveredTarget
  });
};

var DraggableField = /*#__PURE__*/React.forwardRef(function DraggableField(_ref, ref) {
  var field = _ref.field,
      onDrop = _ref.onDrop,
      _ref$as = _ref.as,
      As = _ref$as === void 0 ? 'div' : _ref$as,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, ["field", "onDrop", "as", "children"]);

  var _useDrag = reactDnd.useDrag({
    type: field.type,
    item: field,
    collect: function collect(monitor) {
      return {
        isDragging: monitor.isDragging()
      };
    },
    end: function end(_, monitor) {
      if (monitor.didDrop()) {
        onDrop(field, monitor.getDropResult());
      }
    }
  }),
      isDragging = _useDrag[0].isDragging,
      dragRef = _useDrag[1],
      preview = _useDrag[2];

  React.useEffect(function () {
    preview(reactDndHtml5Backend.getEmptyImage(), {
      captureDraggingState: true
    });
  }, [preview]);

  var handleRef = function handleRef(el) {
    if (ref) {
      // @ts-ignore
      // by default forwardedRef.current is readonly. Let's ignore it
      ref.current = el;
    }

    dragRef(el);
  };

  return React__default.createElement(As, Object.assign({
    ref: handleRef
  }, props), children({
    isDragging: isDragging
  }));
});

var FieldDropTarget = /*#__PURE__*/React.forwardRef(function FieldDropTarget(_ref, ref) {
  var accept = _ref.accept,
      target = _ref.target,
      _canDrop = _ref.canDrop,
      _ref$as = _ref.as,
      As = _ref$as === void 0 ? 'div' : _ref$as,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, ["accept", "target", "canDrop", "as", "children"]);

  var _useFieldsDnd = useFieldsDnd(),
      setHoveredTarget = _useFieldsDnd.setHoveredTarget;

  var _useDrop = reactDnd.useDrop({
    accept: accept,
    collect: function collect(monitor) {
      return {
        isOver: monitor.isOver(),
        isDroppable: monitor.canDrop(),
        isTarget: monitor.isOver() && monitor.canDrop(),
        field: monitor.getItem()
      };
    },
    canDrop: function canDrop(_, monitor) {
      return _canDrop(monitor.getItem());
    },
    drop: function drop() {
      return target;
    }
  }),
      _useDrop$ = _useDrop[0],
      isOver = _useDrop$.isOver,
      isDroppable = _useDrop$.isDroppable,
      isTarget = _useDrop$.isTarget,
      field = _useDrop$.field,
      dropRef = _useDrop[1];

  var handleRef = function handleRef(el) {
    if (ref) {
      // @ts-ignore
      // by default forwardedRef.current is readonly. Let's ignore it
      ref.current = el;
    }

    dropRef(el);
  };

  var wasOver = React.useRef(false);
  var wasTarget = React.useRef(false);
  React.useEffect(function () {
    if (isOver !== wasOver.current || isTarget !== wasTarget.current) {
      if (isTarget) {
        setHoveredTarget(target);
      } else if (!isOver) {
        setHoveredTarget(null);
      }

      wasOver.current = isOver;
      wasTarget.current = isTarget;
    }
  }, [isOver, isTarget, setHoveredTarget, target]);
  return React__default.createElement(As, Object.assign({
    ref: handleRef
  }, props), children({
    isDroppable: isDroppable,
    isOver: isOver,
    isTarget: isTarget,
    field: field
  }));
});

var styles$9 = {"canvasObject":"FieldDragLayer-module_canvasObject__2cI4m","canvasInner":"FieldDragLayer-module_canvasInner__3HxGR"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var FieldDragLayer = function FieldDragLayer() {
  var _useDimensions = useDimensions(),
      ref = _useDimensions[0],
      dimensions = _useDimensions[1],
      measure = _useDimensions[2];

  React.useEffect(measure);
  return React__default.createElement(DraggedField, null, function (_ref) {
    var isDragging = _ref.isDragging,
        currentOffset = _ref.currentOffset,
        draggedField = _ref.draggedField;
    return isDragging && currentOffset && draggedField ? React__default.createElement("div", {
      style: {
        position: 'absolute',
        zIndex: 1000,
        width: dimensions.width,
        height: dimensions.height,
        left: currentOffset.x - dimensions.width / 2,
        top: currentOffset.y - dimensions.height
      },
      className: styles$9.canvasObject
    }, React__default.createElement("div", {
      ref: ref,
      className: styles$9.canvasInner
    }, React__default.createElement(reactCore.Label, null, draggedField.name))) : null;
  });
};

var styles$a = {"document":"AddFieldTypeahead-module_document__wyGH7","select":"AddFieldTypeahead-module_select__2irTI","pf-c-select__menu":"AddFieldTypeahead-module_pf-c-select__menu__1WcFo","field":"AddFieldTypeahead-module_field__H5L5M"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var AddFieldTypeahead = function AddFieldTypeahead(_ref) {
  var fields = _ref.fields,
      ariaLabelTypeAhead = _ref.ariaLabelTypeAhead,
      placeholderText = _ref.placeholderText,
      isSource = _ref.isSource;

  var renderOptions = function renderOptions(fields, placeholderField) {
    fields.unshift(placeholderField);
    var groups = fields.reduce(function (groups, f) {
      var optValue = f.group + '\\' + f.label;
      groups[f.group] = [].concat(groups[f.group] || [], [React__default.createElement(reactCore.FormSelectOption, {
        isPlaceholder: f.group.length === 0,
        isDisabled: false,
        label: f.label,
        key: optValue + (isSource ? '-source' : '-target') + fields.indexOf(f),
        value: optValue,
        "data-testid": "add-field-option-" + optValue,
        className: styles$a.field
      }, f.label)]);
      return groups;
    }, {});
    return Object.entries(groups).map(function (_ref2) {
      var groupName = _ref2[0],
          elements = _ref2[1];
      return React__default.createElement(reactCore.FormSelectOptionGroup, {
        label: groupName,
        key: groupName
      }, elements);
    });
  };

  var onChange = React.useCallback(function (value, _e) {
    var valueComps = value.split('\\');
    var selField = fields.find(function (f) {
      return f.label === valueComps[1] && f.group === valueComps[0];
    });

    if (selField) {
      selField.onAdd();
    }
  }, [fields]);
  var placeholderField = {
    label: placeholderText,
    group: '',
    onAdd: function onAdd() {
      return void {};
    }
  };
  return React__default.createElement("div", null, React__default.createElement(reactCore.FormSelect, {
    "aria-label": ariaLabelTypeAhead,
    className: styles$a.select,
    "data-testid": 'mapping-details-add-field',
    id: ariaLabelTypeAhead,
    onChange: onChange,
    placeholder: placeholderText
  }, renderOptions(fields, placeholderField)));
};

var AutoDropdown = function AutoDropdown(_ref) {
  var toggle = _ref.toggle,
      props = _objectWithoutPropertiesLoose(_ref, ["toggle"]);

  var _useToggle = useToggle(false),
      isOpen = _useToggle.state,
      toggleOpen = _useToggle.toggle;

  return React__default.createElement(reactCore.Dropdown, Object.assign({}, props, {
    isOpen: isOpen,
    onSelect: toggleOpen,
    toggle: toggle({
      isOpen: isOpen,
      toggleOpen: toggleOpen
    })
  }));
};

var styles$b = {"document":"ExpressionEnumSelect-module_document__20xcs","field":"ExpressionEnumSelect-module_field__iFvbJ","enumSelectMenu":"ExpressionEnumSelect-module_enumSelectMenu__2TnTt"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var selectValue = '';
var ExpressionEnumSelect = function ExpressionEnumSelect(_ref) {
  var selectedNodeId = _ref.selectedNodeId,
      enumCandidates = _ref.enumCandidates,
      clearEnumSelect = _ref.clearEnumSelect,
      onEnumSelect = _ref.onEnumSelect;
  var id = "expr-enum-select-" + selectValue;

  var _useToggle = useToggle(true, onToggleEnumSelect),
      state = _useToggle.state,
      toggle = _useToggle.toggle,
      toggleOff = _useToggle.toggleOff;

  function onToggleEnumSelect(toggled) {
    if (!toggled) {
      enumCandidates = [];
      clearEnumSelect();
    }
  }

  function selectionChanged(event, value, _isPlaceholder) {
    selectValue = value;
    onEnumSelect(selectedNodeId, event.currentTarget.id.split('-').pop());
    onToggleEnumSelect(false);
    toggleOff();
  }

  function createSelectOption(selectField, idx) {
    if (selectField[1].length === 0) {
      return React__default.createElement(reactCore.SelectOption, {
        isDisabled: true,
        label: selectField,
        value: selectField,
        key: idx,
        className: styles$b.document
      });
    } else {
      return React__default.createElement(reactCore.SelectOption, {
        label: selectField,
        value: selectField,
        key: idx,
        className: styles$b.field
      });
    }
  }

  return React__default.createElement("div", {
    "aria-label": "Expression Enumeration",
    className: "enumSelectMenu",
    "data-testid": 'expression-enumeration-select'
  }, React__default.createElement(reactCore.Select, {
    onToggle: toggle,
    isOpen: state,
    value: selectValue,
    id: id,
    onSelect: selectionChanged,
    "data-testid": id
  }, enumCandidates.map(function (s, idx) {
    return createSelectOption(s.name, idx);
  })));
};

var styles$c = {"document":"ExpressionFieldSearch-module_document__LXQJd","field":"ExpressionFieldSearch-module_field__2pam4","searchMenu":"ExpressionFieldSearch-module_searchMenu__ZA0PV"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var selectedField = '';
var ExpressionFieldSearch = function ExpressionFieldSearch(_ref) {
  var clearSearchMode = _ref.clearSearchMode,
      insertSelectedField = _ref.insertSelectedField,
      mappedFieldCandidates = _ref.mappedFieldCandidates;

  function onToggleFieldSearch(toggled) {
    if (!toggled) {
      mappedFieldCandidates = [];
      clearSearchMode(true);
      candidateSrcElement = null;
    }
  }

  var id = "expr-field-search-" + selectedField;
  var candidateSrcElement;

  var _useToggle = useToggle(true, onToggleFieldSearch),
      state = _useToggle.state,
      toggle = _useToggle.toggle,
      toggleOff = _useToggle.toggleOff;
  /**
   * Track a candidate selection from either a mouse hover or arrow
   * key navigation.
   *
   * @param event
   * @param index
   */


  function trackSelection(event) {
    if (event.srcElement) {
      // const docId = event.target.getAttribute('label');
      candidateSrcElement = event.srcElement;
    }
  }
  /**
   * Update the candidate source element and reset the focus.
   *
   * @param sibling
   */


  function updateCandidate(sibling) {
    if (candidateSrcElement && sibling) {
      candidateSrcElement.style.backgroundColor = 'white';
      sibling.focus();
      candidateSrcElement = sibling;
      candidateSrcElement.style.backgroundColor = 'lightblue';
    }
  }

  function onKeyHandler(_index, _innerIndex, _position) {// TODO
  }

  function onKeyDown(event) {
    if ('Enter' === event.key) {
      event.preventDefault();
    } else if ('ArrowDown' === event.key) {
      event.preventDefault();
      trackSelection(event);

      if (candidateSrcElement) {
        updateCandidate(candidateSrcElement.nextElementSibling);
      }
    } else if ('ArrowUp' === event.key) {
      event.preventDefault();
      trackSelection(event);

      if (candidateSrcElement) {
        updateCandidate(candidateSrcElement.previousElementSibling);
      }
    } else if ('Tab' === event.key) {
      if (!candidateSrcElement && event.srcElement) {
        candidateSrcElement = event.srcElement.nextElementSibling.firstElementChild;
        candidateSrcElement.style.backgroundColor = 'lightblue';
      } else if (candidateSrcElement && candidateSrcElement.nextElementSibling) {
        event.preventDefault();
        updateCandidate(candidateSrcElement.nextElementSibling);
      }
    }
  }

  function selectionChanged(event, value, isPlaceholder) {
    if (!isPlaceholder) {
      var docId = event.target.getAttribute('label');
      selectedField = value;
      insertSelectedField(docId, selectedField);
    }

    onToggleFieldSearch(false);
    toggleOff();
  }

  function createSelectOption(selectField, idx) {
    // Use the display name for documents and field path for fields.
    if (selectField[1][0] !== '/') {
      return React__default.createElement(reactCore.SelectOption, {
        label: selectField[0],
        value: selectField[0],
        key: idx,
        index: idx,
        className: styles$c.document,
        isPlaceholder: true
      });
    } else {
      return React__default.createElement(reactCore.SelectOption, {
        label: selectField[0],
        value: selectField[1],
        key: idx,
        keyHandler: onKeyHandler,
        index: idx,
        className: styles$c.field
      });
    }
  }

  return React__default.createElement("div", {
    "aria-label": "Expression Field Search",
    className: styles$c.searchMenu,
    "data-testid": 'expression-field-search'
  }, React__default.createElement(reactCore.Select, {
    onToggle: toggle,
    isOpen: state,
    value: selectedField,
    id: id,
    onKeyDown: onKeyDown,
    onSelect: selectionChanged,
    "data-testid": id
  }, mappedFieldCandidates.map(function (s, idx) {
    return createSelectOption(s, idx);
  })));
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var atIndex = -1;
var atContainer;
var enumCandidates = [];
var expressionUpdatedSubscription;
var lastUpdatedEvent = null;
var mappedFieldCandidates = [];
var markup = null;
var searchFilter = '';
var searchMode = false;
var selectedNodeId = '';
var trailerHTML = '';
var trailerID = '';
var getMappingExpression$1;
var mappingExprInit;
var mappingExprObservable;

function updateExpressionMarkup(reset) {
  if (!markup) {
    return;
  }

  if (reset) {
    markup.innerHTML = trailerHTML;
  } else {
    var currentExpression = getMappingExpression$1();
    markup.innerHTML = currentExpression + trailerHTML;
  }
}

function moveCaretToEnd() {
  if (!markup || trailerID.length === 0) {
    return;
  }

  var trailerNode = markup.querySelector('#' + trailerID);

  if (!trailerNode) {
    return;
  }

  var range;

  if (window.getSelection().rangeCount > 0) {
    range = window.getSelection().getRangeAt(0);
  } else {
    range = document.createRange();
    window.getSelection().addRange(range);
  }

  range.selectNode(trailerNode.childNodes[0]);
  range.setStart(trailerNode.childNodes[0], 0);
  range.collapse(true);
}

function restoreCaretPosition(event) {
  if (!markup || !event || !event.node) {
    return;
  }

  for (var i = 0; i < markup.childNodes.length; i++) {
    var target = markup.childNodes[i];

    if (target.id === event.node.uuid) {
      var selection = window.getSelection();

      if (selection && selection.rangeCount) {
        var range = selection.getRangeAt(0);
        var actualNode = target.childNodes[0] ? target.childNodes[0] : target;
        range.selectNode(actualNode);

        if (event.offset <= actualNode.length) {
          range.setStart(actualNode, event.offset);
        }

        range.collapse(true);
      }

      return;
    }
  }

  moveCaretToEnd();
}

function initializeMappingExpression() {
  mappingExprInit();
  var mappingExprObs = mappingExprObservable();

  if (mappingExprObs) {
    expressionUpdatedSubscription = mappingExprObs.subscribe(function (updatedEvent) {
      lastUpdatedEvent = updatedEvent;
    });
  }

  updateExpressionMarkup();

  if (!lastUpdatedEvent) {
    moveCaretToEnd();
  } else {
    restoreCaretPosition(lastUpdatedEvent);
    lastUpdatedEvent = null;
  }
}
var ExpressionContent = function ExpressionContent(_ref) {
  var executeFieldSearch = _ref.executeFieldSearch,
      getFieldEnums = _ref.getFieldEnums,
      mappingExpressionAddField = _ref.mappingExpressionAddField,
      mappingExpressionClearText = _ref.mappingExpressionClearText,
      isMappingExpressionEmpty = _ref.isMappingExpressionEmpty,
      mappingExpressionInit = _ref.mappingExpressionInit,
      mappingExpressionInsertText = _ref.mappingExpressionInsertText,
      mappingExpressionObservable = _ref.mappingExpressionObservable,
      mappingExpressionRemoveField = _ref.mappingExpressionRemoveField,
      mappingExpression = _ref.mappingExpression,
      trailerId = _ref.trailerId,
      disabled = _ref.disabled,
      onToggle = _ref.onToggle,
      setSelectedEnumValue = _ref.setSelectedEnumValue;
  var addFieldToExpression;
  var clearText;
  var fieldSearch;
  var getEnums;
  var setSelEnumValue;

  var _useToggle = useToggle(false),
      showEnumSelect = _useToggle.state,
      toggleEnumSelOn = _useToggle.toggleOn,
      toggleEnumSelOff = _useToggle.toggleOff;
  /**
   * An enumeration value has been selected for the specified selected field node ID.
   *
   * @param selectedEnumNodeId - selected field node ID
   * @param selectedEnumValueIndex - selected enumeration index
   */


  function onEnumSelect(selectedEnumNodeId, selectedEnumValueIndex) {
    setSelEnumValue(selectedEnumNodeId, selectedEnumValueIndex);
    clearEnumSelect();
  }

  function insertTextAtCaretPosition(key) {
    var range = window.getSelection().getRangeAt(0);
    var startContainer = range.startContainer;
    var startOffset = range.startOffset; // On initial caret positioning before the first field node, the markup
    // and start container are the same.

    if (markup && startContainer === markup) {
      if (startOffset === 0) {
        var initialElement = startContainer.childNodes[0];
        mappingExpressionInsertText(key, initialElement.getAttribute('id'), 0);
      } else {
        mappingExpressionInsertText(key);
      }

      return;
    }

    var nodeId = getCaretPositionNodeId();

    if (nodeId === trailerID) {
      mappingExpressionInsertText(key);
    } else {
      mappingExpressionInsertText(key, nodeId, startOffset);
    }
  }

  function removeTokenAtCaretPosition(before) {
    var _selection$focusNode$;

    var selection = window.getSelection();
    var removeNext = false;

    if (!selection || !markup) {
      return;
    }

    if (!selection.rangeCount) {
      if (getCaretPositionNodeId() === trailerID) {
        if (before) {
          mappingExpressionRemoveField();
          moveCaretToEnd();
        }
      }

      return;
    } // The window selection node will be the text node if the cursor lies
    // at the boundary between the text node and a field node.  In that
    // case remove the next node.


    removeNext = !before && selection.focusNode && selection.focusNode.nodeType === selection.focusNode.TEXT_NODE && selection.focusOffset === ((_selection$focusNode$ = selection.focusNode.textContent) === null || _selection$focusNode$ === void 0 ? void 0 : _selection$focusNode$.length) ? true : false;
    var range = selection.getRangeAt(0);
    var startContainer = range.startContainer;
    var startOffset = range.startOffset;

    if (startContainer === markup) {
      if (startOffset === 0) {
        // head of expression
        if (!before && !isMappingExpressionEmpty) {
          mappingExpressionRemoveField(getCaretPositionNodeId(), 0);
        }

        return;
      } // end of expression


      if (before && !isMappingExpressionEmpty) {
        mappingExpressionRemoveField();
      }

      return;
    }

    if (getCaretPositionNodeId(startContainer) === trailerID) {
      if (before) {
        mappingExpressionRemoveField();
      }

      moveCaretToEnd();
      return;
    }

    mappingExpressionRemoveField(getCaretPositionNodeId(), before ? startOffset - 1 : startOffset, removeNext);

    if (getCaretPositionNodeId() === trailerID) {
      moveCaretToEnd();
    }
  }
  /**
   * Handle key down events.
   *
   * @param event - expression keyboard event
   */


  function onKeyDown(event) {
    if ('Backspace' === event.key) {
      // TODO handle cursor position
      event.preventDefault();
      removeTokenAtCaretPosition(true);

      if (searchMode) {
        updateSearchMode();
      }
    } else if ('Delete' === event.key) {
      event.preventDefault();
      removeTokenAtCaretPosition(false);

      if (searchMode) {
        updateSearchMode();
      }
    }
  }
  /**
   * A mouse click has occurred within the expression box.
   *
   * @param event - mouse event
   */


  function onExprClick(event) {
    selectedNodeId = getCaretPositionNodeId(); // Check for clicking on an enumeration field node.

    enumCandidates = getEnums(selectedNodeId);

    if (enumCandidates.length > 0) {
      event.preventDefault();
      toggleEnumSelOn();
    }
  }

  function onKeyPress(event) {
    if (event.ctrlKey || event.metaKey || event.altKey) {
      return;
    }

    if (event.key.length > 1) {
      return;
    }

    event.preventDefault();

    if (isMappingExpressionEmpty) {
      initializeMappingExpression();
    }

    if (searchMode) {
      if (event.key.match(/[a-z0-9]/i)) {
        searchFilter += event.key;
        mappedFieldCandidates = fieldSearch(searchFilter, true);
      }
    } else {
      searchMode = event.key === '@' ? true : false;

      if (searchMode) {
        atContainer = window.getSelection().getRangeAt(0).startContainer;
        atIndex = window.getSelection().getRangeAt(0).startOffset;
        searchFilter = '';
        mappedFieldCandidates = fieldSearch(searchFilter, true);
      }
    }

    insertTextAtCaretPosition(event.key);
  }

  function onChange(_event) {
    if (isMappingExpressionEmpty) {
      initMappingExpression();
    }

    if (expressionUpdatedSubscription) {
      expressionUpdatedSubscription.unsubscribe();
    }

    expressionUpdatedSubscription = mappingExprObservable().subscribe(function (updatedEvent) {
      updateExpressionMarkup();
      restoreCaretPosition(updatedEvent);
    });
    updateExpressionMarkup();
  }

  function onPaste(event) {
    if (!event || !event.clipboardData) {
      return;
    }

    event.preventDefault();
    var pasted = event.clipboardData.getData('text/plain'); // TODO handle cursor position... for now just append to the end

    mappingExpressionInsertText(pasted);
  }
  /**
   * The user has selected a field from the search select menu.  Extract
   * the field name and the scope if it is present.
   *
   * @param selectedDocId
   * @param selectedField
   * @returns
   */


  function insertSelectedField(selectedDocId, selectedField) {
    var newTextNode = clearAtText(getCaretPositionNodeId(atContainer));

    if (newTextNode === null) {
      return;
    }

    var isTrailer = getCaretPositionNodeId(atContainer) === trailerID;
    addFieldToExpression(selectedDocId, selectedField, newTextNode, atIndex, isTrailer);
    clearSearchMode(false);
    markup.focus();
  }
  /**
   * Clear user input from the selected range offset within the TextNode at
   * the specified node ID.  The input will become a FieldNode so we don't
   * need the text.  Return the new UUID position indicator.
   */


  function clearAtText(nodeId) {
    if (atIndex === -1) {
      return null;
    }

    var startOffset = atIndex;
    var endOffset = startOffset + searchFilter.length + 1;
    var updatedTextNode = null;

    if (nodeId === trailerID) {
      updatedTextNode = clearText();
    } else {
      updatedTextNode = clearText(nodeId, startOffset, endOffset);
    }

    return updatedTextNode;
  }
  /**
   * Return the UUID string representing the caret position as defined
   * by the user-specified starting container.  If no container is
   * specified then return the current caret position node ID value.
   *
   * @param startContainer
   */


  function getCaretPositionNodeId(startContainer) {
    var _selection$focusNode;

    var selection = window.getSelection();

    if (!startContainer) {
      if (!selection || selection.rangeCount === 0) {
        return trailerID;
      }

      startContainer = selection.getRangeAt(0).startContainer;
    }

    if (startContainer.nodeType === (selection === null || selection === void 0 ? void 0 : (_selection$focusNode = selection.focusNode) === null || _selection$focusNode === void 0 ? void 0 : _selection$focusNode.TEXT_NODE)) {
      return startContainer.parentElement.getAttribute('id');
    } else {
      var _startContainer$first;

      return (_startContainer$first = startContainer.firstChild) === null || _startContainer$first === void 0 ? void 0 : _startContainer$first.getAttribute('id');
    }
  }
  /**
   * Clear elements associated with mapped-field searching.
   */


  function clearSearchMode(clearAtSign) {
    if (clearAtSign) {
      clearAtText(getCaretPositionNodeId(atContainer));
    }

    atIndex = -1;
    atContainer = undefined;
    searchMode = false;
    searchFilter = '';
    mappedFieldCandidates = [];
  }

  function updateSearchMode() {
    if (searchFilter.length === 0) {
      mappedFieldCandidates = [];
      searchMode = false;
    } else {
      searchFilter = searchFilter.substr(0, searchFilter.length - 1);
      mappedFieldCandidates = fieldSearch(searchFilter, true);
    }
  }

  function clearEnumSelect() {
    selectedNodeId = '';
    enumCandidates = [];
    toggleEnumSelOff();
  }

  var initMappingExpression = React.useCallback(function () {
    initializeMappingExpression();
  }, []);
  addFieldToExpression = mappingExpressionAddField;
  clearText = mappingExpressionClearText;
  fieldSearch = executeFieldSearch;
  getEnums = getFieldEnums;
  setSelEnumValue = setSelectedEnumValue;

  getMappingExpression$1 = function getMappingExpression() {
    return mappingExpression || '';
  };

  mappingExprInit = mappingExpressionInit;
  mappingExprObservable = mappingExpressionObservable;
  trailerID = trailerId;
  trailerHTML = "<span id=\"" + trailerID + "\">&nbsp;</span>";

  var uninitializeMappingExpression = function uninitializeMappingExpression() {
    if (expressionUpdatedSubscription) {
      expressionUpdatedSubscription.unsubscribe();
    }
  };

  React.useEffect(function () {
    if (mappingExpression !== undefined) {
      initMappingExpression();
      return function () {
        return uninitializeMappingExpression();
      };
    }

    return;
  }, [mappingExpression, initMappingExpression]);
  return React__default.createElement(React__default.Fragment, null, React__default.createElement(reactCore.Form, null, React__default.createElement(reactCore.FormGroup, {
    fieldId: "expressionContent"
  }, React__default.createElement(reactCore.InputGroup, null, React__default.createElement(reactCore.Tooltip, {
    content: 'Enable/ Disable conditional mapping expression.',
    enableFlip: true,
    entryDelay: 750,
    exitDelay: 100,
    position: 'left'
  }, React__default.createElement(reactCore.Button, {
    variant: 'control',
    "aria-label": "Enable/ Disable conditional mapping expression",
    tabIndex: -1,
    onClick: onToggle,
    "data-testid": 'enable-disable-conditional-mapping-expression-button',
    isDisabled: disabled
  }, React__default.createElement("i", null, "f", React__default.createElement("small", {
    style: {
      position: 'relative',
      bottom: -3
    }
  }, "(x)")))), !disabled && mappingExpression !== undefined ? React__default.createElement(reactCore.Tooltip, {
    content: "Enter text or '@' for source fields menu.",
    enableFlip: true,
    entryDelay: 750,
    exitDelay: 100,
    position: 'left'
  }, React__default.createElement("div", {
    id: "expressionMarkup",
    key: "expressionMarkup-div",
    "aria-label": "Expression Content",
    contentEditable: true,
    className: reactStyles.css(styles$B.formControl, 'ExpressionFieldSearch'),
    suppressContentEditableWarning: true,
    onChange: onChange,
    onKeyDown: onKeyDown,
    onKeyPress: onKeyPress,
    onPaste: onPaste,
    onClick: onExprClick,
    ref: function ref(el) {
      return markup = el;
    },
    tabIndex: -1,
    style: {
      paddingLeft: 8
    }
  })) : React__default.createElement(reactCore.TextInput, {
    isDisabled: true,
    "aria-label": 'Expression content'
  })
  /* this to render a disabled field */
  ))), React__default.createElement("div", null, mappedFieldCandidates.length > 0 && React__default.createElement("span", null, React__default.createElement(ExpressionFieldSearch, {
    clearSearchMode: clearSearchMode,
    insertSelectedField: insertSelectedField,
    mappedFieldCandidates: mappedFieldCandidates
  })), showEnumSelect && React__default.createElement("span", null, React__default.createElement(ExpressionEnumSelect, {
    selectedNodeId: selectedNodeId,
    enumCandidates: enumCandidates,
    clearEnumSelect: clearEnumSelect,
    onEnumSelect: onEnumSelect
  }))));
};

var styles$d = {"toolbarItem":"ConditionalExpressionInput-module_toolbarItem__1SRmf"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var ConditionalExpressionInput = function ConditionalExpressionInput(_ref) {
  var executeFieldSearch = _ref.executeFieldSearch,
      getFieldEnums = _ref.getFieldEnums,
      mappingExpressionAddField = _ref.mappingExpressionAddField,
      mappingExpressionClearText = _ref.mappingExpressionClearText,
      isMappingExpressionEmpty = _ref.isMappingExpressionEmpty,
      mappingExpressionInit = _ref.mappingExpressionInit,
      mappingExpressionInsertText = _ref.mappingExpressionInsertText,
      mappingExpressionObservable = _ref.mappingExpressionObservable,
      mappingExpressionRemoveField = _ref.mappingExpressionRemoveField,
      mappingExpression = _ref.mappingExpression,
      trailerId = _ref.trailerId,
      disabled = _ref.disabled,
      onToggle = _ref.onToggle,
      setSelectedEnumValue = _ref.setSelectedEnumValue;
  return React__default.createElement(reactCore.ToolbarGroup, {
    variant: "filter-group",
    className: styles$d.toolbarItem,
    role: 'form'
  }, React__default.createElement(reactCore.ToolbarItem, {
    className: styles$d.toolbarItem
  }, React__default.createElement(ExpressionContent, {
    disabled: disabled,
    executeFieldSearch: executeFieldSearch,
    getFieldEnums: getFieldEnums,
    mappingExpressionAddField: mappingExpressionAddField,
    mappingExpressionClearText: mappingExpressionClearText,
    isMappingExpressionEmpty: isMappingExpressionEmpty,
    mappingExpressionInit: mappingExpressionInit,
    mappingExpressionInsertText: mappingExpressionInsertText,
    mappingExpressionObservable: mappingExpressionObservable,
    mappingExpressionRemoveField: mappingExpressionRemoveField,
    mappingExpression: mappingExpression,
    trailerId: trailerId,
    onToggle: onToggle,
    setSelectedEnumValue: setSelectedEnumValue
  })));
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var AboutDialog = function AboutDialog(_ref) {
  var title = _ref.title,
      onClose = _ref.onClose,
      isOpen = _ref.isOpen,
      uiVersion = _ref.uiVersion,
      runtimeVersion = _ref.runtimeVersion;
  return React__default.createElement(reactCore.Modal, {
    variant: "small",
    title: title,
    isOpen: isOpen,
    onClose: onClose,
    actions: [React__default.createElement(reactCore.Button, {
      key: 'close',
      variant: 'primary',
      onClick: onClose,
      "aria-label": "Close",
      "data-testid": 'about-dialog-close-button',
      isDisabled: !onClose
    }, "Close")]
  }, React__default.createElement("div", null, "UI Version: ", uiVersion), React__default.createElement("div", null, "Runtime Version: ", runtimeVersion));
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var ConfirmationDialog = function ConfirmationDialog(_ref) {
  var title = _ref.title,
      description = _ref.description,
      dataTestid = _ref.dataTestid,
      onCancel = _ref.onCancel,
      onConfirm = _ref.onConfirm,
      isOpen = _ref.isOpen,
      children = _ref.children;
  return React__default.createElement(reactCore.Modal, {
    variant: "small",
    title: title,
    description: description,
    "data-testid": dataTestid,
    isOpen: isOpen,
    onClose: onCancel,
    actions: [React__default.createElement(reactCore.Button, {
      key: 'confirm',
      variant: 'primary',
      onClick: onConfirm,
      "aria-label": "Confirm",
      "data-testid": 'confirmation-dialog-confirm-button',
      isDisabled: !onConfirm
    }, "Confirm"), React__default.createElement(reactCore.Button, {
      key: 'cancel',
      variant: 'link',
      onClick: onCancel,
      "aria-label": "Cancel",
      "data-testid": 'confirmation-dialog-cancel-button'
    }, "Cancel")]
  }, children);
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var ConstantDialog = function ConstantDialog(_ref) {
  var title = _ref.title,
      _ref$name = _ref.name,
      initialName = _ref$name === void 0 ? '' : _ref$name,
      _ref$value = _ref.value,
      initialValue = _ref$value === void 0 ? '' : _ref$value,
      _ref$valueType = _ref.valueType,
      initialValueType = _ref$valueType === void 0 ? '' : _ref$valueType,
      valueTypeOptions = _ref.valueTypeOptions,
      isOpen = _ref.isOpen,
      onCancel = _ref.onCancel,
      onConfirm = _ref.onConfirm,
      onValidation = _ref.onValidation;

  var _useState = React.useState(initialName),
      name = _useState[0],
      setName = _useState[1];

  var _useState2 = React.useState(initialValue),
      value = _useState2[0],
      setValue = _useState2[1];

  var _useState3 = React.useState(initialValueType),
      valueType = _useState3[0],
      setValueType = _useState3[1];

  var _useState4 = React.useState(true),
      isConstantNameUnique = _useState4[0],
      setConstantNameUnique = _useState4[1];

  var _useState5 = React.useState(false),
      isConstantValid = _useState5[0],
      setConstantValid = _useState5[1];

  var _useState6 = React.useState(reactCore.ValidatedOptions["default"]),
      isConstantNameValid = _useState6[0],
      setConstantNameValid = _useState6[1];

  var reset = React.useCallback(function () {
    setName(initialName);
    setValue(initialValue);
    setValueType(initialValueType);
    setConstantValid(false);
    setConstantNameValid(reactCore.ValidatedOptions["default"]);
    setConstantNameUnique(true);
  }, [initialName, initialValue, initialValueType]);
  var handleOnConfirm = React.useCallback(function () {
    onConfirm({
      name: name,
      value: value,
      valueType: valueType
    });
    reset();
  }, [onConfirm, reset, name, value, valueType]);
  var handleOnCancel = React.useCallback(function () {
    onCancel();
    reset();
  }, [onCancel, reset]);

  function handleOnNameChange(name) {
    validateConstant(name, value);
    setName(name);
  }

  function handleOnValueChange(value) {
    validateConstant(name, value);
    setValue(value);
  }

  function validateConstant(name, value) {
    if (!name || name.length === 0) {
      setConstantNameValid(reactCore.ValidatedOptions["default"]);
      setConstantValid(false);
      return false;
    }

    var nameRegex = /^[a-zA-Z0-9_@-]+$/;

    if (!nameRegex.test(name)) {
      setConstantNameValid(reactCore.ValidatedOptions.error);
      return false;
    }

    setConstantNameValid(reactCore.ValidatedOptions.success);
    var isValid = onValidation(name, value);
    setConstantValid(value.length > 0 && isValid);
    setConstantNameUnique(isValid);
    return isValid;
  } // make sure to resync the internal state to the values passed in as props


  React.useEffect(reset, [reset]);
  return React__default.createElement(ConfirmationDialog, {
    title: title,
    onCancel: handleOnCancel,
    onConfirm: isConstantValid ? handleOnConfirm : undefined,
    isOpen: isOpen
  }, React__default.createElement(reactCore.Form, null, React__default.createElement(reactCore.FormGroup, {
    label: 'Name',
    fieldId: 'name',
    isRequired: true
  }, !isConstantNameUnique ? React__default.createElement(reactCore.Tooltip, {
    content: React__default.createElement("div", null, "A constant with this name already exists"),
    entryDelay: 750,
    exitDelay: 100
  }, React__default.createElement(reactCore.TextInput, {
    value: name,
    onChange: handleOnNameChange,
    id: 'name',
    autoFocus: true,
    isRequired: true,
    "data-testid": 'constant-name-text-input-tooltip',
    style: {
      color: 'red'
    }
  })) : React__default.createElement(reactCore.TextInput, {
    value: name,
    onChange: handleOnNameChange,
    id: 'name',
    autoFocus: true,
    isRequired: true,
    "data-testid": 'constant-name-text-input',
    validated: isConstantNameValid
  })), React__default.createElement(reactCore.FormGroup, {
    label: 'Value',
    fieldId: 'constvalue',
    isRequired: true
  }, React__default.createElement(reactCore.TextInput, {
    value: value,
    onChange: handleOnValueChange,
    id: 'constvalue',
    autoFocus: true,
    isRequired: true,
    "data-testid": 'constant-value-text-input'
  })), React__default.createElement(reactCore.FormGroup, {
    label: 'Value type',
    fieldId: 'valueType'
  }, React__default.createElement(reactCore.FormSelect, {
    value: valueType,
    "aria-label": 'Select value type',
    onChange: setValueType,
    "data-testid": 'constant-type-form-select'
  }, valueTypeOptions.map(function (_ref2, idx) {
    var label = _ref2.label,
        value = _ref2.value;
    return React__default.createElement(reactCore.FormSelectOption, {
      key: idx,
      value: value,
      label: label
    });
  })))));
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var CustomClassDialog = function CustomClassDialog(_ref) {
  var title = _ref.title,
      _ref$customClassName = _ref.customClassName,
      initialCustomClassName = _ref$customClassName === void 0 ? '' : _ref$customClassName,
      customClassNames = _ref.customClassNames,
      _ref$collectionType = _ref.collectionType,
      initialCollectionType = _ref$collectionType === void 0 ? '' : _ref$collectionType,
      collectionTypeOptions = _ref.collectionTypeOptions,
      isOpen = _ref.isOpen,
      onCancel = _ref.onCancel,
      onConfirm = _ref.onConfirm;

  var _useState = React.useState(initialCustomClassName),
      customClassName = _useState[0],
      setCustomClassName = _useState[1];

  var _useState2 = React.useState(initialCollectionType),
      collectionType = _useState2[0],
      setCollectionType = _useState2[1];

  var reset = React.useCallback(function () {
    setCustomClassName(initialCustomClassName);
    setCollectionType(initialCollectionType);
  }, [initialCustomClassName, initialCollectionType]);
  var handleOnConfirm = React.useCallback(function () {
    onConfirm({
      customClassName: customClassName,
      collectionType: collectionType
    });
    reset();
  }, [onConfirm, reset, customClassName, collectionType]);
  var handleOnCancel = React.useCallback(function () {
    onCancel();
    reset();
  }, [onCancel, reset]); // make sure to resync the internal state to the values passed in as props

  React.useEffect(reset, [reset]);
  return React__default.createElement(ConfirmationDialog, {
    title: title,
    onCancel: handleOnCancel,
    onConfirm: customClassName.length > 0 ? handleOnConfirm : undefined,
    isOpen: isOpen
  }, React__default.createElement(reactCore.Form, null, React__default.createElement(reactCore.FormGroup, {
    label: 'Custom class name',
    fieldId: 'custom-class-name',
    isRequired: true
  }, React__default.createElement(reactCore.FormSelect, {
    value: customClassName,
    "aria-label": 'Select class name',
    autoFocus: true,
    onChange: setCustomClassName,
    "data-testid": 'custom-class-name-form-select'
  }, isOpen && customClassNames && customClassNames.map(function (value, idx) {
    return React__default.createElement(reactCore.FormSelectOption, {
      key: idx,
      value: value,
      label: value
    });
  }))), React__default.createElement(reactCore.FormGroup, {
    label: 'Collection type',
    fieldId: 'valueType'
  }, React__default.createElement(reactCore.FormSelect, {
    value: collectionType,
    "aria-label": 'Select value type',
    onChange: setCollectionType,
    "data-testid": 'collection-type-form-select'
  }, collectionTypeOptions.map(function (_ref2, idx) {
    var label = _ref2.label,
        value = _ref2.value;
    return React__default.createElement(reactCore.FormSelectOption, {
      key: idx,
      value: value,
      label: label
    });
  })))));
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var ChangeDocumentNameDialog = function ChangeDocumentNameDialog(_ref) {
  var id = _ref.id,
      _ref$name = _ref.name,
      initialName = _ref$name === void 0 ? '' : _ref$name,
      isSource = _ref.isSource,
      isOpen = _ref.isOpen,
      onCancel = _ref.onCancel,
      onConfirm = _ref.onConfirm;

  var _useState = React.useState(initialName),
      documentName = _useState[0],
      setDocumentName = _useState[1];

  var reset = React.useCallback(function () {
    setDocumentName(initialName);
  }, [initialName]);
  var handleOnConfirm = React.useCallback(function () {
    if (id && isSource !== undefined) {
      onConfirm({
        id: id,
        name: documentName,
        isSource: isSource
      });
    }

    reset();
  }, [documentName, id, isSource, onConfirm, reset]);
  var handleOnCancel = React.useCallback(function () {
    onCancel();
    reset();
  }, [onCancel, reset]);

  function handleOnNameChange(name) {
    setDocumentName(name);
  } // resync the internal state to the values passed in as props


  React.useEffect(reset, [reset]);
  return React__default.createElement(ConfirmationDialog, {
    title: 'Change selected document name?',
    onCancel: handleOnCancel,
    onConfirm: handleOnConfirm,
    isOpen: isOpen
  }, React__default.createElement(reactCore.TextInput, {
    value: documentName,
    onChange: function onChange(value) {
      return handleOnNameChange(value);
    },
    id: id,
    name: documentName,
    "data-testid": id + '-parameter-text-input'
  }));
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var ExportCatalogDialog = function ExportCatalogDialog(_ref) {
  var isOpen = _ref.isOpen,
      onCancel = _ref.onCancel,
      onConfirm = _ref.onConfirm;
  var defaultCatalogName = 'atlasmap-mapping';

  var _useState = React.useState(defaultCatalogName),
      filename = _useState[0],
      setFilename = _useState[1];

  var handleOnConfirm = filename.length > 0 ? function () {
    return onConfirm(filename);
  } : undefined;
  return React__default.createElement(ConfirmationDialog, {
    title: 'Export Mappings and Documents.',
    onCancel: onCancel,
    onConfirm: handleOnConfirm,
    isOpen: isOpen,
    dataTestid: 'export-catalog-dialog'
  }, React__default.createElement(reactCore.Form, null, React__default.createElement(reactCore.FormGroup, {
    label: 'Please enter a name for your exported catalog file',
    fieldId: 'filename',
    isRequired: true
  }, React__default.createElement(reactCore.InputGroup, null, React__default.createElement(reactCore.TextInput, {
    value: filename,
    onChange: setFilename,
    id: 'filename',
    isRequired: true,
    autoFocus: true,
    "data-testid": 'export-catalog-dialog-text-input'
  }), React__default.createElement(reactCore.InputGroupText, null, ".adm")))));
};

var styles$e = {"iGroup":"LookupTableDialog-module_iGroup__HpFO3","iSelectBody":"LookupTableDialog-module_iSelectBody__2sDE3","iSelectLabel":"LookupTableDialog-module_iSelectLabel__k9YCw"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var LookupTableDialog = function LookupTableDialog(_ref) {
  var enumerationValue = _ref.enumerationValue,
      sourceKey = _ref.sourceKey,
      isOpen = _ref.isOpen;

  var _useState = React.useState(enumerationValue.selectedTargetEnumValue),
      targetEnum = _useState[0],
      setTargetEnum = _useState[1];

  var onChangeTargetEnum = function onChangeTargetEnum(enumValue, _event) {
    setTargetEnum(enumValue);
    enumerationValue.selectedTargetEnumValue = enumValue;
  };

  return React__default.createElement(reactCore.Form, null, React__default.createElement(reactCore.FormGroup, {
    className: styles$e.iGroup,
    fieldId: 'lookup-table-row'
  }, React__default.createElement(reactCore.Label, {
    className: styles$e.iSelectLabel
  }, enumerationValue.sourceEnumValue), React__default.createElement(reactCore.FormSelect, {
    className: styles$e.iSelectBody,
    value: targetEnum,
    "aria-label": 'enum-map',
    autoFocus: true,
    onChange: onChangeTargetEnum,
    "data-testid": 'enum-map-select',
    key: targetEnum + "-" + sourceKey
  }, isOpen && enumerationValue.targetEnumValues && enumerationValue.targetEnumValues.map(function (value, idx) {
    return React__default.createElement(reactCore.FormSelectOption, {
      key: "tgtenum-" + idx,
      value: value,
      label: value
    });
  }))));
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var NamespaceDialog = function NamespaceDialog(_ref) {
  var title = _ref.title,
      _ref$alias = _ref.alias,
      initialAlias = _ref$alias === void 0 ? '' : _ref$alias,
      _ref$uri = _ref.uri,
      initialUri = _ref$uri === void 0 ? '' : _ref$uri,
      _ref$locationUri = _ref.locationUri,
      initialLocationUri = _ref$locationUri === void 0 ? '' : _ref$locationUri,
      _ref$targetNamespace = _ref.targetNamespace,
      initialTargetNamespace = _ref$targetNamespace === void 0 ? false : _ref$targetNamespace,
      isOpen = _ref.isOpen,
      onCancel = _ref.onCancel,
      onConfirm = _ref.onConfirm;

  var _useState = React.useState(initialAlias),
      alias = _useState[0],
      setAlias = _useState[1];

  var _useState2 = React.useState(initialUri),
      uri = _useState2[0],
      setUri = _useState2[1];

  var _useState3 = React.useState(initialLocationUri),
      locationUri = _useState3[0],
      setLocationUri = _useState3[1];

  var _useState4 = React.useState(initialTargetNamespace),
      targetNamespace = _useState4[0],
      setTargetNamespace = _useState4[1];

  var reset = React.useCallback(function () {
    setAlias(initialAlias);
    setUri(initialUri);
    setLocationUri(initialLocationUri);
    setTargetNamespace(initialTargetNamespace);
  }, [initialAlias, initialLocationUri, initialTargetNamespace, initialUri]);
  var handleOnConfirm = React.useCallback(function () {
    onConfirm({
      alias: alias,
      uri: uri,
      locationUri: locationUri,
      targetNamespace: targetNamespace
    });
    reset();
  }, [alias, locationUri, onConfirm, reset, targetNamespace, uri]);
  var handleOnCancel = React.useCallback(function () {
    onCancel();
    reset();
  }, [onCancel, reset]); // make sure to resync the internal state to the values passed in as props

  React.useEffect(reset, [reset]);
  return React__default.createElement(ConfirmationDialog, {
    title: title,
    onCancel: handleOnCancel,
    onConfirm: alias.length > 0 ? handleOnConfirm : undefined,
    isOpen: isOpen
  }, React__default.createElement(reactCore.Form, null, React__default.createElement(reactCore.FormGroup, {
    label: 'Alias',
    fieldId: 'alias',
    isRequired: true
  }, React__default.createElement(reactCore.TextInput, {
    value: alias,
    onChange: setAlias,
    id: 'alias',
    autoFocus: true,
    isRequired: true
  })), React__default.createElement(reactCore.FormGroup, {
    label: 'URI',
    fieldId: 'uri'
  }, React__default.createElement(reactCore.TextInput, {
    value: uri,
    onChange: setUri,
    id: 'uri'
  })), React__default.createElement(reactCore.FormGroup, {
    label: 'Location URI',
    fieldId: 'locationUri'
  }, React__default.createElement(reactCore.TextInput, {
    value: locationUri,
    onChange: setLocationUri,
    id: 'locationUri'
  })), React__default.createElement(reactCore.FormGroup, {
    fieldId: 'targetNamespace'
  }, React__default.createElement(reactCore.Checkbox, {
    isChecked: targetNamespace,
    onChange: setTargetNamespace,
    id: 'targetNamespace',
    label: 'Target namespace'
  }))));
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var PropertyDialog = function PropertyDialog(_ref) {
  var title = _ref.title,
      _ref$name = _ref.name,
      initialName = _ref$name === void 0 ? '' : _ref$name,
      _ref$valueType = _ref.valueType,
      initialValueType = _ref$valueType === void 0 ? '' : _ref$valueType,
      valueTypeOptions = _ref.valueTypeOptions,
      _ref$scope = _ref.scope,
      initialScope = _ref$scope === void 0 ? '' : _ref$scope,
      scopeOptions = _ref.scopeOptions,
      isOpen = _ref.isOpen,
      onCancel = _ref.onCancel,
      onConfirm = _ref.onConfirm,
      onValidation = _ref.onValidation;

  var _useState = React.useState(initialName),
      name = _useState[0],
      setName = _useState[1];

  var _useState2 = React.useState(initialValueType),
      valueType = _useState2[0],
      setValueType = _useState2[1];

  var _useState3 = React.useState(initialScope),
      scope = _useState3[0],
      setScope = _useState3[1];

  var _useState4 = React.useState(false),
      isPropertyValid = _useState4[0],
      setPropertyValid = _useState4[1];

  var _useState5 = React.useState(reactCore.ValidatedOptions["default"]),
      isPropertyNameValid = _useState5[0],
      setPropertyNameValid = _useState5[1];

  var _useState6 = React.useState(false),
      isNameAndScopeUnique = _useState6[0],
      setNameAndScopeUnique = _useState6[1];

  var reset = React.useCallback(function () {
    setName(initialName);
    setValueType(initialValueType);
    setScope(initialScope);
    setPropertyValid(false);
    setPropertyNameValid(reactCore.ValidatedOptions["default"]);
    setNameAndScopeUnique(false);
  }, [initialName, initialValueType, initialScope]);
  var handleOnConfirm = React.useCallback(function () {
    onConfirm({
      name: name,
      valueType: valueType,
      scope: scope
    });
    reset();
  }, [name, onConfirm, reset, valueType, scope]);
  var handleOnCancel = React.useCallback(function () {
    onCancel();
    reset();
  }, [onCancel, reset]);

  function handleOnNameChange(name) {
    validateProperty(name, scope);
    setName(name);
  }

  function handleOnScopeChange(scope) {
    if (validateProperty(name, scope)) {
      setScope(scope);
    }
  }

  function validateProperty(name, scope) {
    if (!name || name.length === 0) {
      setPropertyNameValid(reactCore.ValidatedOptions["default"]);
      setPropertyValid(false);
      return false;
    }

    var nameRegex = /^[a-zA-Z0-9_@]+$/;

    if (!nameRegex.test(name)) {
      setPropertyNameValid(reactCore.ValidatedOptions.error);
      return false;
    }

    setPropertyNameValid(reactCore.ValidatedOptions.success);
    var isValid = onValidation(name, scope);
    setNameAndScopeUnique(isValid);
    setPropertyValid(name.length > 0 && isValid);
    return isValid;
  } // make sure to resync the internal state to the values passed in as props


  React.useEffect(reset, [reset]);
  return React__default.createElement(ConfirmationDialog, {
    title: title,
    onCancel: handleOnCancel,
    onConfirm: isPropertyValid ? handleOnConfirm : undefined,
    isOpen: isOpen
  }, React__default.createElement(reactCore.Form, null, React__default.createElement(reactCore.FormGroup, {
    label: 'Name',
    fieldId: 'name',
    isRequired: true
  }, !isNameAndScopeUnique ? React__default.createElement(reactCore.Tooltip, {
    content: React__default.createElement("div", null, "A property with this name and scope already exists"),
    entryDelay: 750,
    exitDelay: 100
  }, React__default.createElement(reactCore.TextInput, {
    value: name,
    onChange: handleOnNameChange,
    id: 'name',
    autoFocus: true,
    isRequired: true,
    "data-testid": 'property-name-text-input-tooltip',
    style: {
      color: 'red'
    }
  })) : React__default.createElement(reactCore.TextInput, {
    value: name,
    onChange: handleOnNameChange,
    id: 'name',
    autoFocus: true,
    isRequired: true,
    "data-testid": 'property-name-text-input',
    validated: isPropertyNameValid
  })), React__default.createElement(reactCore.FormGroup, {
    label: 'Value type',
    fieldId: 'valueType'
  }, React__default.createElement(reactCore.FormSelect, {
    value: valueType,
    "aria-label": 'Select value type',
    onChange: setValueType,
    "data-testid": 'property-type-form-select'
  }, valueTypeOptions.map(function (_ref2, idx) {
    var label = _ref2.label,
        value = _ref2.value;
    return React__default.createElement(reactCore.FormSelectOption, {
      key: idx,
      value: value,
      label: label
    });
  }))), React__default.createElement(reactCore.FormGroup, {
    label: 'Scope',
    fieldId: 'scope'
  }, !isNameAndScopeUnique ? React__default.createElement(reactCore.Tooltip, {
    content: React__default.createElement("div", null, "A property with this name and scope already exists"),
    entryDelay: 750,
    exitDelay: 100
  }, React__default.createElement(reactCore.FormSelect, {
    value: scope,
    "aria-label": 'Select property scope',
    onChange: handleOnScopeChange,
    "data-testid": 'property-scope-form-select',
    style: {
      color: 'red'
    }
  }, scopeOptions.map(function (_ref3, idx) {
    var label = _ref3.label,
        value = _ref3.value;
    return React__default.createElement(reactCore.FormSelectOption, {
      key: idx,
      label: label,
      value: value
    });
  }))) : React__default.createElement(reactCore.FormSelect, {
    value: scope,
    "aria-label": 'Select property scope',
    onChange: handleOnScopeChange,
    "data-testid": 'property-scope-form-select'
  }, scopeOptions.map(function (_ref4, idx) {
    var label = _ref4.label,
        value = _ref4.value;
    return React__default.createElement(reactCore.FormSelectOption, {
      key: idx,
      label: label,
      value: value
    });
  })))));
};

var ParametersDialog = function ParametersDialog(_ref) {
  var title = _ref.title,
      _ref$parameters = _ref.parameters,
      initialParameters = _ref$parameters === void 0 ? [] : _ref$parameters,
      isOpen = _ref.isOpen,
      onCancel = _ref.onCancel,
      onConfirm = _ref.onConfirm;

  var _useState = React.useState([]),
      definedParameters = _useState[0],
      setDefinedParameters = _useState[1];

  var availableParameters = initialParameters.filter(function (param) {
    return !definedParameters.map(function (p) {
      return p.name;
    }).includes(param.name);
  });
  var reset = React.useCallback(function () {
    setDefinedParameters(initialParameters.filter(function (p) {
      return p.required || p.enabled;
    }));
  }, [initialParameters]);
  var handleOnConfirm = React.useCallback(function () {
    onConfirm(definedParameters);
  }, [definedParameters, onConfirm]);
  var handleOnCancel = React.useCallback(function () {
    onCancel();
    reset();
  }, [onCancel, reset]);
  var handleAddParameter = React.useCallback(function () {
    setDefinedParameters(definedParameters.concat(_extends({}, availableParameters[0])));
  }, [definedParameters, availableParameters]);
  var handleRemoveParameter = React.useCallback(function (parameter) {
    setDefinedParameters(definedParameters.filter(function (p) {
      return p !== parameter;
    }));
  }, [definedParameters]);
  var handleChangeParameterValue = React.useCallback(function (index, value) {
    var parameters = [].concat(definedParameters);

    var parameter = _extends({}, parameters[index], {
      value: value
    });

    parameters[index] = parameter;
    setDefinedParameters(parameters);
  }, [definedParameters]);
  var handleChangeParameter = React.useCallback(function (index, availableParameterIndex) {
    if (availableParameterIndex === 0) {
      return; //nothing changed
    }

    var parameters = [].concat(definedParameters);

    var parameter = _extends({}, availableParameters[availableParameterIndex - 1]);

    parameters[index] = parameter;
    setDefinedParameters(parameters);
  }, [definedParameters, availableParameters]);
  var formLabelColumnWidth = {
    '--pf-c-form--m-horizontal--md__group--GridTemplateColumns': '340px 1fr',
    '--pf-c-form--GridGap': '0.5rem'
  };
  var formLabelParamRequired = {
    '--pf-c-form__label--FontSize': 'large',
    '--pf-c-form--m-horizontal--md__group--GridTemplateColumns': '140px 1fr',
    marginBottom: '1.0rem'
  };
  var formLabelTopPadding = {
    '--pf-c-form--m-horizontal__group-label--md--GridColumnWidth': '380px',
    '--pf-c-form--m-horizontal__group-label--md--PaddingTop': '0rem'
  };
  React.useEffect(reset, [reset]);
  return React__default.createElement(ConfirmationDialog, {
    title: title,
    onCancel: handleOnCancel,
    onConfirm: definedParameters.length > 0 ? handleOnConfirm : undefined,
    isOpen: isOpen
  }, React__default.createElement(reactCore.Form, {
    isHorizontal: true,
    style: formLabelColumnWidth
  }, definedParameters.map(function (parameter, index) {
    return React__default.createElement(reactCore.FormGroup, {
      fieldId: index + "-parameter",
      key: index,
      style: !parameter.required ? formLabelTopPadding : formLabelParamRequired,
      label: parameter.required ? React__default.createElement("span", null, parameter.label) : React__default.createElement(reactCore.FormSelect, {
        id: "selected-paramater",
        value: "0",
        label: parameter.label,
        style: {
          display: 'flex',
          marginLeft: 'auto'
        },
        onChange: function onChange(availableParameterIndex) {
          return handleChangeParameter(index, availableParameterIndex);
        }
      }, [parameter].concat(availableParameters).map(function (parameter, index) {
        return React__default.createElement(reactCore.FormSelectOption, {
          key: index,
          value: index,
          label: parameter.label
        });
      }))
    }, React__default.createElement(reactCore.InputGroup, null, parameter["boolean"] ? React__default.createElement("span", {
      style: {
        paddingTop: 5,
        display: 'inline',
        marginLeft: 'auto',
        "float": 'right'
      }
    }, React__default.createElement(reactCore.Switch, {
      id: parameter.name,
      name: parameter.name,
      isChecked: parameter.value === 'true',
      onChange: function onChange(checked) {
        handleChangeParameterValue(index, String(checked));
      }
    })) : parameter.options && parameter.options.length > 0 ? React__default.createElement(reactCore.FormSelect, {
      value: parameter.value,
      onChange: function onChange(value) {
        return handleChangeParameterValue(index, value);
      },
      id: parameter.name,
      name: parameter.name,
      "data-testid": parameter.name + '-parameter-form-select'
    }, parameter.options.map(function (_ref2, idx) {
      var label = _ref2.label,
          value = _ref2.value;
      return React__default.createElement(reactCore.FormSelectOption, {
        key: idx,
        value: value,
        label: label
      });
    })) : React__default.createElement(reactCore.TextInput, {
      value: parameter.value,
      onChange: function onChange(value) {
        return handleChangeParameterValue(index, value);
      },
      id: parameter.name,
      name: parameter.name,
      "data-testid": parameter.name + '-parameter-text-input'
    }), !parameter.required && React__default.createElement(reactCore.Button, {
      variant: "plain",
      "aria-label": "Action",
      onClick: function onClick(_event) {
        return handleRemoveParameter(parameter);
      },
      style: {
        display: 'inline',
        marginLeft: '0',
        "float": 'right'
      }
    }, React__default.createElement(reactIcons.TrashIcon, null))));
  }), React__default.createElement("span", null, React__default.createElement(reactCore.Button, {
    style: {
      display: 'inline',
      "float": 'left',
      marginTop: '1.0rem',
      width: '40'
    },
    isDisabled: availableParameters.length === 0,
    onClick: handleAddParameter,
    variant: "link",
    icon: React__default.createElement(reactIcons.PlusIcon, null)
  }, "Add parameter"))));
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var DelayedBoolean = function DelayedBoolean(_ref) {
  var value = _ref.value,
      _ref$delay = _ref.delay,
      delay = _ref$delay === void 0 ? 1000 : _ref$delay,
      children = _ref.children;

  var _useState = React.useState(value),
      delayedValue = _useState[0],
      setDelayedValue = _useState[1];

  React.useEffect(function () {
    var updateValue = function updateValue() {
      return setDelayedValue(value);
    };

    var timer = setTimeout(updateValue, delay);
    return function () {
      return clearTimeout(timer);
    };
  }, [delay, value]);
  return children(delayedValue);
};

var styles$f = {"fieldName":"TruncatedString-module_fieldName__3A5S8"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var TruncatedString = function TruncatedString(_ref) {
  var title = _ref.title,
      children = _ref.children;
  return React__default.createElement("span", {
    className: styles$f.fieldName,
    "data-title": title || (typeof children === 'string' ? children : undefined)
  }, children);
};

var styles$g = {"card":"Document-module_card__RGn2a","stacked":"Document-module_stacked__1U8tH","head":"Document-module_head__2cUCh","header":"Document-module_header__K5DRL","actions":"Document-module_actions__TDpqD","headerButton":"Document-module_headerButton__3FK4r","bodyNoPadding":"Document-module_bodyNoPadding__1QmMP","bodyWithPadding":"Document-module_bodyWithPadding__6CL6F","hidden":"Document-module_hidden__3sH12","noShadows":"Document-module_noShadows__1O9rB","dropTarget":"Document-module_dropTarget__3JRG3","dropAccepted":"Document-module_dropAccepted__2mBxm"};

var Document = /*#__PURE__*/React.forwardRef(function Document(_ref, ref) {
  var title = _ref.title,
      actions = _ref.actions,
      footer = _ref.footer,
      _ref$selected = _ref.selected,
      selected = _ref$selected === void 0 ? false : _ref$selected,
      _ref$dropTarget = _ref.dropTarget,
      dropTarget = _ref$dropTarget === void 0 ? false : _ref$dropTarget,
      _ref$dropAccepted = _ref.dropAccepted,
      dropAccepted = _ref$dropAccepted === void 0 ? false : _ref$dropAccepted,
      _ref$stacked = _ref.stacked,
      stacked = _ref$stacked === void 0 ? true : _ref$stacked,
      _ref$selectable = _ref.selectable,
      selectable = _ref$selectable === void 0 ? false : _ref$selectable,
      _ref$noPadding = _ref.noPadding,
      noPadding = _ref$noPadding === void 0 ? false : _ref$noPadding,
      _ref$noShadows = _ref.noShadows,
      noShadows = _ref$noShadows === void 0 ? false : _ref$noShadows,
      startExpanded = _ref.startExpanded,
      onSelect = _ref.onSelect,
      onDeselect = _ref.onDeselect,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, ["id", "title", "actions", "footer", "selected", "dropTarget", "dropAccepted", "stacked", "selectable", "scrollIntoView", "noPadding", "noShadows", "startExpanded", "onSelect", "onDeselect", "children"]);

  var _useToggle = useToggle(startExpanded),
      isExpanded = _useToggle.state,
      toggleExpanded = _useToggle.toggle;

  var handleClick = React.useCallback(function (event) {
    event.stopPropagation();

    if (onSelect) {
      onSelect();
    }
  }, [onSelect]);
  var handleKey = React.useCallback(function (event) {
    switch (event.key) {
      case 'Enter':
      case 'Space':
        if (onSelect) {
          onSelect();
        }

        break;

      case 'Escape':
        if (onDeselect) {
          onDeselect();
        }

        break;
    }
  }, [onDeselect, onSelect]);
  var makeCardSelected = selected || dropTarget || dropAccepted;
  return React__default.createElement("div", Object.assign({
    className: reactStyles.css(stacked && styles$g.stacked),
    onClick: handleClick,
    onKeyDown: handleKey,
    ref: ref
  }, props), React__default.createElement(reactCore.Card, {
    isCompact: true,
    className: reactStyles.css(styles$g.card, noShadows && styles$g.noShadows, dropAccepted && !dropTarget && styles$g.dropAccepted, dropTarget && styles$g.dropTarget),
    isSelected: makeCardSelected,
    isSelectable: makeCardSelected || selectable,
    "aria-label": title
  }, (title || actions) && React__default.createElement(reactCore.CardHeader, {
    "data-codemods": "true",
    className: reactStyles.css(styles$g.head)
  }, React__default.createElement(reactCore.CardActions, {
    className: reactStyles.css(styles$g.actions)
  }, actions === null || actions === void 0 ? void 0 : actions.filter(function (a) {
    return a;
  })), title && React__default.createElement(reactCore.CardTitle, {
    className: reactStyles.css(styles$g.header)
  }, React__default.createElement(reactCore.Button, {
    variant: 'plain',
    onClick: toggleExpanded,
    "aria-label": 'Expand/collapse this card',
    "data-testid": "expand-collapse-" + title + "-button",
    className: reactStyles.css(styles$g.headerButton)
  }, React__default.createElement(reactCore.Title, {
    size: "lg",
    headingLevel: 'h2',
    "aria-label": title
  }, React__default.createElement(TruncatedString, {
    title: title
  }, isExpanded ? React__default.createElement(reactIcons.AngleDownIcon, null) : React__default.createElement(reactIcons.AngleRightIcon, null), ' ', title))))), React__default.createElement(reactCore.CardBody, {
    className: reactStyles.css(noPadding ? styles$g.bodyNoPadding : styles$g.bodyWithPadding, !isExpanded && styles$g.hidden)
  }, children), footer));
});

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var DocumentActions = function DocumentActions(_ref) {
  var onExpandFields = _ref.onExpandFields,
      onCollapseFields = _ref.onCollapseFields,
      onDelete = _ref.onDelete;

  var _useState = React.useState(false),
      showActions = _useState[0],
      setShowActions = _useState[1];

  var toggleActions = function toggleActions(open) {
    return setShowActions(open);
  };

  return React__default.createElement(reactCore.Dropdown, {
    toggle: React__default.createElement(reactCore.DropdownToggle, {
      splitButtonItems: [React__default.createElement(reactCore.DropdownToggleAction, {
        key: "action",
        onClick: onExpandFields
      }, React__default.createElement(reactIcons.FolderOpenIcon, null))],
      splitButtonVariant: "action",
      onToggle: toggleActions
    }),
    isOpen: showActions,
    position: 'right',
    dropdownItems: [React__default.createElement(reactCore.DropdownItem, {
      icon: React__default.createElement(reactIcons.FolderCloseIcon, null),
      key: 'collapse',
      onClick: onCollapseFields
    }, "Collapse all"), React__default.createElement(reactCore.DropdownSeparator, {
      key: 'sep-1'
    }), React__default.createElement(reactCore.DropdownItem, {
      icon: React__default.createElement(reactIcons.TrashIcon, null),
      key: 'delete',
      onClick: onDelete
    }, "Remove instance or schema file")]
  });
};

var styles$h = {"element":"DocumentField-module_element__3UquT","row":"DocumentField-module_row__42UJ1","nameWrapper":"DocumentField-module_nameWrapper__29uxt","nameIcon":"DocumentField-module_nameIcon__1WpQQ","statusIcons":"DocumentField-module_statusIcons__1beBv","isDragging":"DocumentField-module_isDragging__bRkvB","isSelected":"DocumentField-module_isSelected__228o4","isDisabled":"DocumentField-module_isDisabled__X2vKl","actions":"DocumentField-module_actions__Y02bP"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var DocumentField = /*#__PURE__*/React.forwardRef(function DocumentField(_ref, ref) {
  var name = _ref.name,
      type = _ref.type,
      scope = _ref.scope,
      icon = _ref.icon,
      statusIcons = _ref.statusIcons,
      actions = _ref.actions,
      _ref$showType = _ref.showType,
      showType = _ref$showType === void 0 ? false : _ref$showType,
      _ref$isDragging = _ref.isDragging,
      isDragging = _ref$isDragging === void 0 ? false : _ref$isDragging,
      _ref$isFocused = _ref.isFocused,
      isFocused = _ref$isFocused === void 0 ? false : _ref$isFocused,
      _ref$isSelected = _ref.isSelected,
      isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected,
      _ref$isDisabled = _ref.isDisabled,
      isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,
      children = _ref.children;

  var _useToggle = useToggle(false),
      isHovering = _useToggle.state,
      hideActions = _useToggle.toggleOff,
      showActions = _useToggle.toggleOn;

  return React__default.createElement("div", {
    ref: ref,
    className: reactStyles.css(styles$h.element, isDragging && styles$h.isDragging, isSelected && styles$h.isSelected, isDisabled && styles$h.isDisabled),
    onMouseEnter: !isDisabled ? showActions : undefined,
    onMouseLeave: !isDisabled ? hideActions : undefined
  }, React__default.createElement("div", {
    className: styles$h.row
  }, icon && React__default.createElement("div", {
    className: styles$h.nameIcon
  }, icon), React__default.createElement(reactCore.Tooltip, {
    key: "" + name,
    position: 'auto',
    enableFlip: true,
    content: scope ? name + " <" + scope + ">" : "" + name,
    entryDelay: 750,
    exitDelay: 100
  }, React__default.createElement("div", {
    className: styles$h.nameWrapper,
    "data-testid": "document-" + name + "-field"
  }, React__default.createElement(TruncatedString, null, name), React__default.createElement("span", null, showType && " (" + type + ")"), React__default.createElement("span", {
    className: styles$h.statusIcons
  }, statusIcons && (statusIcons === null || statusIcons === void 0 ? void 0 : statusIcons.filter(function (a) {
    return a;
  }))))), (isHovering || isFocused) && actions && !isDisabled && React__default.createElement("div", {
    className: styles$h.actions
  }, actions === null || actions === void 0 ? void 0 : actions.filter(function (a) {
    return a;
  }))), children);
});

var styles$i = {"form":"DocumentFieldPreview-module_form__MOqh2"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var DocumentFieldPreview = function DocumentFieldPreview(_ref) {
  var id = _ref.id,
      value = _ref.value,
      onChange = _ref.onChange;
  var debouncedOnChange = useDebounce.useDebouncedCallback(onChange, 200);
  return React__default.createElement(reactCore.Form, {
    className: styles$i.form,
    onClick: function onClick(event) {
      return event.stopPropagation();
    }
  }, React__default.createElement(reactCore.FormGroup, {
    label: "Mapping preview",
    fieldId: id
  }, React__default.createElement(reactCore.TextInput, {
    id: id,
    type: "text",
    onChange: debouncedOnChange,
    defaultValue: value || '',
    "aria-label": "Type sample data here",
    placeholder: "Type sample data here",
    "data-testid": "input-document-mapping-preview-" + id + "-field"
  })));
};

var styles$j = {"form":"DocumentFieldPreviewResults-module_form__2yX2v"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var DocumentFieldPreviewResults = function DocumentFieldPreviewResults(_ref) {
  var id = _ref.id,
      value = _ref.value;
  return React__default.createElement(reactCore.Form, {
    className: styles$j.form
  }, React__default.createElement(reactCore.FormGroup, {
    label: "Preview results",
    fieldId: id
  }, React__default.createElement(reactCore.TextInput, {
    id: id,
    type: "text",
    value: value === undefined ? '' : value,
    "aria-label": "Mapping results preview",
    placeholder: "Results will be displayed here",
    isDisabled: true,
    "data-testid": "results-document-mapping-preview-" + id + "-field"
  })));
};

var styles$k = {"footer":"DocumentFooter-module_footer__2iOjg"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var DocumentFooter = function DocumentFooter(_ref) {
  var children = _ref.children;
  return React__default.createElement(reactCore.CardFooter, {
    className: styles$k.footer
  }, children);
};

var styles$l = {"buttonContent":"DocumentGroup-module_buttonContent__2XWy9","buttonIcon":"DocumentGroup-module_buttonIcon__-gWtf","icon":"DocumentGroup-module_icon__3vO1x"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var DocumentGroup = /*#__PURE__*/React.forwardRef(function DocumentGroup(_ref, ref) {
  var name = _ref.name,
      type = _ref.type,
      icon = _ref.icon,
      iconTooltip = _ref.iconTooltip,
      _ref$showType = _ref.showType,
      showType = _ref$showType === void 0 ? false : _ref$showType,
      expanded = _ref.expanded;
  var spanRef = React.useRef(null);

  var handleRef = function handleRef(el) {
    spanRef.current = el;

    if (ref) {
      if (typeof ref === 'function') {
        ref(el);
      } else {
        // @ts-ignore
        ref.current = el;
      }
    }
  };

  return React__default.createElement("span", {
    className: styles$l.buttonContent,
    ref: handleRef,
    "data-testid": "field-group-" + name + "-expanded-" + expanded + "-field"
  }, React__default.createElement("span", {
    className: styles$l.buttonIcon
  }, expanded ? React__default.createElement(reactIcons.FolderOpenIcon, null) : React__default.createElement(reactIcons.FolderCloseIcon, null)), name, showType && " (" + type + ")", icon && React__default.createElement(reactCore.Tooltip, {
    enableFlip: true,
    content: iconTooltip
  }, React__default.createElement("span", {
    className: styles$l.icon
  }, icon)));
});

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var Loading = function Loading() {
  return React__default.createElement(reactCore.EmptyState, {
    variant: reactCore.EmptyStateVariant.full
  }, React__default.createElement(reactCore.EmptyStateIcon, {
    variant: "container",
    component: reactCore.Spinner
  }), React__default.createElement(reactCore.Title, {
    headingLevel: "h2",
    size: "lg"
  }, "Loading"));
};

var styles$m = {"transArgs":"MappingTransformation-module_transArgs__1bfr5"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var formTransStyle = {
  '--pf-c-form-control--FontSize': 'small',
  '--pf-c-form--GridGap': '0',
  marginTop: '0.4rem'
};
var formTransGroupStyle = {
  '--pf-c-form-control--FontSize': 'small',
  marginTop: '1.0rem'
};
var formTransTextInputStyle = {
  '--pf-c-form-control--FontSize': 'small',
  marginTop: '0rem'
};
var MappingTransformation = function MappingTransformation(_ref) {
  var name = _ref.name,
      transformationsOptions = _ref.transformationsOptions,
      _ref$transformationsA = _ref.transformationsArguments,
      transformationsArguments = _ref$transformationsA === void 0 ? [] : _ref$transformationsA,
      disableTransformation = _ref.disableTransformation,
      onTransformationArgumentChange = _ref.onTransformationArgumentChange,
      onTransformationChange = _ref.onTransformationChange,
      onRemoveTransformation = _ref.onRemoveTransformation;

  var RenderTransformationArgumentOptions = function RenderTransformationArgumentOptions(argId, arg, disableTransformation, onTransformationArgumentChange) {
    var _arg$options, _arg$options2, _arg$options3;

    /** If the option name is 'User defined', we assume it accepts a user input */
    var isUserDefined = function isUserDefined(option) {
      return (option === null || option === void 0 ? void 0 : option.name) === 'User defined';
    };

    var userDefinedOption = (_arg$options = arg.options) === null || _arg$options === void 0 ? void 0 : _arg$options.find(function (option) {
      return isUserDefined(option);
    });
    var initialSelected = (_arg$options2 = arg.options) === null || _arg$options2 === void 0 ? void 0 : _arg$options2.find(function (option) {
      return option.value === arg.value;
    });

    if (!initialSelected) {
      if (arg.value) {
        initialSelected = userDefinedOption;
      } else if (arg.options) {
        initialSelected = arg.options[1];
        arg.value = arg.options[1].value;
      }
    }

    var initialUserDefined = '';

    if (isUserDefined(initialSelected)) {
      initialUserDefined = arg.value;
    }

    var _useState = React.useState(false),
        isOpen = _useState[0],
        setIsOpen = _useState[1];

    var _useState2 = React.useState(initialSelected),
        selected = _useState2[0],
        setSelected = _useState2[1];

    var _useState3 = React.useState(initialUserDefined),
        userDefinedValue = _useState3[0],
        setUserDefinedValue = _useState3[1];

    var onToggle = function onToggle(isOpen) {
      setIsOpen(isOpen);
    };

    var onSelect = function onSelect(_event, selection, _isPlaceholder) {
      setIsOpen(false);
      var selectedOption = arg.options.find(function (option) {
        return option.value === selection;
      });

      if (!selectedOption) {
        return;
      }

      setSelected(selectedOption);
      arg.value = isUserDefined(selectedOption) ? userDefinedValue ? userDefinedValue : '' : selection.toString();
      onTransformationArgumentChange(arg.name, arg.value);
    };

    var onChangeUserDefinedValue = function onChangeUserDefinedValue(value) {
      setUserDefinedValue(value);
      arg.value = value;
      onTransformationArgumentChange(arg.name, value);
    };

    return React__default.createElement(reactCore.Split, null, React__default.createElement(reactCore.SplitItem, null, React__default.createElement(reactCore.Select, {
      variant: reactCore.SelectVariant.single,
      "aria-label": arg.label,
      onSelect: onSelect,
      selections: selected === null || selected === void 0 ? void 0 : selected.value,
      onToggle: onToggle,
      isOpen: isOpen,
      placeholderText: '[None]',
      id: argId,
      isDisabled: disableTransformation,
      "data-testid": arg.name,
      style: formTransStyle
    }, (_arg$options3 = arg.options) === null || _arg$options3 === void 0 ? void 0 : _arg$options3.map(function (option, optIndx) {
      return React__default.createElement(reactCore.SelectOption, {
        value: option.value,
        key: optIndx
      }, option.name);
    }))), isUserDefined(selected) && React__default.createElement(reactCore.SplitItem, null, React__default.createElement(reactCore.TextInput, {
      id: "userDefined",
      type: "text",
      name: "userDefined",
      value: userDefinedValue,
      onChange: onChangeUserDefinedValue,
      style: formTransTextInputStyle,
      "data-testid": "userDefined",
      autoFocus: true
    })));
  };

  var renderTransformationArgumentText = function renderTransformationArgumentText(argId, a) {
    return React__default.createElement(reactCore.TextInput, {
      id: argId,
      type: "text",
      name: a.name,
      isDisabled: disableTransformation,
      value: a.value,
      onChange: function onChange(value) {
        return onTransformationArgumentChange(a.name, value);
      },
      "data-testid": "insert-transformation-parameter-" + a.name + "-input-field",
      style: formTransTextInputStyle
    });
  };

  var renderTransformationArgumentBoolean = function renderTransformationArgumentBoolean(argId, a) {
    return React__default.createElement(reactCore.Checkbox, {
      className: reactStyles.css(styles$m.transArgs),
      id: argId,
      "data-testid": argId + '-checkbox',
      key: argId,
      label: a.label,
      "aria-label": a.label,
      isChecked: a.value === 'true',
      onChange: function onChange(value) {
        return onTransformationArgumentChange(a.name, value.toString());
      }
    });
  };

  var renderTransformationArgument = function renderTransformationArgument(a, idx) {
    var argId = id + "-transformation-" + idx;

    switch (a.type) {
      case core.FieldType.BOOLEAN:
        {
          return renderTransformationArgumentBoolean(argId, a);
        }

      default:
        {
          return React__default.createElement(reactCore.FormGroup, {
            className: reactStyles.css(styles$m.transArgs),
            fieldId: argId,
            label: a.label,
            key: idx,
            style: formTransGroupStyle
          }, a.options ? RenderTransformationArgumentOptions(argId, a, disableTransformation, onTransformationArgumentChange) : renderTransformationArgumentText(argId, a));
        }
    }
  };

  var id = "user-field-action-" + name;
  return React__default.createElement(React__default.Fragment, null, React__default.createElement(reactCore.FormGroup, {
    fieldId: id + "-transformation"
  }, React__default.createElement(reactCore.InputGroup, {
    style: {
      background: 'transparent'
    }
  }, React__default.createElement(reactCore.FormSelect, {
    value: name,
    id: id,
    isDisabled: disableTransformation,
    onChange: onTransformationChange,
    "data-testid": id,
    style: formTransStyle
  }, transformationsOptions.map(function (a, idx) {
    return React__default.createElement(reactCore.FormSelectOption, {
      label: a.name,
      value: a.value,
      key: idx
    });
  })), onRemoveTransformation && React__default.createElement(reactCore.Button, {
    variant: 'plain',
    onClick: onRemoveTransformation,
    "data-testid": "close-transformation-" + name + "-button",
    "aria-label": "Remove the transformation"
  }, React__default.createElement(reactIcons.TrashIcon, null)))), transformationsArguments.map(renderTransformationArgument));
};

var styles$n = {"field":"MappingField-module_field__U8VrI","title":"MappingField-module_title__2hRMD","fieldIndex":"MappingField-module_fieldIndex__3Xgxl","fieldName":"MappingField-module_fieldName__17AfY","link":"MappingField-module_link__3EapV","transformationsWrapper":"MappingField-module_transformationsWrapper__14gGs","transformations":"MappingField-module_transformations__iIDte"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var formTransInputGroup = {
  '--pf-c-form-control--FontSize': 'small'
};
var MappingField = function MappingField(_ref) {
  var field = _ref.field,
      name = _ref.name,
      info = _ref.info,
      index = _ref.index,
      canShowIndex = _ref.canShowIndex,
      mappingExpressionEnabled = _ref.mappingExpressionEnabled,
      hasTransformations = _ref.hasTransformations,
      onDelete = _ref.onDelete,
      onIndexChange = _ref.onIndexChange,
      onNewTransformation = _ref.onNewTransformation,
      children = _ref.children;
  var id = "mapping-field-" + name;
  return React__default.createElement(FieldDropTarget, {
    key: field ? field.id : name,
    target: {
      id: field.id,
      name: field.name,
      type: 'mapping',
      payload: field
    },
    canDrop: function canDrop() {
      return true;
    },
    accept: ['mapping']
  }, function (_ref2) {
    var isTarget = _ref2.isTarget;
    return React__default.createElement(DraggableField, {
      field: {
        type: 'mapping',
        id: field.id,
        name: field.name,
        payload: field
      },
      onDrop: function onDrop(_, target) {
        if (!onIndexChange) {
          return;
        }

        onIndexChange(target.payload);
      }
    }, function (_ref3) {
      var isDragging = _ref3.isDragging;
      return React__default.createElement(NodeRef, {
        id: [field.id, isDragging ? 'dnd-start' : undefined, isTarget ? 'dnd-target-field' : undefined]
      }, React__default.createElement("div", {
        className: styles$n.field,
        "aria-labelledby": id,
        "data-testid": id
      }, React__default.createElement(reactCore.Split, null, React__default.createElement(reactCore.SplitItem, {
        isFilled: true
      }, React__default.createElement(reactCore.Title, {
        headingLevel: "h6",
        size: "md",
        id: id,
        className: styles$n.title
      }, canShowIndex && React__default.createElement(reactCore.Tooltip, {
        position: 'auto',
        enableFlip: true,
        entryDelay: 750,
        exitDelay: 100,
        content: React__default.createElement("div", null, "Edit the index for this element by selecting the arrows or by dragging and dropping the element to the desired position. Placeholders may be automatically inserted to account for any gaps in the indexing.")
      }, React__default.createElement(reactCore.InputGroup, {
        className: styles$n.fieldIndex
      }, React__default.createElement(reactCore.InputGroupText, null, "#"), React__default.createElement(reactCore.TextInput, {
        type: 'number',
        value: index,
        id: 'index',
        onChange: onIndexChange,
        "data-testid": "change-" + name + "-input-index",
        isDisabled: !onIndexChange,
        style: formTransInputGroup
      }))), React__default.createElement(reactCore.Tooltip, {
        position: 'auto',
        enableFlip: true,
        entryDelay: 750,
        exitDelay: 100,
        content: React__default.createElement("div", null, info)
      }, React__default.createElement("div", {
        className: styles$n.fieldName
      }, name, " ", React__default.createElement(reactIcons.InfoAltIcon, null))))), !mappingExpressionEnabled && onNewTransformation && React__default.createElement(reactCore.SplitItem, null, React__default.createElement(reactCore.Tooltip, {
        position: 'auto',
        enableFlip: true,
        entryDelay: 750,
        exitDelay: 100,
        content: 'Add a new transformation.'
      }, React__default.createElement(reactCore.Button, {
        variant: 'plain',
        onClick: onNewTransformation,
        className: styles$n.link,
        "data-testid": "add-transformation-to-" + name + "-field-button"
      }, React__default.createElement(reactIcons.BoltIcon, null)))), React__default.createElement(reactCore.SplitItem, null, React__default.createElement(reactCore.Tooltip, {
        position: 'auto',
        enableFlip: true,
        entryDelay: 750,
        exitDelay: 100,
        content: 'Delete this field from the mapping.'
      }, React__default.createElement(reactCore.Button, {
        variant: 'plain',
        onClick: onDelete,
        className: styles$n.link,
        "data-testid": "remove-" + name + "-from-mapping-button"
      }, React__default.createElement(reactIcons.TrashIcon, null))))), !mappingExpressionEnabled && hasTransformations && children && React.Children.count(children) > 0 && React__default.createElement("div", {
        className: reactStyles.css(styles$n.transformationsWrapper)
      }, React__default.createElement(reactCore.Title, {
        headingLevel: "h6",
        size: "md"
      }, "Transformations"), React__default.createElement("div", {
        className: styles$n.transformations
      }, children))));
    });
  });
};

var styles$o = {"wrapper":"MappingFields-module_wrapper__1N9IY","pf-c-expandable__content":"MappingFields-module_pf-c-expandable__content__OtXJV"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var MappingFields = function MappingFields(_ref) {
  var title = _ref.title,
      isSource = _ref.isSource,
      onCreateConstant = _ref.onCreateConstant,
      onCreateProperty = _ref.onCreateProperty,
      canAddToSelectedMapping = _ref.canAddToSelectedMapping,
      children = _ref.children;

  var _useToggle = useToggle(true),
      expanded = _useToggle.state,
      toggleExpanded = _useToggle.toggle;

  return React__default.createElement("div", {
    className: styles$o.wrapper
  }, React__default.createElement(reactCore.Button, {
    key: 'expandable',
    variant: 'plain',
    "aria-label": "Ok",
    onClick: toggleExpanded,
    "data-testid": "mapping-fields-detail-" + title + "-toggle",
    style: {
      display: 'inline',
      marginLeft: 'auto'
    }
  }, expanded ? React__default.createElement(reactIcons.CaretDownIcon, null) : React__default.createElement(reactIcons.CaretRightIcon, null)), title, React__default.createElement(reactCore.Tooltip, {
    position: 'top',
    enableFlip: true,
    content: React__default.createElement("div", null, "Create and map a property."),
    key: 'create-property',
    entryDelay: 750,
    exitDelay: 100
  }, React__default.createElement(reactCore.Button, {
    key: 'create-prop',
    variant: 'plain',
    "aria-label": "Add Property",
    isDisabled: !canAddToSelectedMapping(isSource),
    onClick: function onClick() {
      return onCreateProperty(isSource, null);
    },
    "data-testid": 'mapping-details-add-property-button-test',
    style: {
      display: 'inline',
      marginLeft: 'auto',
      "float": 'right'
    }
  }, React__default.createElement(reactIcons.AddCircleOIcon, null))), isSource && React__default.createElement(reactCore.Tooltip, {
    position: 'top',
    enableFlip: true,
    content: React__default.createElement("div", null, "Create and map a source constant."),
    key: 'create-constant',
    entryDelay: 750,
    exitDelay: 100
  }, React__default.createElement(reactCore.Button, {
    key: 'create-const',
    variant: 'plain',
    "aria-label": "Add Constant",
    isDisabled: !canAddToSelectedMapping(isSource),
    onClick: onCreateConstant,
    "data-testid": 'mapping-details-add-constant-button-test',
    style: {
      display: 'inline',
      marginLeft: 'auto',
      "float": 'right'
    }
  }, React__default.createElement(reactIcons.PlusIcon, null))), expanded && children);
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var TimedToast = function TimedToast(_ref) {
  var variant = _ref.variant,
      title = _ref.title,
      children = _ref.children,
      onTimeout = _ref.onTimeout,
      onClose = _ref.onClose;
  var showTime = 8000;
  var intervalTime = 100;

  var _useState = React.useState(showTime),
      elapsed = _useState[0],
      setElapsed = _useState[1];

  var _useToggle = useToggle(false),
      hovering = _useToggle.state,
      hoveringOn = _useToggle.toggleOn,
      hoveringOff = _useToggle.toggleOff;

  React.useEffect(function () {
    var tick = function tick() {
      setElapsed(function (elapsed) {
        return elapsed - intervalTime;
      });
    };

    var timer = undefined;

    if (elapsed <= 0) {
      onTimeout();
    } else if (!hovering && !timer) {
      timer = setInterval(tick, intervalTime);
    } else {
      setElapsed(showTime);
    }

    return function () {
      return timer && clearTimeout(timer);
    };
  }, [elapsed, hovering, onTimeout]);
  return React__default.createElement(reactCore.Alert, {
    isLiveRegion: true,
    variant: variant,
    title: title,
    actionClose: React__default.createElement(reactCore.AlertActionCloseButton, {
      title: title,
      variantLabel: variant + " alert",
      onClose: onClose
    }),
    onMouseEnter: hoveringOn,
    onMouseLeave: hoveringOff
  }, children);
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var TreeFocusContext = /*#__PURE__*/React.createContext(null);
var TreeFocusProvider = function TreeFocusProvider(_ref) {
  var children = _ref.children;

  var _useState = React.useState(null),
      focusedItem = _useState[0],
      setFocusedItem = _useState[1];

  return React__default.createElement(TreeFocusContext.Provider, {
    value: {
      focusedItem: focusedItem,
      setFocusedItem: setFocusedItem
    }
  }, children);
};
var useTreeFocus = function useTreeFocus(_ref2) {
  var ref = _ref2.ref,
      _ref2$isExpandable = _ref2.isExpandable,
      isExpandable = _ref2$isExpandable === void 0 ? false : _ref2$isExpandable,
      _ref2$isExpanded = _ref2.isExpanded,
      isExpanded = _ref2$isExpanded === void 0 ? false : _ref2$isExpanded,
      collapseTreeitem = _ref2.collapseTreeitem,
      expandTreeitem = _ref2.expandTreeitem;
  var context = React.useContext(TreeFocusContext);

  if (!context) {
    throw new Error("useTreeFocus can be used only inside a Tree component");
  }

  var focusedItem = context.focusedItem,
      setFocusedItem = context.setFocusedItem;

  var getFocusableItems = function getFocusableItems(el) {
    var _el$closest;

    return Array.from(((_el$closest = el.closest('[role=tree]')) === null || _el$closest === void 0 ? void 0 : _el$closest.querySelectorAll('[role=treeitem]')) || []).filter(function (el) {
      var _el$parentElement;

      var group = (_el$parentElement = el.parentElement) === null || _el$parentElement === void 0 ? void 0 : _el$parentElement.closest('[aria-expanded]');

      if (group) {
        return group.getAttribute('aria-expanded') === 'true';
      }

      return true;
    });
  };

  var setFocus = function setFocus(index, nodes) {
    nodes.forEach(function (n) {
      return n.setAttribute('tabindex', '-1');
    });
    nodes[index].setAttribute('tabindex', '0');
    nodes[index].focus();
  };

  var setFocusToPreviousItem = function setFocusToPreviousItem() {
    if (ref.current) {
      var nodes = getFocusableItems(ref.current);
      var idx = nodes === null || nodes === void 0 ? void 0 : nodes.indexOf(ref.current);

      if (idx > 0) {
        setFocus(idx - 1, nodes);
      }
    }
  };

  var setFocusToNextItem = function setFocusToNextItem() {
    if (ref.current) {
      var nodes = getFocusableItems(ref.current);
      var idx = nodes === null || nodes === void 0 ? void 0 : nodes.indexOf(ref.current);

      if (idx < nodes.length - 1) {
        setFocus(idx + 1, nodes);
      }
    }
  }; // const setFocusToParentItem = () => {
  //   if (level > 1 && parentItem) {
  //     setFocus({ level: level - 1, position: parentItem.position });
  //   }
  // };


  var setFocusToFirstItem = function setFocusToFirstItem() {
    if (ref.current) {
      var nodes = getFocusableItems(ref.current);
      setFocus(0, nodes);
    }
  };

  var setFocusToLastItem = function setFocusToLastItem() {
    if (ref.current) {
      var nodes = getFocusableItems(ref.current);
      setFocus(nodes.length - 1, nodes);
    }
  };

  var onKeyDown = function onKeyDown(event) {
    // don't handle keyboard events performed on child elements
    if (event.target !== ref.current) {
      return;
    } // ignore special keys


    if (event.altKey || event.ctrlKey || event.metaKey) {
      return;
    }

    switch (event.key) {
      case ' ':
      case 'Enter':
        if (event.target === ref.current) {
          // Create simulated mouse event to mimic the behavior of ATs
          // and let the event handler handleClick do the housekeeping.
          event.target.dispatchEvent(new MouseEvent('click', {
            view: window,
            bubbles: true,
            cancelable: true
          }));
          setFocusedItem(ref.current);
        }

        break;

      case 'Escape':
        setFocusedItem(null);
        event.preventDefault();
        break;

      case 'ArrowUp':
        setFocusToPreviousItem();
        break;

      case 'ArrowDown':
        setFocusToNextItem();
        break;

      case 'ArrowRight':
        if (isExpandable) {
          if (isExpanded) {
            setFocusToNextItem();
          } else {
            if (expandTreeitem) {
              expandTreeitem();
            }
          }
        }

        break;

      case 'ArrowLeft':
        if (isExpandable && isExpanded) {
          if (collapseTreeitem) {
            collapseTreeitem();
          }
        }

        break;

      case 'Home':
        setFocusToFirstItem();
        break;

      case 'End':
        setFocusToLastItem();
        break;
    }
  };

  var onClick = function onClick(event) {
    if (ref.current) {
      if (isExpandable && isExpanded) {
        event.stopPropagation();
      } else {
        var nodes = getFocusableItems(ref.current);
        var idx = nodes === null || nodes === void 0 ? void 0 : nodes.indexOf(ref.current);
        setFocus(idx, nodes);
        setFocusedItem(ref.current);
      }
    }
  };

  return {
    focused: focusedItem && focusedItem === ref.current,
    handlers: {
      onKeyDown: onKeyDown,
      onClick: onClick,
      onBlur: function onBlur(event) {
        var _event$relatedTarget, _ref$current;

        if (((_event$relatedTarget = event.relatedTarget) === null || _event$relatedTarget === void 0 ? void 0 : _event$relatedTarget.closest('[role=tree]')) !== ((_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.closest('[role=tree]'))) {
          setFocusedItem(null);
        }
      }
    }
  };
};

var styles$p = {"accordion":"Tree-module_accordion__3FmHH"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var Tree = function Tree(_ref) {
  var children = _ref.children;
  var ref = React.useRef(null);
  React.useLayoutEffect(function () {
    if (ref.current) {
      var itemInTabSequence = ref.current.querySelector("[role=treeitem][tabindex=\"0\"]");

      if (!itemInTabSequence) {
        var firstTreeItem = ref.current.querySelector('[role=treeitem]');

        if (firstTreeItem) {
          firstTreeItem.setAttribute('tabindex', '0');
        }
      }
    }
  });
  return React__default.createElement(TreeFocusProvider, null, React__default.createElement("div", {
    ref: ref
  }, React__default.createElement(reactCore.Accordion, {
    asDefinitionList: false,
    className: styles$p.accordion,
    role: 'tree'
  }, children)));
};

var styles$q = {"button":"TreeGroup-module_button__J0cG0","content":"TreeGroup-module_content__36sz6","hiddenContent":"TreeGroup-module_hiddenContent__35KLm"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var TreeGroup = /*#__PURE__*/React.forwardRef(function TreeGroup(_ref, ref) {
  var id = _ref.id,
      expanded = _ref.expanded,
      level = _ref.level,
      setSize = _ref.setSize,
      position = _ref.position,
      renderLabel = _ref.renderLabel,
      children = _ref.children;
  var divRef = React.useRef(null);

  var _useState = React.useState(false),
      isExpanded = _useState[0],
      setIsExpanded = _useState[1];

  var toggleExpand = React.useCallback(function () {
    setIsExpanded(!isExpanded);
  }, [isExpanded]);
  var toggleExpandNoPropagation = React.useCallback(function (event) {
    event.stopPropagation();
    toggleExpand();
  }, [toggleExpand]);
  var expand = React.useCallback(function () {
    return setIsExpanded(true);
  }, []);
  var collapse = React.useCallback(function () {
    return setIsExpanded(false);
  }, []);
  React.useEffect(function () {
    if (expanded !== undefined) {
      setIsExpanded(expanded);
    }
  }, [expanded]);

  var _useTreeFocus = useTreeFocus({
    ref: divRef,
    isExpandable: true,
    isExpanded: isExpanded,
    collapseTreeitem: collapse,
    expandTreeitem: expand
  }),
      focused = _useTreeFocus.focused,
      focusHandlers = _useTreeFocus.handlers;

  var handleRef = function handleRef(el) {
    divRef.current = el;

    if (ref) {
      if (typeof ref === 'function') {
        ref(el);
      } else {
        // @ts-ignore
        ref.current = el;
      }
    }
  };

  var Component = function Component(_ref2) {
    var children = _ref2.children;
    return React__default.createElement("span", {
      role: 'heading',
      "aria-level": level + 2
    }, children);
  };

  return React__default.createElement("div", Object.assign({
    ref: handleRef,
    role: 'treeitem',
    "aria-level": level,
    "aria-setsize": setSize,
    "aria-posinset": position,
    "aria-expanded": isExpanded
  }, focusHandlers, {
    onClick: function onClick(event) {
      focusHandlers.onClick(event);

      if (!event.isPropagationStopped()) {
        toggleExpand();
      }
    }
  }), React__default.createElement(reactCore.AccordionItem, null, React__default.createElement(reactCore.AccordionToggle, {
    isExpanded: isExpanded,
    id: id + "-toggle",
    "data-testid": id + "-toggle",
    className: styles$q.button,
    tabIndex: -1,
    component: Component,
    onClick: toggleExpandNoPropagation
  }, renderLabel({
    expanded: isExpanded,
    focused: focused || false
  })), React__default.createElement(reactCore.AccordionContent, {
    isHidden: !isExpanded,
    className: reactStyles.css(styles$q.content, !isExpanded && styles$q.hiddenContent),
    role: "group"
  }, children({
    expanded: isExpanded,
    focused: focused || false
  }))));
});

var TreeItem = /*#__PURE__*/React.forwardRef(function TreeItem(_ref, ref) {
  var level = _ref.level,
      setSize = _ref.setSize,
      position = _ref.position,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, ["level", "setSize", "position", "children"]);

  var divRef = React.useRef(null);

  var _useTreeFocus = useTreeFocus({
    ref: divRef
  }),
      focused = _useTreeFocus.focused,
      focusHandlers = _useTreeFocus.handlers;

  var handleRef = function handleRef(el) {
    divRef.current = el;

    if (ref) {
      if (typeof ref === 'function') {
        ref(el);
      } else {
        // @ts-ignore
        ref.current = el;
      }
    }
  };

  return React__default.createElement("div", Object.assign({
    ref: handleRef,
    role: 'treeitem',
    "aria-level": level,
    "aria-setsize": setSize,
    "aria-posinset": position
  }, focusHandlers, props), children({
    focused: focused || false
  }));
});

var styles$r = {"iGroup":"useInputTextSelectDialog-module_iGroup__2aLTu","iSelectBody":"useInputTextSelectDialog-module_iSelectBody__3ldUg","iSelectLabel":"useInputTextSelectDialog-module_iSelectLabel__VPLwx","iGroupTextLabel":"useInputTextSelectDialog-module_iGroupTextLabel__2jreO"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function useInputTextSelectDialog(_ref) {
  var title = _ref.title,
      textLabel1 = _ref.textLabel1,
      textValue1 = _ref.textValue1,
      text1ReadOnly = _ref.text1ReadOnly,
      textLabel2 = _ref.textLabel2,
      textValue2 = _ref.textValue2,
      selectLabel = _ref.selectLabel,
      selectValues = _ref.selectValues,
      selectDefault = _ref.selectDefault,
      modalContainer = _ref.modalContainer;
  var onConfirm = React.useRef();
  var onCancel = React.useRef();

  var _useState = React.useState(false),
      isOpen = _useState[0],
      setIsOpen = _useState[1];

  var _useState2 = React.useState(true),
      isValid = _useState2[0],
      setIsValid = _useState2[1];

  var _useState3 = React.useState(textValue1.current),
      value1 = _useState3[0],
      setValue1 = _useState3[1];

  var _useState4 = React.useState(textValue2.current),
      value2 = _useState4[0],
      setValue2 = _useState4[1];

  var _useState5 = React.useState(''),
      selectValue = _useState5[0],
      setSelectValue = _useState5[1];

  var openModal = function openModal(onConfirmCb, onCancelCb) {
    onConfirm.current = onConfirmCb;
    onCancel.current = onCancelCb;
    setIsOpen(true);
    setValue1(textValue1.current);
    setValue2(textValue2.current);
    setSelectValue(selectValues[selectDefault.current][0]);
  };

  var closeModal = function closeModal() {
    return setIsOpen(false);
  };

  var handleTextInputChange = function handleTextInputChange(value, event) {
    setValue1(value);
    setIsValid(event.target.reportValidity());
  };

  var handleTextInputChange2 = function handleTextInputChange2(value, event) {
    setValue2(value);
    setIsValid(event.target.reportValidity());
  };

  var handleSelect = function handleSelect(value) {
    setSelectValue(value);
  };

  var handleConfirm = React.useCallback(function () {
    if (isValid && onConfirm.current) {
      onConfirm.current(value1, value2, selectValue);
    }

    closeModal();
  }, [onConfirm, value1, value2, selectValue, isValid]);
  var handleCancel = React.useCallback(function () {
    if (onCancel.current) {
      onCancel.current();
    }

    closeModal();
  }, [onCancel]);
  var modal = reactDom.createPortal(React__default.createElement(reactCore.Modal, {
    variant: "small",
    title: title,
    isOpen: isOpen,
    onClose: closeModal,
    actions: [React__default.createElement(reactCore.Button, {
      key: 'confirm',
      variant: 'primary',
      onClick: handleConfirm,
      isDisabled: !isValid,
      "aria-label": "Confirm",
      "data-testid": 'text-select-dialog-confirm-button'
    }, "Confirm"), React__default.createElement(reactCore.Button, {
      key: 'cancel',
      variant: 'link',
      onClick: handleCancel,
      "aria-label": "Cancel",
      "data-testid": 'text-select-dialog-cancel-button'
    }, "Cancel")]
  }, textLabel1 && React__default.createElement(React__default.Fragment, null, React__default.createElement(reactCore.TextInput, {
    className: styles$r.iGroupTextLabel,
    value: value1,
    type: "text",
    onChange: handleTextInputChange,
    "aria-label": title,
    isRequired: true,
    validated: isValid ? 'default' : 'error',
    isDisabled: text1ReadOnly,
    placeholder: textLabel1,
    "data-testid": 'itsd-value1-text-input',
    autoFocus: true
  })), textLabel2.length > 0 && React__default.createElement(React__default.Fragment, null, React__default.createElement(reactCore.TextInput, {
    className: styles$r.iGroupTextLabel,
    value: value2,
    type: "text",
    onChange: handleTextInputChange2,
    "aria-label": title,
    isRequired: true,
    validated: isValid ? 'default' : 'error',
    placeholder: textLabel2,
    "data-testid": 'itsd-value2-text-input'
  })), selectLabel && React__default.createElement(React__default.Fragment, null, React__default.createElement(reactCore.Label, {
    className: styles$r.iSelectLabel
  }, selectLabel), React__default.createElement(reactCore.FormSelect, {
    className: styles$r.iSelectBody,
    value: selectValue,
    id: selectValue,
    onChange: handleSelect,
    "data-testid": 'itsd-form-select'
  }, selectValues.map(function (selectValue, idx) {
    return React__default.createElement(reactCore.FormSelectOption, {
      label: selectValue[1],
      value: selectValue[0],
      key: idx
    });
  })))), modalContainer);
  return [modal, openModal];
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function useLatestValue() {
  var _useState = React.useState(),
      element = _useState[0],
      setElement = _useState[1];

  var previousElement = React.useRef();
  var handleSetElement = React.useCallback(function (newElement) {
    if (previousElement.current !== newElement) {
      previousElement.current = newElement;
      setElement(previousElement.current);
    }
  }, [setElement, previousElement]);
  return [element, handleSetElement];
}

var styles$s = {"toolbar":"Toolbar-module_toolbar__3-hXm","toolbarContent":"Toolbar-module_toolbarContent__18Jxq"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var ContextToolbar = function ContextToolbar(_ref) {
  var children = _ref.children;
  return React__default.createElement(reactCore.Toolbar, {
    id: "data-toolbar",
    className: reactStyles.css(styles$s.toolbar),
    role: 'complementary'
  }, React__default.createElement(reactCore.ToolbarContent, {
    className: reactStyles.css(styles$s.toolbarContent)
  }, children));
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var ExpressionToolbar = function ExpressionToolbar(_ref) {
  var children = _ref.children;
  return React__default.createElement(reactCore.Toolbar, {
    className: reactStyles.css(styles$s.toolbar)
  }, React__default.createElement(reactCore.ToolbarContent, {
    className: reactStyles.css(styles$s.toolbarContent)
  }, children));
};

var styles$t = {"wrapper":"MainContent-module_wrapper__1yI76"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var MainContent = function MainContent(_ref) {
  var children = _ref.children;
  return React__default.createElement("div", {
    className: styles$t.wrapper,
    role: 'main'
  }, children);
};

var styles$u = {"sidebar":"Sidebar-module_sidebar___WsR3","pf-topology-side-bar__body":"Sidebar-module_pf-topology-side-bar__body__1eWuY"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var Sidebar = function Sidebar(_ref) {
  var show = _ref.show,
      children = _ref.children;
  return React__default.createElement(reactTopology.TopologySideBar, {
    show: show,
    className: styles$u.sidebar
  }, show && children());
};

var styles$v = {"view":"MainLayout-module_view__1QIGw","pf-topology-container":"MainLayout-module_pf-topology-container__2S8S0","pf-topology-content":"MainLayout-module_pf-topology-content__4PxLm"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var MainLayout = /*#__PURE__*/React.memo(function MainLayout(_ref) {
  var loading = _ref.loading,
      showSidebar = _ref.showSidebar,
      renderSidebar = _ref.renderSidebar,
      contextToolbar = _ref.contextToolbar,
      expressionToolbar = _ref.expressionToolbar,
      controlBar = _ref.controlBar,
      children = _ref.children;
  var sideBar = React__default.createElement(Sidebar, {
    show: showSidebar
  }, renderSidebar);
  var containerClasses = 'pf-topology-container' + ("" + (sideBar ? ' pf-topology-container__with-sidebar' : '')) + ("" + (showSidebar ? ' pf-topology-container__with-sidebar--open' : ''));
  return loading ? React__default.createElement(Loading, null) : React__default.createElement(reactCore.Stack, {
    className: styles$v.view
  }, contextToolbar && React__default.createElement(reactCore.StackItem, {
    isFilled: false
  }, contextToolbar), expressionToolbar && React__default.createElement(reactCore.StackItem, {
    isFilled: false
  }, expressionToolbar), React__default.createElement(reactCore.StackItem, {
    isFilled: true,
    className: containerClasses
  }, React__default.createElement("div", {
    className: "pf-topology-content"
  }, children, controlBar && React__default.createElement("span", {
    className: "pf-topology-control-bar"
  }, controlBar)), sideBar));
});

var styles$w = {"content":"MappingDetailsSidebar-module_content__qShUk"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var MappingDetailsSidebar = function MappingDetailsSidebar(_ref) {
  var onDelete = _ref.onDelete,
      onClose = _ref.onClose,
      onEditEnum = _ref.onEditEnum,
      isEnumMapping = _ref.isEnumMapping,
      children = _ref.children;
  return React__default.createElement(reactCore.Stack, {
    "data-testid": "column-mapping-details-area"
  }, React__default.createElement(reactCore.StackItem, null, React__default.createElement(ColumnHeader, {
    title: 'Mapping Details',
    variant: 'plain',
    actions: [React__default.createElement(reactCore.Button, {
      onClick: onClose,
      variant: 'plain',
      "aria-label": "Close the mapping details panel",
      "data-testid": 'close-mapping-detail-button',
      key: 'close'
    }, React__default.createElement(reactIcons.CloseIcon, null)), React__default.createElement(reactCore.Tooltip, {
      key: 'edit-enum',
      position: 'auto',
      enableFlip: true,
      content: React__default.createElement("div", null, "Edit the enumeration mappings"),
      entryDelay: 750,
      exitDelay: 100
    }, React__default.createElement(reactCore.Button, {
      variant: 'plain',
      onClick: onEditEnum,
      "aria-label": "Edit the enumeration mappings",
      "data-testid": 'edit-enum-mapping-button',
      isDisabled: !isEnumMapping()
    }, React__default.createElement(reactIcons.EditIcon, null))), React__default.createElement(reactCore.Tooltip, {
      key: 'remove',
      position: 'auto',
      enableFlip: true,
      content: React__default.createElement("div", null, "Remove the current mapping"),
      entryDelay: 750,
      exitDelay: 100
    }, React__default.createElement(reactCore.Button, {
      variant: 'plain',
      onClick: onDelete,
      "aria-label": "Remove the current mapping",
      "data-testid": 'remove-current-mapping-button'
    }, React__default.createElement(reactIcons.TrashIcon, null)))]
  })), React__default.createElement(reactCore.StackItem, {
    isFilled: true,
    className: styles$w.content
  }, children));
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var CaptureDocumentIDAction = function CaptureDocumentIDAction(_ref) {
  var id = _ref.id,
      onClick = _ref.onClick;
  return React__default.createElement(reactCore.Tooltip, {
    position: 'auto',
    enableFlip: true,
    content: React__default.createElement("div", null, "Capture Document ID to clipboard")
  }, React__default.createElement(reactCore.Button, {
    variant: "plain",
    onClick: onClick,
    "aria-label": "Capture Document ID to clipboard",
    "data-testid": "capture-" + id + "-name-button"
  }, React__default.createElement(reactIcons.ClipboardIcon, null)));
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var ChangeDocumentNameAction = function ChangeDocumentNameAction(_ref) {
  var id = _ref.id,
      onClick = _ref.onClick;
  return React__default.createElement(reactCore.Tooltip, {
    position: 'auto',
    enableFlip: true,
    content: React__default.createElement("div", null, "Change document name")
  }, React__default.createElement(reactCore.Button, {
    variant: "plain",
    onClick: onClick,
    "aria-label": "Change document name",
    "data-testid": "change-" + id + "-name-button"
  }, React__default.createElement(reactIcons.EditIcon, null)));
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var DeleteDocumentAction = function DeleteDocumentAction(_ref) {
  var id = _ref.id,
      onClick = _ref.onClick;
  return React__default.createElement(reactCore.Tooltip, {
    position: 'auto',
    enableFlip: true,
    content: React__default.createElement("div", null, "Remove instance or schema file")
  }, React__default.createElement(reactCore.Button, {
    variant: "plain",
    onClick: onClick,
    "aria-label": "Remove instance or schema file",
    "data-testid": "remove-" + id + "-instance-or-schema-file-button"
  }, React__default.createElement(reactIcons.TrashIcon, null)));
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var DeleteMappingAction = function DeleteMappingAction(_ref) {
  var id = _ref.id,
      onClick = _ref.onClick;
  return React__default.createElement(reactCore.Tooltip, {
    position: 'auto',
    enableFlip: true,
    content: React__default.createElement("div", null, "Remove the mapping")
  }, React__default.createElement(reactCore.Button, {
    variant: "plain",
    onClick: onClick,
    "aria-label": "Remove the mapping",
    "data-testid": "remove-" + id + "-mapping-button"
  }, React__default.createElement(reactIcons.TrashIcon, null)));
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var EditCSVParamsAction = function EditCSVParamsAction(_ref) {
  var id = _ref.id,
      onClick = _ref.onClick;
  return React__default.createElement(reactCore.Tooltip, {
    position: 'auto',
    enableFlip: true,
    content: React__default.createElement("div", null, "Modify CSV Parameters")
  }, React__default.createElement(reactCore.Button, {
    variant: "plain",
    onClick: onClick,
    "aria-label": "Modify CSV parameters",
    "data-testid": "modify-csv-params-" + id + "-button"
  }, React__default.createElement(reactIcons.EditIcon, null)));
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var EditMappingAction = function EditMappingAction(_ref) {
  var id = _ref.id,
      onClick = _ref.onClick;
  return React__default.createElement(reactCore.Tooltip, {
    position: 'auto',
    enableFlip: true,
    content: React__default.createElement("div", null, "Modify the mapping")
  }, React__default.createElement(reactCore.Button, {
    variant: "plain",
    onClick: onClick,
    "aria-label": "Modify the mapping",
    "data-testid": "modify-the-mapping-" + id + "-button"
  }, React__default.createElement(reactIcons.ExchangeAltIcon, null)));
};

var EnableJavaClassAction = function EnableJavaClassAction(_ref) {
  var onCustomClassSearch = _ref.onCustomClassSearch,
      props = _objectWithoutPropertiesLoose(_ref, ["onCustomClassSearch"]);

  function onEnableClassSearch() {
    onCustomClassSearch();
  }

  return React__default.createElement(reactCore.Tooltip, {
    position: 'auto',
    enableFlip: true,
    content: React__default.createElement("div", null, "Load a Java document based on classes from your previously imported Java archive.")
  }, React__default.createElement(reactCore.Button, Object.assign({
    variant: "plain",
    onClick: onEnableClassSearch,
    "aria-label": "Load a Java document based on classes from your previously imported Java archive."
  }, props), React__default.createElement(reactIcons.AddCircleOIcon, null)));
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var ImportAction = function ImportAction(_ref) {
  var id = _ref.id,
      onImport = _ref.onImport;

  var _useFilePicker = reactSage.useFilePicker({
    maxFileSize: 1
  }),
      files = _useFilePicker.files,
      onClick = _useFilePicker.onClick,
      HiddenFileInput = _useFilePicker.HiddenFileInput;

  var previouslyUploadedFiles = React.useRef(null);
  React.useEffect(function () {
    if (previouslyUploadedFiles.current !== files) {
      previouslyUploadedFiles.current = files;

      if ((files === null || files === void 0 ? void 0 : files.length) === 1) {
        onImport(files[0]);
      }
    }
  }, [files, onImport]);
  return React__default.createElement(reactCore.Tooltip, {
    position: 'auto',
    enableFlip: true,
    content: React__default.createElement("div", null, "Import instance or schema file")
  }, React__default.createElement(reactCore.Button, {
    variant: "plain",
    "aria-label": "Import instance or schema file",
    "data-testid": "import-instance-or-schema-file-" + id + "-button",
    onClick: onClick
  }, React__default.createElement(reactIcons.ImportIcon, null), React__default.createElement(HiddenFileInput, {
    accept: '.json, .xml, .xsd, .csv'
  })));
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var SOURCES_DRAGGABLE_TYPE = 'source';
var SOURCES_HEIGHT_BOUNDARY_ID = 'sources-height';
var SOURCES_WIDTH_BOUNDARY_ID = 'sources-width';
var SOURCES_PROPERTIES_ID = 'sources-properties';
var SOURCES_CONSTANTS_ID = 'sources-constants';
var SOURCES_DOCUMENT_ID_PREFIX = 'sources-document-';
var SOURCES_FIELD_ID_PREFIX = 'sources-field-';
var MAPPINGS_DROP_TYPE = 'mapping';
var MAPPINGS_HEIGHT_BOUNDARY_ID = 'mappings-height';
var MAPPINGS_WIDTH_BOUNDARY_ID = 'mappings-width';
var MAPPINGS_DOCUMENT_ID_PREFIX = 'mappings-document-';
var MAPPINGS_FIELD_ID_PREFIX = 'mappings-field-';
var TARGETS_DRAGGABLE_TYPE = 'target';
var TARGETS_HEIGHT_BOUNDARY_ID = 'targets-height';
var TARGETS_PROPERTIES_ID = 'targets-properties';
var TARGETS_WIDTH_BOUNDARY_ID = 'targets-width';
var TARGETS_DOCUMENT_ID_PREFIX = 'targets-document-';
var TARGETS_FIELD_ID_PREFIX = 'targets-field-';

var TreeGroupAndNodeRefsAndDnD = function TreeGroupAndNodeRefsAndDnD(_ref) {
  var fieldId = _ref.fieldId,
      group = _ref.group,
      showTypes = _ref.showTypes,
      boundaryId = _ref.boundaryId,
      overrideWidth = _ref.overrideWidth,
      parentId = _ref.parentId,
      acceptDropType = _ref.acceptDropType,
      draggableType = _ref.draggableType,
      _ref$level = _ref.level,
      level = _ref$level === void 0 ? 1 : _ref$level,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? 1 : _ref$position,
      _ref$setSize = _ref.setSize,
      setSize = _ref$setSize === void 0 ? 1 : _ref$setSize,
      children = _ref.children;
  return React__default.createElement(FieldDropTarget, {
    key: fieldId,
    target: {
      id: group.id,
      name: group.name,
      type: draggableType
    },
    canDrop: function canDrop() {
      return false;
    },
    accept: [acceptDropType]
  }, function (_ref2) {
    var isOver = _ref2.isOver;
    return React__default.createElement(DelayedBoolean, {
      value: isOver
    }, function (isOver) {
      return React__default.createElement(NodeRef, {
        id: fieldId,
        parentId: parentId,
        boundaryId: boundaryId,
        overrideWidth: overrideWidth
      }, React__default.createElement(TreeGroup, {
        id: fieldId,
        level: level,
        position: position,
        setSize: setSize,
        expanded: isOver === true ? true : undefined,
        renderLabel: function renderLabel(_ref3) {
          var expanded = _ref3.expanded;
          return React__default.createElement(DocumentGroup, {
            name: group.name,
            type: group.type,
            showType: showTypes,
            icon: group.isCollection ? React__default.createElement(reactIcons.LayerGroupIcon, null) : undefined,
            iconTooltip: group.isCollection ? 'This object is a collection' : undefined,
            expanded: isOver || expanded
          });
        }
      }, children));
    });
  });
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var TreeItemWithFieldAndNodeRefsAndDnD = function TreeItemWithFieldAndNodeRefsAndDnD(_ref) {
  var fieldId = _ref.fieldId,
      field = _ref.field,
      showTypes = _ref.showTypes,
      boundaryId = _ref.boundaryId,
      overrideWidth = _ref.overrideWidth,
      parentId = _ref.parentId,
      acceptDropType = _ref.acceptDropType,
      draggableType = _ref.draggableType,
      _ref$level = _ref.level,
      level = _ref$level === void 0 ? 1 : _ref$level,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? 1 : _ref$position,
      _ref$setSize = _ref.setSize,
      setSize = _ref$setSize === void 0 ? 1 : _ref$setSize,
      _canDrop = _ref.canDrop,
      _onDrop = _ref.onDrop,
      _ref$renderActions = _ref.renderActions,
      renderActions = _ref$renderActions === void 0 ? function () {
    return [];
  } : _ref$renderActions,
      renderPreview = _ref.renderPreview;
  var preview = renderPreview && renderPreview(field);
  return React__default.createElement(FieldDropTarget, {
    key: fieldId,
    target: {
      id: field.id,
      name: field.name,
      type: draggableType,
      payload: field
    },
    canDrop: function canDrop(item) {
      return _canDrop(field, item);
    },
    accept: [acceptDropType]
  }, function (_ref2) {
    var isDroppable = _ref2.isDroppable,
        isTarget = _ref2.isTarget;
    return React__default.createElement(DraggableField, {
      field: {
        type: draggableType,
        id: field.id,
        name: field.name,
        payload: field
      },
      onDrop: function onDrop(_, target) {
        return _onDrop(field, target);
      }
    }, function (_ref3) {
      var isDragging = _ref3.isDragging;
      return React__default.createElement(NodeRef, {
        id: [fieldId, isDragging ? 'dnd-start' : undefined, isTarget ? 'dnd-target-field' : undefined],
        parentId: parentId,
        boundaryId: boundaryId,
        overrideWidth: overrideWidth
      }, React__default.createElement(TreeItem, {
        level: level,
        position: position,
        setSize: setSize
      }, function (_ref4) {
        var focused = _ref4.focused;
        return React__default.createElement(React__default.Fragment, null, React__default.createElement(DocumentField, {
          name: field.name,
          icon: isDroppable || isTarget ? React__default.createElement(reactCore.Button, {
            variant: isTarget ? 'link' : 'plain',
            tabIndex: -1,
            "aria-label": 'Drop target',
            isDisabled: !isDroppable,
            "data-testid": "is-droppable-" + field.name + "-button"
          }, React__default.createElement(reactIcons.BullseyeIcon, {
            size: "sm"
          })) : React__default.createElement(reactCore.Button, {
            variant: 'plain',
            tabIndex: -1,
            "aria-hidden": true,
            "data-testid": "grip-" + field.name + "-button"
          }, React__default.createElement(reactIcons.GripVerticalIcon, null)),
          type: field.enumeration ? 'ENUM' : field.type,
          scope: field.scope,
          showType: showTypes,
          isDragging: isDragging,
          isFocused: focused,
          isSelected: !!preview,
          isDisabled: field.isDisabled,
          statusIcons: [field.isConnected ? React__default.createElement(reactCore.Tooltip, {
            key: "connected",
            position: 'auto',
            enableFlip: true,
            entryDelay: 750,
            exitDelay: 100,
            content: React__default.createElement("div", null, "This field is connected")
          }, React__default.createElement(reactIcons.CircleIcon, {
            label: 'This field is connected',
            size: "sm",
            tabIndex: -1
          })) : null, field.isCollection ? React__default.createElement(reactCore.Tooltip, {
            key: 'collection',
            position: 'auto',
            enableFlip: true,
            entryDelay: 750,
            exitDelay: 100,
            content: React__default.createElement("div", null, "This field is a collection")
          }, React__default.createElement(reactIcons.LayerGroupIcon, {
            label: 'This field is a collection',
            size: "sm",
            tabIndex: -1
          })) : null, field.hasTransformations ? React__default.createElement(reactCore.Tooltip, {
            key: 'transformations',
            position: 'auto',
            enableFlip: true,
            entryDelay: 750,
            exitDelay: 100,
            content: React__default.createElement("div", null, "This field has transformations")
          }, React__default.createElement(reactIcons.BoltIcon, {
            label: 'This field has transformations',
            size: "sm",
            tabIndex: -1
          })) : null, field.isAttribute ? React__default.createElement(reactCore.Tooltip, {
            key: 'attribute',
            position: 'auto',
            enableFlip: true,
            entryDelay: 750,
            exitDelay: 100,
            content: React__default.createElement("div", null, "This field is an attribute")
          }, React__default.createElement(reactIcons.AtIcon, {
            label: 'This field is an attribute',
            size: "sm",
            tabIndex: -1
          })) : null],
          actions: renderActions(field)
        }, preview));
      }));
    });
  });
};

function getChildrenIds(fields, idPrefix) {
  return fields.reduce(function (ids, f) {
    return [].concat(ids, ["" + idPrefix + f.id], f.fields ? getChildrenIds(f.fields, idPrefix) : []);
  }, []);
}

var TraverseFields = function TraverseFields(_ref) {
  var fields = _ref.fields,
      idPrefix = _ref.idPrefix,
      _ref$isVisible = _ref.isVisible,
      isVisible = _ref$isVisible === void 0 ? true : _ref$isVisible,
      props = _objectWithoutPropertiesLoose(_ref, ["fields", "idPrefix", "isVisible"]);

  return isVisible ? React__default.createElement(React__default.Fragment, null, fields.map(function (field, idx) {
    return React__default.createElement(FieldOrGroup, Object.assign({
      key: idx,
      field: field,
      idPrefix: idPrefix,
      setSize: fields.length,
      position: idx + 1,
      isVisible: isVisible
    }, props));
  })) : React__default.createElement(NodeRef, {
    id: getChildrenIds(fields, idPrefix),
    boundaryId: props.boundaryId,
    parentId: props.parentId
  }, React__default.createElement("div", null, "\xA0"));
};

var FieldOrGroup = function FieldOrGroup(_ref2) {
  var field = _ref2.field,
      idPrefix = _ref2.idPrefix,
      _ref2$level = _ref2.level,
      level = _ref2$level === void 0 ? 1 : _ref2$level,
      props = _objectWithoutPropertiesLoose(_ref2, ["field", "idPrefix", "level"]);

  var fieldId = "" + idPrefix + field.id;
  var maybeGroup = field;
  var maybeField = field;

  if (maybeGroup.fields) {
    return React__default.createElement(TreeGroupAndNodeRefsAndDnD, Object.assign({
      fieldId: fieldId,
      group: maybeGroup,
      level: level
    }, props), function (_ref3) {
      var expanded = _ref3.expanded;
      return React__default.createElement(TraverseFields, Object.assign({}, props
      /* spreading the props must be done before everything else so to override the values fed to the Group */
      , {
        fields: maybeGroup.fields,
        parentId: fieldId,
        level: level + 1,
        idPrefix: idPrefix,
        isVisible: expanded
      }));
    });
  }

  return React__default.createElement(TreeItemWithFieldAndNodeRefsAndDnD, Object.assign({
    fieldId: fieldId,
    field: maybeField,
    level: level
  }, props));
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function commonActions(_ref) {
  var connectedMappings = _ref.connectedMappings,
      onShowMappingDetails = _ref.onShowMappingDetails,
      canAddFieldToSelectedMapping = _ref.canAddFieldToSelectedMapping,
      onAddToSelectedMapping = _ref.onAddToSelectedMapping,
      canRemoveFromSelectedMapping = _ref.canRemoveFromSelectedMapping,
      onRemoveFromSelectedMapping = _ref.onRemoveFromSelectedMapping,
      canStartMapping = _ref.canStartMapping,
      onStartMapping = _ref.onStartMapping;
  return [React__default.createElement(reactCore.Tooltip, {
    key: 'select-mapping',
    position: 'top',
    enableFlip: true,
    content: React__default.createElement("div", null, "Show mapping details")
  }, connectedMappings.length > 1 ? React__default.createElement(AutoDropdown, {
    toggle: function toggle(_ref2) {
      var toggleOpen = _ref2.toggleOpen;
      return React__default.createElement(reactCore.DropdownToggle, {
        toggleIndicator: null,
        "aria-label": "Show mapping details",
        onToggle: toggleOpen
      }, React__default.createElement(reactIcons.ExchangeAltIcon, null));
    },
    isPlain: true,
    position: 'right',
    dropdownItems: connectedMappings.map(function (m) {
      return React__default.createElement(reactCore.DropdownItem, {
        key: m.id,
        onClick: function onClick() {
          return onShowMappingDetails(m);
        }
      }, React__default.createElement(reactCore.Title, {
        headingLevel: "h2",
        size: "lg"
      }, m.name), React__default.createElement(reactCore.Split, {
        hasGutter: true
      }, React__default.createElement(reactCore.SplitItem, null, React__default.createElement(reactCore.Title, {
        headingLevel: "h2",
        size: "md"
      }, "Sources"), m.sourceFields.map(function (s) {
        return React__default.createElement("div", {
          key: s.id
        }, s.name);
      })), React__default.createElement(reactCore.SplitItem, null, React__default.createElement(reactCore.Title, {
        headingLevel: "h2",
        size: "md"
      }, "Targets"), m.targetFields.map(function (t) {
        return React__default.createElement("div", {
          key: t.id
        }, t.name);
      }))));
    }),
    disabled: connectedMappings.length === 0
  }) : React__default.createElement(reactCore.Button, {
    variant: "plain",
    onClick: function onClick() {
      return onShowMappingDetails(connectedMappings[0]);
    },
    "aria-label": "Show mapping details",
    tabIndex: 0,
    isDisabled: connectedMappings.length === 0,
    "data-testid": 'show-mapping-details-button'
  }, React__default.createElement(reactIcons.ExchangeAltIcon, null))), canRemoveFromSelectedMapping ? React__default.createElement(reactCore.Tooltip, {
    key: 'quick-remove',
    position: 'top',
    enableFlip: true,
    content: React__default.createElement("div", null, "Disconnect from the selected mapping")
  }, React__default.createElement(reactCore.Button, {
    variant: "plain",
    onClick: onRemoveFromSelectedMapping,
    "aria-label": 'Disconnect from the selected mapping',
    "data-testid": 'disconnect-from-the-selected-mapping-button',
    tabIndex: 0
  }, React__default.createElement(reactIcons.UnlinkIcon, null))) : React__default.createElement(reactCore.Tooltip, {
    key: 'quick-add',
    position: 'top',
    enableFlip: true,
    content: React__default.createElement("div", null, "Connect to the selected mapping")
  }, React__default.createElement(reactCore.Button, {
    variant: "plain",
    onClick: onAddToSelectedMapping,
    "aria-label": 'Connect to the selected mapping',
    tabIndex: 0,
    isDisabled: !canAddFieldToSelectedMapping,
    "data-testid": 'connect-to-the-selected-mapping-button'
  }, React__default.createElement(reactIcons.LinkIcon, null))), React__default.createElement(reactCore.Tooltip, {
    key: 'add',
    position: 'top',
    enableFlip: true,
    content: React__default.createElement("div", null, "Create new mapping")
  }, React__default.createElement(reactCore.Button, {
    variant: "plain",
    onClick: onStartMapping,
    "aria-label": 'Create new mapping',
    tabIndex: 0,
    isDisabled: !canStartMapping,
    "data-testid": 'create-new-mapping-button'
  }, React__default.createElement(reactIcons.ProjectDiagramIcon, null)))];
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var ConstantsTree = function ConstantsTree(_ref) {
  var fields = _ref.fields,
      onDrop = _ref.onDrop,
      canDrop = _ref.canDrop,
      onShowMappingDetails = _ref.onShowMappingDetails,
      canAddFieldToSelectedMapping = _ref.canAddFieldToSelectedMapping,
      _onAddToSelectedMapping = _ref.onAddToSelectedMapping,
      canRemoveFromSelectedMapping = _ref.canRemoveFromSelectedMapping,
      _onRemoveFromSelectedMapping = _ref.onRemoveFromSelectedMapping,
      onEditConstant = _ref.onEditConstant,
      onDeleteConstant = _ref.onDeleteConstant,
      canStartMapping = _ref.canStartMapping,
      _onStartMapping = _ref.onStartMapping,
      renderPreview = _ref.renderPreview;
  return React__default.createElement(Tree, null, React__default.createElement(TraverseFields, {
    fields: fields,
    showTypes: false,
    parentId: SOURCES_CONSTANTS_ID,
    boundaryId: SOURCES_HEIGHT_BOUNDARY_ID,
    overrideWidth: SOURCES_WIDTH_BOUNDARY_ID,
    idPrefix: SOURCES_FIELD_ID_PREFIX,
    acceptDropType: TARGETS_DRAGGABLE_TYPE,
    draggableType: SOURCES_DRAGGABLE_TYPE,
    onDrop: onDrop,
    canDrop: canDrop,
    renderActions: function renderActions(field) {
      return [].concat(commonActions({
        connectedMappings: field.mappings,
        onShowMappingDetails: onShowMappingDetails,
        canAddFieldToSelectedMapping: canAddFieldToSelectedMapping(field),
        onAddToSelectedMapping: function onAddToSelectedMapping() {
          return _onAddToSelectedMapping(field);
        },
        canRemoveFromSelectedMapping: canRemoveFromSelectedMapping(field),
        onRemoveFromSelectedMapping: function onRemoveFromSelectedMapping() {
          return _onRemoveFromSelectedMapping(field);
        },
        canStartMapping: canStartMapping(field),
        onStartMapping: function onStartMapping() {
          return _onStartMapping(field);
        }
      }), [React__default.createElement(reactCore.Tooltip, {
        key: 'edit',
        position: 'top',
        enableFlip: true,
        content: React__default.createElement("div", null, "Edit constant"),
        entryDelay: 750,
        exitDelay: 100
      }, React__default.createElement(reactCore.Button, {
        variant: "plain",
        onClick: function onClick() {
          return onEditConstant(field.name, field.value);
        },
        "aria-label": 'Edit constant',
        tabIndex: 0,
        "data-testid": "edit-constant-" + field.name + "-button"
      }, React__default.createElement(reactIcons.EditIcon, null))), React__default.createElement(reactCore.Tooltip, {
        key: 'delete',
        position: 'top',
        enableFlip: true,
        content: React__default.createElement("div", null, "Remove constant"),
        entryDelay: 750,
        exitDelay: 100
      }, React__default.createElement(reactCore.Button, {
        variant: "plain",
        onClick: function onClick() {
          return onDeleteConstant(field.name);
        },
        "aria-label": 'Remove constant',
        tabIndex: 0,
        "data-testid": "remove-constant-" + field.name + "-button"
      }, React__default.createElement(reactIcons.TrashIcon, null)))]);
    },
    renderPreview: renderPreview
  }));
};

var PropertiesTree = function PropertiesTree(_ref) {
  var acceptDropType = _ref.acceptDropType,
      draggableType = _ref.draggableType,
      isSource = _ref.isSource,
      fields = _ref.fields,
      showTypes = _ref.showTypes,
      onDrop = _ref.onDrop,
      canDrop = _ref.canDrop,
      onShowMappingDetails = _ref.onShowMappingDetails,
      canAddFieldToSelectedMapping = _ref.canAddFieldToSelectedMapping,
      _onAddToSelectedMapping = _ref.onAddToSelectedMapping,
      canRemoveFromSelectedMapping = _ref.canRemoveFromSelectedMapping,
      _onRemoveFromSelectedMapping = _ref.onRemoveFromSelectedMapping,
      onEditProperty = _ref.onEditProperty,
      onDeleteProperty = _ref.onDeleteProperty,
      canStartMapping = _ref.canStartMapping,
      _onStartMapping = _ref.onStartMapping,
      renderPreview = _ref.renderPreview;
  return React__default.createElement(Tree, null, React__default.createElement(TraverseFields, {
    fields: fields,
    showTypes: showTypes,
    parentId: isSource ? SOURCES_PROPERTIES_ID : TARGETS_PROPERTIES_ID,
    boundaryId: isSource ? SOURCES_HEIGHT_BOUNDARY_ID : TARGETS_HEIGHT_BOUNDARY_ID,
    overrideWidth: isSource ? SOURCES_WIDTH_BOUNDARY_ID : TARGETS_WIDTH_BOUNDARY_ID,
    idPrefix: isSource ? SOURCES_FIELD_ID_PREFIX : TARGETS_FIELD_ID_PREFIX,
    acceptDropType: acceptDropType,
    draggableType: draggableType,
    onDrop: onDrop,
    canDrop: canDrop,
    renderActions: function renderActions(field) {
      return [].concat(commonActions({
        connectedMappings: field.mappings,
        onShowMappingDetails: onShowMappingDetails,
        canAddFieldToSelectedMapping: canAddFieldToSelectedMapping(field),
        onAddToSelectedMapping: function onAddToSelectedMapping() {
          return _onAddToSelectedMapping(field);
        },
        canRemoveFromSelectedMapping: canRemoveFromSelectedMapping(field),
        onRemoveFromSelectedMapping: function onRemoveFromSelectedMapping() {
          return _onRemoveFromSelectedMapping(field);
        },
        canStartMapping: canStartMapping(field),
        onStartMapping: function onStartMapping() {
          return _onStartMapping(field);
        }
      }), [React__default.createElement(reactCore.Tooltip, {
        key: 'edit',
        position: 'top',
        enableFlip: true,
        content: React__default.createElement("div", null, "Edit property"),
        entryDelay: 750,
        exitDelay: 100
      }, React__default.createElement(reactCore.Button, {
        variant: "plain",
        onClick: function onClick() {
          return onEditProperty(field.name, field.scope, isSource);
        },
        "aria-label": 'Edit property',
        tabIndex: 0,
        "data-testid": "edit-property-" + field.name + "-button"
      }, React__default.createElement(reactIcons.EditIcon, null))), React__default.createElement(reactCore.Tooltip, {
        key: 'delete',
        position: 'top',
        enableFlip: true,
        content: React__default.createElement("div", null, "Remove property"),
        entryDelay: 750,
        exitDelay: 100
      }, React__default.createElement(reactCore.Button, {
        variant: "plain",
        onClick: function onClick() {
          return onDeleteProperty(field.name, field.scope, isSource);
        },
        "aria-label": 'Remove property',
        tabIndex: 0,
        "data-testid": "remove-property-" + field.name + "-button"
      }, React__default.createElement(reactIcons.TrashIcon, null)))]);
    },
    renderPreview: renderPreview
  }));
};

var SourcesColumn = function SourcesColumn(_ref) {
  var acceptDropType = _ref.acceptDropType,
      draggableType = _ref.draggableType,
      isSource = _ref.isSource,
      onCreateConstant = _ref.onCreateConstant,
      onEditConstant = _ref.onEditConstant,
      onDeleteConstant = _ref.onDeleteConstant,
      onCreateProperty = _ref.onCreateProperty,
      _onCustomClassSearch = _ref.onCustomClassSearch,
      onEditProperty = _ref.onEditProperty,
      onDeleteProperty = _ref.onDeleteProperty,
      onImportDocument = _ref.onImportDocument,
      onDeleteDocument = _ref.onDeleteDocument,
      onCaptureDocumentID = _ref.onCaptureDocumentID,
      onChangeDocumentName = _ref.onChangeDocumentName,
      onEditCSVParams = _ref.onEditCSVParams,
      onSearch = _ref.onSearch,
      canDrop = _ref.canDrop,
      onDrop = _ref.onDrop,
      onShowMappingDetails = _ref.onShowMappingDetails,
      canAddFieldToSelectedMapping = _ref.canAddFieldToSelectedMapping,
      _onAddToSelectedMapping = _ref.onAddToSelectedMapping,
      canRemoveFromSelectedMapping = _ref.canRemoveFromSelectedMapping,
      _onRemoveFromSelectedMapping = _ref.onRemoveFromSelectedMapping,
      canStartMapping = _ref.canStartMapping,
      _onStartMapping = _ref.onStartMapping,
      shouldShowMappingPreviewForField = _ref.shouldShowMappingPreviewForField,
      onFieldPreviewChange = _ref.onFieldPreviewChange,
      sourceProperties = _ref.sourceProperties,
      constants = _ref.constants,
      sources = _ref.sources,
      showTypes = _ref.showTypes;
  var renderPreview = React.useCallback(function (field) {
    return shouldShowMappingPreviewForField(field) && React__default.createElement(DocumentFieldPreview, {
      id: field.id,
      value: field.value,
      onChange: function onChange(value) {
        return onFieldPreviewChange(field, value);
      }
    });
  }, [onFieldPreviewChange, shouldShowMappingPreviewForField]);
  return React__default.createElement(React__default.Fragment, null, React__default.createElement(SearchableColumnHeader, {
    title: 'Source',
    onSearch: onSearch,
    actions: [onImportDocument && React__default.createElement(ImportAction, {
      id: "Source",
      onImport: onImportDocument,
      key: 'import'
    }), _onCustomClassSearch && React__default.createElement(EnableJavaClassAction, {
      onCustomClassSearch: function onCustomClassSearch() {
        return _onCustomClassSearch(true);
      },
      "data-testid": 'enable-specific-java-classes-Source-button',
      key: 'java'
    })]
  }), React__default.createElement(NodeRef, {
    id: SOURCES_HEIGHT_BOUNDARY_ID
  }, React__default.createElement(ColumnBody, null, React__default.createElement(NodeRef, {
    id: SOURCES_WIDTH_BOUNDARY_ID
  }, React__default.createElement("div", null, React__default.createElement(NodeRef, {
    id: SOURCES_PROPERTIES_ID,
    boundaryId: SOURCES_HEIGHT_BOUNDARY_ID,
    overrideWidth: SOURCES_WIDTH_BOUNDARY_ID
  }, React__default.createElement(Document, {
    title: 'Properties',
    startExpanded: sourceProperties ? true : false,
    actions: [React__default.createElement(reactCore.Tooltip, {
      position: 'top',
      enableFlip: true,
      content: React__default.createElement("div", null, "Create a source property for use in mapping"),
      key: 'create-property',
      entryDelay: 750,
      exitDelay: 100
    }, React__default.createElement(reactCore.Button, {
      onClick: function onClick() {
        return onCreateProperty(isSource);
      },
      variant: 'plain',
      "aria-label": "Create a source property for use in mapping",
      "data-testid": "create-source-property-button"
    }, React__default.createElement(reactIcons.PlusIcon, null)))],
    noPadding: !!sourceProperties
  }, sourceProperties ? React__default.createElement(PropertiesTree, {
    acceptDropType: acceptDropType,
    draggableType: draggableType,
    isSource: isSource,
    onEditProperty: onEditProperty,
    onDeleteProperty: onDeleteProperty,
    canDrop: canDrop,
    onDrop: onDrop,
    onShowMappingDetails: onShowMappingDetails,
    canAddFieldToSelectedMapping: canAddFieldToSelectedMapping,
    onAddToSelectedMapping: _onAddToSelectedMapping,
    canRemoveFromSelectedMapping: canRemoveFromSelectedMapping,
    onRemoveFromSelectedMapping: _onRemoveFromSelectedMapping,
    canStartMapping: canStartMapping,
    onStartMapping: _onStartMapping,
    fields: sourceProperties.fields,
    showTypes: showTypes,
    renderPreview: renderPreview
  }) : 'No source properties')), React__default.createElement(NodeRef, {
    id: SOURCES_CONSTANTS_ID,
    boundaryId: SOURCES_HEIGHT_BOUNDARY_ID,
    overrideWidth: SOURCES_WIDTH_BOUNDARY_ID
  }, React__default.createElement(Document, {
    title: 'Constants',
    startExpanded: constants ? true : false,
    actions: [React__default.createElement(reactCore.Tooltip, {
      position: 'top',
      enableFlip: true,
      content: React__default.createElement("div", null, "Create a constant for use in mapping"),
      key: 'create-constant',
      entryDelay: 750,
      exitDelay: 100
    }, React__default.createElement(reactCore.Button, {
      onClick: onCreateConstant,
      variant: 'plain',
      "aria-label": "Create a constant for use in mapping",
      "data-testid": "create-constant-button"
    }, React__default.createElement(reactIcons.PlusIcon, null)))],
    noPadding: !!constants
  }, constants ? React__default.createElement(ConstantsTree, {
    onEditConstant: onEditConstant,
    onDeleteConstant: onDeleteConstant,
    canDrop: canDrop,
    onDrop: onDrop,
    onShowMappingDetails: onShowMappingDetails,
    canAddFieldToSelectedMapping: canAddFieldToSelectedMapping,
    onAddToSelectedMapping: _onAddToSelectedMapping,
    canRemoveFromSelectedMapping: canRemoveFromSelectedMapping,
    onRemoveFromSelectedMapping: _onRemoveFromSelectedMapping,
    canStartMapping: canStartMapping,
    onStartMapping: _onStartMapping,
    fields: constants.fields,
    renderPreview: renderPreview
  }) : React__default.createElement("p", null, "No constants"))), sources.map(function (s) {
    var documentId = "" + SOURCES_DOCUMENT_ID_PREFIX + s.id;
    return React__default.createElement(NodeRef, {
      key: s.id,
      id: documentId,
      boundaryId: SOURCES_HEIGHT_BOUNDARY_ID,
      overrideWidth: SOURCES_WIDTH_BOUNDARY_ID
    }, React__default.createElement(Document, {
      title: s.name,
      startExpanded: true,
      footer: showTypes ? React__default.createElement(DocumentFooter, null, "Source document type: ", s.type) : undefined,
      actions: s.type === core.DocumentType.CSV ? [onCaptureDocumentID && React__default.createElement(CaptureDocumentIDAction, {
        id: documentId,
        onClick: function onClick() {
          return onCaptureDocumentID(s.id);
        },
        key: 'capture-document-id'
      }), onEditCSVParams && React__default.createElement(EditCSVParamsAction, {
        id: documentId,
        onClick: function onClick() {
          return onEditCSVParams(s.id, true);
        },
        key: 'on-edit-csv-params'
      }), onDeleteDocument && React__default.createElement(DeleteDocumentAction, {
        id: documentId,
        onClick: function onClick() {
          return onDeleteDocument(s.id);
        },
        key: 'delete-document'
      })] : [onCaptureDocumentID && React__default.createElement(CaptureDocumentIDAction, {
        id: documentId,
        onClick: function onClick() {
          return onCaptureDocumentID(s.id);
        },
        key: 'capture-document-id'
      }), onChangeDocumentName && React__default.createElement(ChangeDocumentNameAction, {
        id: documentId,
        onClick: function onClick() {
          return onChangeDocumentName(s.id, s.name);
        },
        key: 'change-document-name'
      }), onDeleteDocument && React__default.createElement(DeleteDocumentAction, {
        id: documentId,
        onClick: function onClick() {
          return onDeleteDocument(s.id);
        },
        key: 'delete-document'
      })],
      noPadding: true
    }, React__default.createElement(Tree, null, React__default.createElement(TraverseFields, {
      fields: s.fields,
      showTypes: showTypes,
      boundaryId: SOURCES_HEIGHT_BOUNDARY_ID,
      overrideWidth: SOURCES_WIDTH_BOUNDARY_ID,
      parentId: documentId,
      idPrefix: SOURCES_FIELD_ID_PREFIX,
      acceptDropType: acceptDropType,
      draggableType: draggableType,
      onDrop: onDrop,
      canDrop: canDrop,
      renderActions: function renderActions(field) {
        return commonActions({
          connectedMappings: field.mappings,
          onShowMappingDetails: onShowMappingDetails,
          canAddFieldToSelectedMapping: canAddFieldToSelectedMapping(field),
          onAddToSelectedMapping: function onAddToSelectedMapping() {
            return _onAddToSelectedMapping(field);
          },
          canRemoveFromSelectedMapping: canRemoveFromSelectedMapping(field),
          onRemoveFromSelectedMapping: function onRemoveFromSelectedMapping() {
            return _onRemoveFromSelectedMapping(field);
          },
          canStartMapping: canStartMapping(field),
          onStartMapping: function onStartMapping() {
            return _onStartMapping(field);
          }
        });
      },
      renderPreview: renderPreview
    }))));
  }))))));
};

var TargetsColumn = function TargetsColumn(_ref) {
  var acceptDropType = _ref.acceptDropType,
      draggableType = _ref.draggableType,
      isSource = _ref.isSource,
      onSearch = _ref.onSearch,
      onImportDocument = _ref.onImportDocument,
      onDeleteDocument = _ref.onDeleteDocument,
      onCaptureDocumentID = _ref.onCaptureDocumentID,
      onChangeDocumentName = _ref.onChangeDocumentName,
      _onCustomClassSearch = _ref.onCustomClassSearch,
      onCreateProperty = _ref.onCreateProperty,
      onEditCSVParams = _ref.onEditCSVParams,
      onEditProperty = _ref.onEditProperty,
      onDeleteProperty = _ref.onDeleteProperty,
      onDrop = _ref.onDrop,
      canDrop = _ref.canDrop,
      onShowMappingDetails = _ref.onShowMappingDetails,
      canAddFieldToSelectedMapping = _ref.canAddFieldToSelectedMapping,
      _onAddToSelectedMapping = _ref.onAddToSelectedMapping,
      canRemoveFromSelectedMapping = _ref.canRemoveFromSelectedMapping,
      _onRemoveFromSelectedMapping = _ref.onRemoveFromSelectedMapping,
      canStartMapping = _ref.canStartMapping,
      _onStartMapping = _ref.onStartMapping,
      shouldShowMappingPreviewForField = _ref.shouldShowMappingPreviewForField,
      targets = _ref.targets,
      showTypes = _ref.showTypes,
      targetProperties = _ref.targetProperties;
  var renderPreviewResult = React.useCallback(function (field) {
    return shouldShowMappingPreviewForField(field) && React__default.createElement(DocumentFieldPreviewResults, {
      id: field.id,
      value: field.value
    });
  }, [shouldShowMappingPreviewForField]);
  return React__default.createElement(React__default.Fragment, null, React__default.createElement(SearchableColumnHeader, {
    title: 'Target',
    onSearch: onSearch,
    actions: [onImportDocument && React__default.createElement(ImportAction, {
      id: "Target",
      onImport: onImportDocument,
      key: 'import'
    }), _onCustomClassSearch && React__default.createElement(EnableJavaClassAction, {
      onCustomClassSearch: function onCustomClassSearch() {
        return _onCustomClassSearch(false);
      },
      "data-testid": 'enable-specific-java-classes-Target-button',
      key: 'java'
    })]
  }), React__default.createElement(NodeRef, {
    id: TARGETS_HEIGHT_BOUNDARY_ID
  }, React__default.createElement(ColumnBody, null, React__default.createElement(NodeRef, {
    id: TARGETS_WIDTH_BOUNDARY_ID
  }, React__default.createElement("div", null, React__default.createElement(NodeRef, {
    id: TARGETS_PROPERTIES_ID,
    boundaryId: TARGETS_HEIGHT_BOUNDARY_ID,
    overrideWidth: TARGETS_WIDTH_BOUNDARY_ID
  }, React__default.createElement(Document, {
    title: 'Properties',
    startExpanded: targetProperties ? true : false,
    actions: [React__default.createElement(reactCore.Tooltip, {
      position: 'top',
      enableFlip: true,
      content: React__default.createElement("div", null, "Create a target property for use in mapping"),
      key: 'create-target-property',
      entryDelay: 750,
      exitDelay: 100
    }, React__default.createElement(reactCore.Button, {
      onClick: function onClick() {
        return onCreateProperty(isSource);
      },
      variant: 'plain',
      "aria-label": "Create a target property for use in mapping",
      "data-testid": "create-target-property-button"
    }, React__default.createElement(reactIcons.PlusIcon, null)))],
    noPadding: !!targetProperties
  }, targetProperties ? React__default.createElement(PropertiesTree, {
    acceptDropType: acceptDropType,
    draggableType: draggableType,
    isSource: isSource,
    onEditProperty: onEditProperty,
    onDeleteProperty: onDeleteProperty,
    canDrop: canDrop,
    onDrop: onDrop,
    onShowMappingDetails: onShowMappingDetails,
    canAddFieldToSelectedMapping: canAddFieldToSelectedMapping,
    onAddToSelectedMapping: _onAddToSelectedMapping,
    canRemoveFromSelectedMapping: canRemoveFromSelectedMapping,
    onRemoveFromSelectedMapping: _onRemoveFromSelectedMapping,
    canStartMapping: canStartMapping,
    onStartMapping: _onStartMapping,
    fields: targetProperties.fields,
    showTypes: showTypes,
    renderPreview: renderPreviewResult
  }) : 'No target properties')), targets.map(function (t) {
    var documentId = "" + TARGETS_DOCUMENT_ID_PREFIX + t.id;
    return React__default.createElement(NodeRef, {
      key: t.id,
      id: documentId,
      boundaryId: TARGETS_HEIGHT_BOUNDARY_ID,
      overrideWidth: TARGETS_WIDTH_BOUNDARY_ID
    }, React__default.createElement(Document, {
      title: t.name,
      startExpanded: true,
      footer: showTypes ? React__default.createElement(DocumentFooter, null, "Target document type: ", t.type) : undefined,
      actions: t.type === core.DocumentType.CSV ? [onCaptureDocumentID && React__default.createElement(CaptureDocumentIDAction, {
        id: documentId,
        onClick: function onClick() {
          return onCaptureDocumentID(t.id);
        },
        key: 'capture-tgt-csv-document-id'
      }), onEditCSVParams && React__default.createElement(EditCSVParamsAction, {
        id: documentId,
        onClick: function onClick() {
          return onEditCSVParams(t.id, false);
        },
        key: 'on-edit-tgt-csv-params'
      }), onDeleteDocument && React__default.createElement(DeleteDocumentAction, {
        id: documentId,
        onClick: function onClick() {
          return onDeleteDocument(t.id);
        },
        key: 'delete-tgt-csv-document'
      })] : [onCaptureDocumentID && React__default.createElement(CaptureDocumentIDAction, {
        id: documentId,
        onClick: function onClick() {
          return onCaptureDocumentID(t.id);
        },
        key: 'capture-tgt-document-id'
      }), onChangeDocumentName && React__default.createElement(ChangeDocumentNameAction, {
        id: documentId,
        onClick: function onClick() {
          return onChangeDocumentName(t.id, t.name);
        },
        key: 'change-tgt-document-name'
      }), onDeleteDocument && React__default.createElement(DeleteDocumentAction, {
        id: documentId,
        onClick: function onClick() {
          return onDeleteDocument(t.id);
        },
        key: 'delete-tgt-documents'
      })],
      noPadding: true
    }, React__default.createElement(Tree, null, React__default.createElement(TraverseFields, {
      fields: t.fields,
      showTypes: showTypes,
      boundaryId: TARGETS_HEIGHT_BOUNDARY_ID,
      overrideWidth: TARGETS_WIDTH_BOUNDARY_ID,
      parentId: documentId,
      idPrefix: TARGETS_FIELD_ID_PREFIX,
      acceptDropType: acceptDropType,
      draggableType: draggableType,
      onDrop: onDrop,
      canDrop: canDrop,
      renderActions: function renderActions(field) {
        return commonActions({
          connectedMappings: field.mappings,
          onShowMappingDetails: onShowMappingDetails,
          canAddFieldToSelectedMapping: canAddFieldToSelectedMapping(field),
          onAddToSelectedMapping: function onAddToSelectedMapping() {
            return _onAddToSelectedMapping(field);
          },
          canRemoveFromSelectedMapping: canRemoveFromSelectedMapping(field),
          onRemoveFromSelectedMapping: function onRemoveFromSelectedMapping() {
            return _onRemoveFromSelectedMapping(field);
          },
          canStartMapping: canStartMapping(field),
          onStartMapping: function onStartMapping() {
            return _onStartMapping(field);
          }
        });
      },
      renderPreview: renderPreviewResult
    }))));
  }))))));
};

var styles$x = {"arc":"SourceTargetLinks-module_arc__2q0aJ","group":"SourceTargetLinks-module_group__3x-IA"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var SourceTargetLinks = function SourceTargetLinks(_ref) {
  var mappings = _ref.mappings,
      selectedMappingId = _ref.selectedMappingId,
      onSelectMapping = _ref.onSelectMapping;
  var sortedMappings = React.useMemo(function () {
    return mappings.sort(function (a) {
      return a.id === selectedMappingId ? 1 : -1;
    });
  }, [mappings, selectedMappingId]);
  return React__default.createElement("svg", {
    style: {
      position: 'absolute',
      top: 0,
      left: 0,
      width: '100%',
      height: '100%',
      pointerEvents: 'none'
    }
  }, sortedMappings.map(function (m) {
    return React__default.createElement(MappingLines, {
      mapping: m,
      onClick: function onClick() {
        return onSelectMapping(m);
      },
      isSelected: m.id === selectedMappingId,
      key: m.id
    });
  }), React__default.createElement(NodesArc, {
    start: 'dnd-start',
    end: 'dnd-target-field',
    color: 'var(--pf-global--active-color--400)'
  }));
};

var MappingLines = function MappingLines(_ref2) {
  var mapping = _ref2.mapping,
      isSelected = _ref2.isSelected,
      onClick = _ref2.onClick;

  var _useToggle = useToggle(false),
      isHovered = _useToggle.state,
      toggleHoveredOn = _useToggle.toggleOn,
      toggleHoveredOff = _useToggle.toggleOff;

  var handleClick = function handleClick(event) {
    onClick();
    event.stopPropagation();
  };

  var color = isSelected ? 'var(--pf-global--active-color--100)' : undefined;
  var hoverColor = !isSelected ? 'var(--pf-global--active-color--400)' : undefined;
  var mappingLines = mapping.sourceFields.reduce(function (lines, start) {
    var linesFromSource = mapping.targetFields.map(function (end) {
      return React__default.createElement(NodesArc, {
        key: "" + start.id + end.id,
        start: "" + SOURCES_FIELD_ID_PREFIX + start.id,
        end: "" + TARGETS_FIELD_ID_PREFIX + end.id,
        color: isHovered ? hoverColor : color,
        onClick: handleClick,
        onMouseEnter: toggleHoveredOn,
        onMouseLeave: toggleHoveredOff,
        className: styles$x.arc
      });
    });
    return [].concat(lines, linesFromSource);
  }, []);
  return React__default.createElement("g", {
    className: "group"
  }, mappingLines);
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var MappingDetailsView = function MappingDetailsView(_ref) {
  var notifications = _ref.notifications,
      sources = _ref.sources,
      targets = _ref.targets,
      addableSources = _ref.addableSources,
      addableTargets = _ref.addableTargets,
      showSourcesIndex = _ref.showSourcesIndex,
      showTargetsIndex = _ref.showTargetsIndex,
      onClose = _ref.onClose,
      mappingExpressionEnabled = _ref.mappingExpressionEnabled,
      onRemoveMapping = _ref.onRemoveMapping,
      onRemoveMappedField = _ref.onRemoveMappedField,
      _onIndexChange = _ref.onIndexChange,
      _onNewTransformation = _ref.onNewTransformation,
      _onTransformationChange = _ref.onTransformationChange,
      _onTransformationArgumentChange = _ref.onTransformationArgumentChange,
      _onRemoveTransformation = _ref.onRemoveTransformation,
      onAddFieldToMapping = _ref.onAddFieldToMapping,
      onNotificationRead = _ref.onNotificationRead,
      onEditEnum = _ref.onEditEnum,
      isEnumMapping = _ref.isEnumMapping,
      onCreateConstant = _ref.onCreateConstant,
      onCreateProperty = _ref.onCreateProperty,
      canAddToSelectedMapping = _ref.canAddToSelectedMapping,
      multiplicity = _ref.multiplicity;
  var formInputGroupStyle = {
    '--pf-c-form--GridGap': '0',
    marginTop: '1.0rem'
  };
  var mappingAction = multiplicity && React__default.createElement(MappingTransformation, {
    name: multiplicity.name,
    disableTransformation: mappingExpressionEnabled,
    transformationsOptions: multiplicity.transformationsOptions,
    transformationsArguments: multiplicity.transformationsArguments,
    onTransformationChange: multiplicity.onChange,
    onTransformationArgumentChange: multiplicity.onArgumentChange
  });
  var genericPaddingField = {
    id: '',
    name: 'Padding field',
    value: '',
    type: '',
    scope: 'current',
    path: '',
    mappings: [],
    hasTransformations: false,
    isAttribute: false,
    isCollection: false,
    isConnected: false,
    isInCollection: false,
    isDisabled: false,
    amField: {},
    enumeration: false
  };

  var renderMappingField = function renderMappingField(isSource, canShowIndex, f, index) {
    return f ? React__default.createElement(MappingField, {
      key: f.id,
      field: f,
      name: f.name,
      info: f.scope ? f.path + " <" + f.scope + "> (" + f.type + ")" : f.path + " (" + f.type + ")",
      mappingExpressionEnabled: mappingExpressionEnabled,
      hasTransformations: f.transformations.length > 0,
      onDelete: function onDelete() {
        return onRemoveMappedField(isSource, index);
      },
      onIndexChange: function onIndexChange(value) {
        return typeof value === 'string' ? _onIndexChange(isSource, index, parseInt(value, 10)) : _onIndexChange(isSource, index, value.amField);
      },
      onNewTransformation: function onNewTransformation() {
        return _onNewTransformation(isSource, index);
      },
      index: index + 1,
      canShowIndex: canShowIndex
    }, React__default.createElement("div", {
      className: 'pf-c-form',
      style: formInputGroupStyle
    }, f.transformations.map(function (t, transformationIndex) {
      return React__default.createElement(MappingTransformation, {
        key: transformationIndex,
        name: t.name,
        transformationsOptions: t.options,
        transformationsArguments: t.arguments,
        disableTransformation: mappingExpressionEnabled,
        onTransformationChange: function onTransformationChange(value) {
          return _onTransformationChange(isSource, index, transformationIndex, value);
        },
        onTransformationArgumentChange: function onTransformationArgumentChange(name, value) {
          return _onTransformationArgumentChange(isSource, index, transformationIndex, name, value);
        },
        onRemoveTransformation: function onRemoveTransformation() {
          _onRemoveTransformation(isSource, index, transformationIndex);
        }
      });
    }))) : React__default.createElement(MappingField, {
      field: genericPaddingField,
      key: index,
      name: 'Padding field',
      info: 'This padding field has been automatically added',
      mappingExpressionEnabled: mappingExpressionEnabled,
      hasTransformations: false,
      onDelete: function onDelete() {
        return onRemoveMappedField(isSource, index);
      },
      index: index + 1,
      canShowIndex: showSourcesIndex
    });
  };

  var renderSourceMappingField = function renderSourceMappingField(f, index) {
    return renderMappingField(true, showSourcesIndex, f, index);
  };

  var renderTargetMappingField = function renderTargetMappingField(f, index) {
    return renderMappingField(false, showTargetsIndex, f, index);
  };

  var errors = notifications.filter(function (n) {
    return n.variant === 'danger';
  });
  var warnings = notifications.filter(function (n) {
    return n.variant === 'warning';
  });
  var messages = notifications.filter(function (n) {
    return n.variant !== 'warning' && n.variant !== 'danger';
  });
  return React__default.createElement(MappingDetailsSidebar, {
    onClose: onClose,
    onDelete: onRemoveMapping,
    onEditEnum: onEditEnum,
    isEnumMapping: isEnumMapping
  }, errors.length > 0 && React__default.createElement(NotificationsGroup, {
    notifications: errors,
    title: 'Errors',
    onNotificationRead: onNotificationRead
  }), warnings.length > 0 && React__default.createElement(NotificationsGroup, {
    notifications: warnings,
    title: 'Warnings',
    onNotificationRead: onNotificationRead
  }), messages.length > 0 && React__default.createElement(NotificationsGroup, {
    notifications: messages,
    title: 'Messages',
    onNotificationRead: onNotificationRead
  }), React__default.createElement("div", {
    className: 'pf-c-form',
    style: formInputGroupStyle
  }, mappingAction, React__default.createElement(MappingFields, {
    isSource: true,
    title: 'Sources',
    onCreateConstant: onCreateConstant,
    onCreateProperty: onCreateProperty,
    canAddToSelectedMapping: canAddToSelectedMapping
  }, sources.map(renderSourceMappingField), targets.length <= 1 && React__default.createElement(AddFieldTypeahead, {
    ariaLabelTypeAhead: 'Select source to add to the mapping',
    placeholderText: 'Select source to add to the mapping',
    isSource: true,
    fields: addableSources.map(function (s) {
      return {
        label: s.amField.isPropertyOrConstant() ? s.name : s.path,
        group: s.amField.docDef.name,
        onAdd: function onAdd() {
          return onAddFieldToMapping(true, s);
        }
      };
    }),
    "data-testid": 'add-source-to-mapping'
  })), React__default.createElement(MappingFields, {
    isSource: false,
    title: 'Targets',
    onCreateConstant: onCreateConstant,
    onCreateProperty: onCreateProperty,
    canAddToSelectedMapping: canAddToSelectedMapping
  }, targets.map(renderTargetMappingField), sources.length <= 1 && React__default.createElement(AddFieldTypeahead, {
    ariaLabelTypeAhead: 'Select target to add to the mapping',
    placeholderText: 'Select target to add to the mapping',
    isSource: false,
    fields: addableTargets.map(function (t) {
      return {
        label: t.amField.isProperty() ? t.name : t.path,
        group: t.amField.docDef.name,
        onAdd: function onAdd() {
          return onAddFieldToMapping(false, t);
        }
      };
    }),
    "data-testid": 'add-target-to-mapping'
  }))));
};

var NotificationsGroup = function NotificationsGroup(_ref2) {
  var title = _ref2.title,
      notifications = _ref2.notifications,
      onNotificationRead = _ref2.onNotificationRead;
  return React__default.createElement(Document, {
    title: title,
    noShadows: true,
    noPadding: true,
    actions: [React__default.createElement(reactCore.Badge, {
      key: 1
    }, notifications.length)]
  }, React__default.createElement("div", {
    style: {
      maxHeight: 200,
      overflow: 'auto'
    }
  }, notifications.map(function (n, idx) {
    return React__default.createElement(reactCore.Alert, {
      key: idx,
      variant: n.variant,
      title: n.description,
      isInline: true,
      actionClose: React__default.createElement(reactCore.AlertActionCloseButton, {
        title: n.title,
        variantLabel: n.variant + " alert",
        onClose: function onClose() {
          return onNotificationRead(n.id);
        },
        "data-testid": "dismiss-mapping-notification-" + n.id
      })
    });
  })));
};

var styles$y = {"title":"MappingTableView-module_title__1BqLH"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var emptyContent = [{
  heightAuto: true,
  cells: [{
    props: {
      colSpan: 8
    },
    title: /*#__PURE__*/React__default.createElement(reactCore.Bullseye, null, /*#__PURE__*/React__default.createElement(reactCore.EmptyState, {
      variant: reactCore.EmptyStateVariant.small
    }, /*#__PURE__*/React__default.createElement(reactCore.EmptyStateIcon, {
      icon: reactIcons.TableIcon
    }), /*#__PURE__*/React__default.createElement(reactCore.Title, {
      headingLevel: "h2",
      size: "lg"
    }, "No mappings found")))
  }]
}];
var MappingTableView = function MappingTableView(_ref) {
  var mappings = _ref.mappings,
      onSelectMapping = _ref.onSelectMapping,
      shouldShowMappingPreview = _ref.shouldShowMappingPreview,
      onFieldPreviewChange = _ref.onFieldPreviewChange;
  var rows = mappings.length === 0 ? emptyContent : mappings.map(function (mapping) {
    var sources = mapping.sourceFields.map(function (source, index) {
      var field = source;
      var name = field.name;
      return React__default.createElement("div", {
        key: index
      }, name, shouldShowMappingPreview(mapping) && React__default.createElement(DocumentFieldPreview, {
        id: field.id,
        value: field.value,
        onChange: function onChange(value) {
          return onFieldPreviewChange(field, value);
        }
      }));
    });
    var targets = mapping.targetFields.map(function (target, index) {
      var field = target;
      var name = field.name;
      return React__default.createElement("div", {
        key: index
      }, name, shouldShowMappingPreview(mapping) && React__default.createElement(DocumentFieldPreviewResults, {
        id: field.id,
        value: field.value
      }));
    });
    return {
      cells: [{
        title: sources,
        data: mapping.id
      }, {
        title: targets
      }, {
        title: mapping.name
      }]
    };
  });
  var columns = ['Sources', 'Targets', 'Types'];

  var handleSelectMapping = function handleSelectMapping(_event, row) {
    var mapping = mappings.find(function (mapping) {
      var _row$cells;

      return ((_row$cells = row.cells) === null || _row$cells === void 0 ? void 0 : _row$cells[0].data) === mapping.id;
    });

    if (mapping) {
      onSelectMapping(mapping);
    }
  };

  return React__default.createElement(MainContent, null, React__default.createElement(reactCore.Title, {
    size: "lg",
    headingLevel: 'h1',
    className: styles$y.title
  }, "Mappings"), React__default.createElement(reactTable.Table, {
    "aria-label": "Mappings",
    cells: columns,
    rows: rows
  }, React__default.createElement(reactTable.TableHeader, null), React__default.createElement(reactTable.TableBody, {
    onRowClick: handleSelectMapping
  })));
};

var styles$z = {"title":"NamespaceTableView-module_title__2TUGW"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var NamespaceTableView = function NamespaceTableView(_ref) {
  var sources = _ref.sources,
      onCreateNamespace = _ref.onCreateNamespace,
      onEditNamespace = _ref.onEditNamespace,
      onDeleteNamespace = _ref.onDeleteNamespace;
  var columns = ['Alias', 'URI', 'Location URI', {
    title: 'Target Namespace',
    transforms: [reactTable.textCenter],
    cellTransforms: [reactTable.textCenter]
  }];
  var namespaceTables = sources.reduce(function (xmlSources, source) {
    if (source.type !== 'XML') {
      return xmlSources;
    }

    var rows = !source.namespaces || source.namespaces.length === 0 ? [{
      cells: ['<None>']
    }] : source.namespaces.map(function (namespace) {
      return {
        cells: [{
          title: namespace.alias
        }, {
          title: namespace.uri
        }, {
          title: namespace.locationUri
        }, {
          title: namespace.isTarget ? "\u2713" : ''
        }]
      };
    });
    var actions = [{
      title: 'Edit',
      onClick: function onClick(_event, _rowId, row, _extra) {
        var _row$cells, _row$cells2, _row$cells3, _row$cells4;

        onEditNamespace(source.name, (_row$cells = row.cells) === null || _row$cells === void 0 ? void 0 : _row$cells[0].title, (_row$cells2 = row.cells) === null || _row$cells2 === void 0 ? void 0 : _row$cells2[1].title, (_row$cells3 = row.cells) === null || _row$cells3 === void 0 ? void 0 : _row$cells3[2].title, ((_row$cells4 = row.cells) === null || _row$cells4 === void 0 ? void 0 : _row$cells4[3].title.length) > 0 ? true : false);
      }
    }, {
      title: 'Remove',
      onClick: function onClick(_event, _rowId, row, _extra) {
        return onDeleteNamespace(source.name, row.alias.title);
      }
    }];
    return [].concat(xmlSources, [React__default.createElement(reactCore.Level, {
      key: "level"
    }, React__default.createElement(reactCore.LevelItem, {
      key: "title"
    }, React__default.createElement(reactCore.Title, {
      size: "lg",
      headingLevel: 'h1',
      className: styles$z.title
    }, "Namespaces for ", source.name)), React__default.createElement(reactCore.LevelItem, {
      key: "actions"
    }, React__default.createElement(Actions, null, React__default.createElement(reactCore.Tooltip, {
      position: 'top',
      enableFlip: true,
      content: React__default.createElement("div", null, "Create a namespace"),
      key: 'create-namespace'
    }, React__default.createElement(reactCore.Button, {
      onClick: function onClick() {
        return onCreateNamespace(source.name);
      },
      variant: 'plain',
      "aria-label": "Create a namespace",
      "data-testid": "create-namespace-button"
    }, React__default.createElement(reactIcons.PlusIcon, null)))))), React__default.createElement(reactTable.Table, {
      key: "table",
      "aria-label": "Namespaces",
      cells: columns,
      rows: rows,
      actions: source.namespaces && source.namespaces.length > 0 ? actions : undefined
    }, React__default.createElement(reactTable.TableHeader, null), React__default.createElement(reactTable.TableBody, null))]);
  }, []);
  return namespaceTables.length === 0 ? React__default.createElement(reactCore.Bullseye, null, React__default.createElement(reactCore.EmptyState, {
    variant: reactCore.EmptyStateVariant.small
  }, React__default.createElement(reactCore.EmptyStateIcon, {
    icon: reactIcons.TableIcon
  }), React__default.createElement(reactCore.Title, {
    headingLevel: "h2",
    size: "lg"
  }, "No XML sources found"))) : React__default.createElement(MainContent, null, namespaceTables);
};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var SourceTargetView = function SourceTargetView(_ref) {
  var sourceProperties = _ref.sourceProperties,
      targetProperties = _ref.targetProperties,
      constants = _ref.constants,
      sources = _ref.sources,
      mappings = _ref.mappings,
      targets = _ref.targets,
      showMappingPreview = _ref.showMappingPreview,
      showTypes = _ref.showTypes,
      selectedMappingId = _ref.selectedMappingId,
      onSelectMapping = _ref.onSelectMapping,
      sourceEvents = _ref.sourceEvents,
      targetEvents = _ref.targetEvents;
  return React__default.createElement(React__default.Fragment, null, React__default.createElement(NodeRefProvider, null, React__default.createElement(ColumnMapper, {
    role: 'main'
  }, React__default.createElement(Columns, null, React__default.createElement(Column, {
    "data-testid": 'column-source-area',
    totalColumns: 2
  }, React__default.createElement(SourcesColumn, Object.assign({
    sourceProperties: sourceProperties,
    constants: constants,
    sources: sources,
    showTypes: showTypes
  }, sourceEvents))), React__default.createElement(Column, {
    "data-testid": 'column-target-area',
    totalColumns: 2
  }, React__default.createElement(TargetsColumn, Object.assign({
    targetProperties: targetProperties,
    showMappingPreview: showMappingPreview,
    showTypes: showTypes,
    targets: targets
  }, targetEvents))))), React__default.createElement(SourceTargetLinks, {
    mappings: mappings,
    selectedMappingId: selectedMappingId,
    onSelectMapping: onSelectMapping
  })));
};

var styles$A = {"toggled":"toolbarItems-module_toggled__HUrZH"};

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var AtlasmapToolbarItem = function AtlasmapToolbarItem(_ref) {
  var showImportAtlasFileToolbarItem = _ref.showImportAtlasFileToolbarItem,
      showImportJarFileToolbarItem = _ref.showImportJarFileToolbarItem,
      showExportAtlasFileToolbarItem = _ref.showExportAtlasFileToolbarItem,
      showResetToolbarItem = _ref.showResetToolbarItem,
      onImportAtlasFile = _ref.onImportAtlasFile,
      onImportJarFile = _ref.onImportJarFile,
      onExportAtlasFile = _ref.onExportAtlasFile,
      onResetAtlasmap = _ref.onResetAtlasmap;

  var _useToggle = useToggle(false),
      isOpen = _useToggle.state,
      onToggle = _useToggle.toggle,
      toggleOff = _useToggle.toggleOff;

  var runAndClose = function runAndClose(cb) {
    return function () {
      cb.apply(void 0, arguments);
      toggleOff();
    };
  };

  var dropdownItems = [showImportAtlasFileToolbarItem && React__default.createElement(ImportAtlasFileToolbarItem, {
    onFile: runAndClose(onImportAtlasFile),
    key: "import-catalog"
  }), showImportJarFileToolbarItem && React__default.createElement(ImportJarFileToolbarItem, {
    onFile: runAndClose(onImportJarFile),
    key: "import-java-archive"
  }), (showImportAtlasFileToolbarItem || showImportJarFileToolbarItem) && React__default.createElement(reactCore.DropdownSeparator, {
    key: "import-separator"
  }), showExportAtlasFileToolbarItem && React__default.createElement(ExportAtlasFileToolbarItem, {
    onClick: runAndClose(onExportAtlasFile),
    key: 'export-catalog'
  }), showExportAtlasFileToolbarItem && React__default.createElement(reactCore.DropdownSeparator, {
    key: "export-separator"
  }), showResetToolbarItem && React__default.createElement(ResetToolbarItem, {
    onClick: runAndClose(onResetAtlasmap),
    key: "reset-catalog"
  })].filter(function (f) {
    return f;
  });
  return React__default.createElement(reactCore.ToolbarItem, null, React__default.createElement(reactCore.Dropdown, {
    toggle: React__default.createElement(reactCore.DropdownToggle, {
      id: "atlasmap-toggle",
      onToggle: onToggle,
      toggleIndicator: reactIcons.CaretDownIcon,
      "data-testid": "atlasmap-menu-button"
    }, "AtlasMap"),
    isOpen: isOpen,
    dropdownItems: dropdownItems,
    isPlain: true
  }));
};
var ImportAtlasFileToolbarItem = function ImportAtlasFileToolbarItem(_ref2) {
  var onFile = _ref2.onFile;

  var _useFilePicker = reactSage.useFilePicker({
    maxFileSize: 1
  }),
      files = _useFilePicker.files,
      onClick = _useFilePicker.onClick,
      HiddenFileInput = _useFilePicker.HiddenFileInput;

  var previouslyUploadedFiles = React.useRef(null);
  React.useEffect(function () {
    if (previouslyUploadedFiles.current !== files) {
      previouslyUploadedFiles.current = files;

      if ((files === null || files === void 0 ? void 0 : files.length) === 1) {
        previouslyUploadedFiles.current = null;
        onFile(files[0]);
      }
    }
  }, [files, onFile]);
  return React__default.createElement(reactCore.DropdownItem, {
    icon: React__default.createElement(reactIcons.ImportIcon, null),
    onClick: onClick,
    "data-testid": "import-mappings-button"
  }, "Import a catalog (.adm)", React__default.createElement(HiddenFileInput, {
    accept: ".adm",
    multiple: false
  }));
};
var ImportJarFileToolbarItem = function ImportJarFileToolbarItem(_ref3) {
  var onFile = _ref3.onFile;

  var _useFilePicker2 = reactSage.useFilePicker({
    maxFileSize: 1
  }),
      files = _useFilePicker2.files,
      onClick = _useFilePicker2.onClick,
      HiddenFileInput = _useFilePicker2.HiddenFileInput;

  var previouslyUploadedFiles = React.useRef(null);
  React.useEffect(function () {
    if (previouslyUploadedFiles.current !== files) {
      previouslyUploadedFiles.current = files;

      if ((files === null || files === void 0 ? void 0 : files.length) === 1) {
        previouslyUploadedFiles.current = null;
        onFile(files[0]);
      }
    }
  }, [files, onFile]);
  return React__default.createElement(reactCore.DropdownItem, {
    icon: React__default.createElement(reactIcons.ImportIcon, null),
    onClick: onClick,
    "data-testid": "import-archive-button"
  }, "Import a Java archive (.jar)", React__default.createElement(HiddenFileInput, {
    accept: ".jar",
    multiple: false
  }));
};
var ExportAtlasFileToolbarItem = function ExportAtlasFileToolbarItem(_ref4) {
  var onClick = _ref4.onClick;
  return React__default.createElement(reactCore.DropdownItem, {
    icon: React__default.createElement(reactIcons.ExportIcon, null),
    onClick: onClick,
    "data-testid": "export-mappings-button"
  }, "Export the current mappings and support files into a catalog (.adm)");
};
var ResetToolbarItem = function ResetToolbarItem(_ref5) {
  var onClick = _ref5.onClick;
  return React__default.createElement(reactCore.DropdownItem, {
    icon: React__default.createElement(reactIcons.TrashIcon, null),
    onClick: onClick,
    "data-testid": "reset-all-button"
  }, "Reset all mappings and clear all imported documents");
};
var ToggleColumnMapperViewToolbarItem = function ToggleColumnMapperViewToolbarItem(_ref7) {
  var toggled = _ref7.toggled,
      _ref7$disabled = _ref7.disabled,
      disabled = _ref7$disabled === void 0 ? false : _ref7$disabled,
      onClick = _ref7.onClick;
  return React__default.createElement(reactCore.ToolbarItem, null, React__default.createElement(reactCore.Tooltip, {
    position: 'auto',
    enableFlip: true,
    content: React__default.createElement("div", null, "Show column mapper")
  }, React__default.createElement(reactCore.Button, {
    variant: 'plain',
    "aria-label": "Show column mapper",
    onClick: onClick,
    isDisabled: disabled,
    className: reactStyles.css(toggled && styles$A.toggled),
    "data-testid": "show-column-mapper-button"
  }, React__default.createElement(reactIcons.ColumnsIcon, null))));
};
var ToggleMappingTableViewToolbarItem = function ToggleMappingTableViewToolbarItem(_ref8) {
  var toggled = _ref8.toggled,
      _ref8$disabled = _ref8.disabled,
      disabled = _ref8$disabled === void 0 ? false : _ref8$disabled,
      onClick = _ref8.onClick;
  return React__default.createElement(reactCore.ToolbarItem, null, React__default.createElement(reactCore.Tooltip, {
    position: 'auto',
    enableFlip: true,
    content: React__default.createElement("div", null, "Show mapping table")
  }, React__default.createElement(reactCore.Button, {
    variant: 'plain',
    "aria-label": "Show/hide mapping table",
    onClick: onClick,
    isDisabled: disabled,
    className: reactStyles.css(toggled && styles$A.toggled),
    "data-testid": "show-hide-mapping-table-button"
  }, React__default.createElement(reactIcons.TableIcon, null))));
};
var ToggleNamespaceTableViewToolbarItem = function ToggleNamespaceTableViewToolbarItem(_ref9) {
  var toggled = _ref9.toggled,
      _ref9$disabled = _ref9.disabled,
      disabled = _ref9$disabled === void 0 ? false : _ref9$disabled,
      onClick = _ref9.onClick;
  return React__default.createElement(reactCore.ToolbarItem, null, React__default.createElement(reactCore.Tooltip, {
    position: 'auto',
    enableFlip: true,
    content: React__default.createElement("div", null, "Show namespace table")
  }, React__default.createElement(reactCore.Button, {
    variant: 'plain',
    "aria-label": "Show/hide namespace table",
    onClick: onClick,
    isDisabled: disabled,
    className: reactStyles.css(toggled && styles$A.toggled),
    "data-testid": "show-hide-namespace-table-button"
  }, React__default.createElement(reactIcons.CodeIcon, null))));
};
var ToggleMappingPreviewToolbarItem = function ToggleMappingPreviewToolbarItem(_ref11) {
  var toggled = _ref11.toggled,
      _ref11$disabled = _ref11.disabled,
      disabled = _ref11$disabled === void 0 ? false : _ref11$disabled,
      onClick = _ref11.onClick;
  return React__default.createElement(reactCore.ToolbarItem, null, React__default.createElement(reactCore.Tooltip, {
    position: 'auto',
    enableFlip: true,
    content: React__default.createElement("div", null, "Show/hide mapping preview")
  }, React__default.createElement(reactCore.Button, {
    variant: 'plain',
    "aria-label": "Show/hide mapping preview",
    onClick: onClick,
    isDisabled: disabled,
    className: reactStyles.css(toggled && styles$A.toggled),
    "data-testid": "show-hide-mapping-preview-button"
  }, React__default.createElement(reactIcons.EyeIcon, null))));
};
var ToggleTypesToolbarItem = function ToggleTypesToolbarItem(_ref12) {
  var toggled = _ref12.toggled,
      _ref12$disabled = _ref12.disabled,
      disabled = _ref12$disabled === void 0 ? false : _ref12$disabled,
      onClick = _ref12.onClick;
  return React__default.createElement(reactCore.ToolbarItem, null, React__default.createElement(reactCore.Tooltip, {
    position: 'auto',
    enableFlip: true,
    content: React__default.createElement("div", null, "Show/hide types")
  }, React__default.createElement(reactCore.Button, {
    variant: 'plain',
    "aria-label": "Show/hide types",
    onClick: onClick,
    isDisabled: disabled,
    className: reactStyles.css(toggled && styles$A.toggled),
    "data-testid": "show-hide-types-button"
  }, React__default.createElement(reactIcons.InfoIcon, null))));
};
var ToggleMappedFieldsToolbarItem = function ToggleMappedFieldsToolbarItem(_ref13) {
  var toggled = _ref13.toggled,
      _ref13$disabled = _ref13.disabled,
      disabled = _ref13$disabled === void 0 ? false : _ref13$disabled,
      onClick = _ref13.onClick;
  return React__default.createElement(reactCore.ToolbarItem, null, React__default.createElement(reactCore.Tooltip, {
    position: 'auto',
    enableFlip: true,
    content: React__default.createElement("div", null, "Show/hide mapped fields")
  }, React__default.createElement(reactCore.Button, {
    variant: 'plain',
    "aria-label": "Show/hide mapped fields",
    onClick: onClick,
    isDisabled: disabled,
    className: reactStyles.css(toggled && styles$A.toggled),
    "data-testid": "show-hide-mapped-fields-button"
  }, React__default.createElement(reactIcons.MapMarkedIcon, null))));
};
var ToggleUnmappedFieldsToolbarItem = function ToggleUnmappedFieldsToolbarItem(_ref14) {
  var toggled = _ref14.toggled,
      _ref14$disabled = _ref14.disabled,
      disabled = _ref14$disabled === void 0 ? false : _ref14$disabled,
      onClick = _ref14.onClick;
  return React__default.createElement(reactCore.ToolbarItem, null, React__default.createElement(reactCore.Tooltip, {
    position: 'auto',
    enableFlip: true,
    content: React__default.createElement("div", null, "Show/hide unmapped fields")
  }, React__default.createElement(reactCore.Button, {
    variant: 'plain',
    "aria-label": "Show/hide unmapped fields",
    onClick: onClick,
    isDisabled: disabled,
    className: reactStyles.css(toggled && styles$A.toggled),
    "data-testid": "show-hide-unmapped-fields-button"
  }, React__default.createElement(reactIcons.MapIcon, null))));
};
var AddMappingToolbarItem = function AddMappingToolbarItem(_ref15) {
  var onClick = _ref15.onClick;
  return React__default.createElement(reactCore.ToolbarItem, null, React__default.createElement(reactCore.Tooltip, {
    position: 'auto',
    enableFlip: true,
    content: React__default.createElement("div", null, "Add a new mapping")
  }, React__default.createElement(reactCore.Button, {
    variant: 'plain',
    "aria-label": "Add a new mapping",
    onClick: onClick,
    "data-testid": "add-new-mapping-button"
  }, React__default.createElement(reactIcons.PlusIcon, null))));
};
var AboutToolbarItem = function AboutToolbarItem(_ref16) {
  var onClick = _ref16.onClick;
  return React__default.createElement(reactCore.ToolbarItem, null, React__default.createElement(reactCore.Tooltip, {
    position: 'auto',
    enableFlip: true,
    content: React__default.createElement("div", null, "About AtlasMap")
  }, React__default.createElement(reactCore.Button, {
    variant: 'plain',
    "aria-label": "About AtlasMap",
    onClick: onClick,
    "data-testid": "about-button"
  }, React__default.createElement(reactIcons.HelpIcon, null))));
};

function initDataState() {
  return {
    pending: false,
    error: false,
    sourceProperties: null,
    targetProperties: null,
    constants: null,
    sources: [],
    targets: [],
    mappings: [],
    selectedMapping: null,
    flatSources: [],
    flatTargets: []
  };
}
function dataReducer(state, action) {
  switch (action.type) {
    case 'reset':
      return initDataState();

    case 'loading':
      return _extends({}, state, {
        pending: true,
        error: false
      });

    case 'update':
      return _extends({}, state, action.payload);

    case 'error':
      return _extends({}, initDataState());

    default:
      return state;
  }
}

function initNotificationsState() {
  return {
    notifications: []
  };
}
function notificationsReducer(state, action) {
  switch (action.type) {
    case 'reset':
      return {
        notifications: []
      };

    case 'update':
      return {
        notifications: action.payload.notifications.map(function (n) {
          var _state$notifications$;

          return _extends({}, n, {
            isRead: (_state$notifications$ = state.notifications.find(function (on) {
              return on.id === n.id;
            })) === null || _state$notifications$ === void 0 ? void 0 : _state$notifications$.isRead
          });
        })
      };

    case 'dismiss':
      return {
        notifications: state.notifications.map(function (n) {
          return n.id === action.payload.id ? _extends({}, n, {
            isRead: true
          }) : n;
        })
      };

    default:
      return state;
  }
}

var AtlasmapContext = /*#__PURE__*/React.createContext(null);
var AtlasmapProvider = function AtlasmapProvider(_ref) {
  var baseJavaInspectionServiceUrl = _ref.baseJavaInspectionServiceUrl,
      baseXMLInspectionServiceUrl = _ref.baseXMLInspectionServiceUrl,
      baseJSONInspectionServiceUrl = _ref.baseJSONInspectionServiceUrl,
      baseCSVInspectionServiceUrl = _ref.baseCSVInspectionServiceUrl,
      baseMappingServiceUrl = _ref.baseMappingServiceUrl,
      externalDocument = _ref.externalDocument,
      onMappingChange = _ref.onMappingChange,
      logLevel = _ref.logLevel,
      children = _ref.children;

  var _useReducer = React.useReducer(dataReducer, {}, initDataState),
      data = _useReducer[0],
      dispatchData = _useReducer[1];

  var _useReducer2 = React.useReducer(notificationsReducer, {}, initNotificationsState),
      notifications = _useReducer2[0],
      dispatchNotifications = _useReducer2[1];

  var onReset = function onReset() {
    dispatchData({
      type: 'reset'
    });
    dispatchNotifications({
      type: 'reset'
    });
  };

  var onLoading = function onLoading() {
    dispatchData({
      type: 'loading'
    });
  };

  var onUpdates = function onUpdates(payload) {
    dispatchData({
      type: 'update',
      payload: payload
    });
  };

  var markNotificationRead = function markNotificationRead(id) {
    return dispatchNotifications({
      type: 'dismiss',
      payload: {
        id: id
      }
    });
  };

  React.useEffect(function onInitializationCb() {
    var _cfg$logger;

    onReset();
    initializationService.resetConfig();
    var cfg = initializationService.cfg;
    (_cfg$logger = cfg.logger) === null || _cfg$logger === void 0 ? void 0 : _cfg$logger.setLevel(logLevel);
    cfg.initCfg.baseMappingServiceUrl = baseMappingServiceUrl;
    cfg.initCfg.baseJavaInspectionServiceUrl = baseJavaInspectionServiceUrl;
    cfg.initCfg.baseXMLInspectionServiceUrl = baseXMLInspectionServiceUrl;
    cfg.initCfg.baseJSONInspectionServiceUrl = baseJSONInspectionServiceUrl;
    cfg.initCfg.baseCSVInspectionServiceUrl = baseCSVInspectionServiceUrl;

    if (externalDocument) {
      externalDocument.inputDocuments.forEach(function (d) {
        var inputDoc = new core.DocumentInitializationModel();
        inputDoc.type = d.documentType;
        inputDoc.inspectionType = d.inspectionType;
        inputDoc.inspectionSource = d.inspectionSource;
        inputDoc.inspectionParameters = d.inspectionParameters;
        inputDoc.inspectionResult = d.inspectionResult;
        inputDoc.id = d.id;
        inputDoc.name = d.name;
        inputDoc.description = d.description;
        inputDoc.isSource = true;
        inputDoc.showFields = d.showFields;
        cfg.addDocument(inputDoc);
      });
      var outputDoc = new core.DocumentInitializationModel();
      outputDoc.type = externalDocument.outputDocument.documentType;
      outputDoc.inspectionType = externalDocument.outputDocument.inspectionType;
      outputDoc.inspectionSource = externalDocument.outputDocument.inspectionSource;
      outputDoc.inspectionParameters = externalDocument.outputDocument.inspectionParameters;
      outputDoc.inspectionResult = externalDocument.outputDocument.inspectionResult;
      outputDoc.id = externalDocument.outputDocument.id;
      outputDoc.name = externalDocument.outputDocument.name;
      outputDoc.description = externalDocument.outputDocument.description;
      outputDoc.isSource = false;
      outputDoc.showFields = externalDocument.outputDocument.showFields;
      cfg.addDocument(outputDoc);

      if (externalDocument.initialMappings) {
        cfg.preloadedMappingJson = externalDocument.initialMappings;
      }
    }

    initializationService.initialize();
    onLoading();
  }, [baseCSVInspectionServiceUrl, baseJSONInspectionServiceUrl, baseJavaInspectionServiceUrl, baseMappingServiceUrl, baseXMLInspectionServiceUrl, externalDocument, logLevel]);
  var configModel = initializationService.cfg;
  var convertSources = React.useCallback(function convertSourcesCb() {
    return configModel.sourceDocs.map(fromDocumentDefinitionToFieldGroup).filter(function (d) {
      return d;
    });
  }, [configModel]);
  var convertConstants = React.useCallback(function convertConstantsCb() {
    return fromDocumentDefinitionToFieldGroup(configModel.constantDoc);
  }, [configModel]);
  var convertSourceProperties = React.useCallback(function convertPropertiesCb() {
    return fromDocumentDefinitionToFieldGroup(configModel.sourcePropertyDoc);
  }, [configModel]);
  var convertTargetProperties = React.useCallback(function convertPropertiesCb() {
    return fromDocumentDefinitionToFieldGroup(configModel.targetPropertyDoc);
  }, [configModel]);
  var convertTargets = React.useCallback(function convertTargetsCb() {
    return configModel.targetDocs.map(fromDocumentDefinitionToFieldGroup).filter(function (d) {
      return d;
    });
  }, [configModel]);
  var convertMappings = React.useCallback(function convertMappingsCb() {
    return fromMappingDefinitionToIMappings(configModel.mappings);
  }, [configModel]);
  var convertSelectedMapping = React.useCallback(function convertSelectedMappingCb() {
    var _configModel$mappings;

    return fromMappingModelToImapping((_configModel$mappings = configModel.mappings) === null || _configModel$mappings === void 0 ? void 0 : _configModel$mappings.activeMapping);
  }, [configModel]);
  var convertSourcesToFlatArray = React.useCallback(function convertSourcesToFlatArrayCb() {
    return configModel.sourceDocs.flatMap(function (s) {
      return s.getAllFields().flatMap(function (f) {
        var af = fromFieldToIFieldsNode(f);
        return af ? [af] : [];
      });
    });
  }, [configModel]);
  var convertTargetsToFlatArray = React.useCallback(function convertTargetsToFlatArrayCb() {
    return configModel.targetDocs.flatMap(function (t) {
      return t.getAllFields().flatMap(function (f) {
        var af = fromFieldToIFieldsNode(f);
        return af ? [af] : [];
      });
    });
  }, [configModel]);
  var onSubUpdate = React.useCallback(function onSubUpdateCb(_caller) {
    onUpdates({
      pending: !configModel.initCfg.initialized,
      error: configModel.initCfg.initializationErrorOccurred,
      sources: convertSources(),
      constants: convertConstants(),
      sourceProperties: convertSourceProperties(),
      targets: convertTargets(),
      targetProperties: convertTargetProperties(),
      mappings: convertMappings(),
      selectedMapping: convertSelectedMapping(),
      flatSources: convertSourcesToFlatArray(),
      flatTargets: convertTargetsToFlatArray()
    });
    dispatchNotifications({
      type: 'update',
      payload: {
        notifications: configModel.errorService.getErrors().reverse().filter(function (e) {
          return e.level !== 'DEBUG';
        }).map(errorInfoToNotification)
      }
    });
  }, [configModel, convertConstants, convertMappings, convertSelectedMapping, convertSources, convertSourceProperties, convertSourcesToFlatArray, convertTargets, convertTargetProperties, convertTargetsToFlatArray]);
  React.useEffect(function subscriptionListener() {
    var debounceTimeWindow = data.pending ? 1000 : 50;
    var initializationObservable = initializationService.systemInitializedSource.pipe(operators.debounceTime(debounceTimeWindow));
    var lineRefreshObservable = configModel.mappingService.lineRefreshSource.pipe(operators.debounceTime(debounceTimeWindow));
    var mappingUpdatedSource = configModel.mappingService.mappingUpdatedSource.pipe(operators.debounceTime(debounceTimeWindow));
    var mappingPreview = configModel.previewService.mappingPreviewOutput$.pipe(operators.debounceTime(debounceTimeWindow));
    var subscriptions = [initializationObservable.subscribe(function () {
      return onSubUpdate('initializationObservable');
    }), mappingUpdatedSource.subscribe(function () {
      return onSubUpdate('mappingUpdatedSource');
    }), mappingPreview.subscribe(function () {
      return onSubUpdate('mappingPreviewOutput$');
    }), lineRefreshObservable.subscribe(function () {
      return onSubUpdate('lineRefreshObservable');
    }), configModel.errorService.subscribe(function () {
      return onSubUpdate('errorService');
    })];
    return function () {
      subscriptions.forEach(function (s) {
        return s.unsubscribe();
      });
    };
  }, [baseJavaInspectionServiceUrl, baseXMLInspectionServiceUrl, baseJSONInspectionServiceUrl, baseCSVInspectionServiceUrl, baseMappingServiceUrl, configModel, data.pending, data.selectedMapping, onSubUpdate]);
  React.useEffect(function onMappingChangeListenerCb() {
    if (onMappingChange) {
      configModel.mappingService.mappingUpdatedSource.subscribe(function onMappingChangeListenerSubCb() {
        if (configModel.initCfg.initialized) {
          onMappingChange(JSON.stringify(core.MappingSerializer.serializeMappings(configModel)));
        }
      });
    }
  }, [configModel, onMappingChange]);
  return React__default.createElement(AtlasmapContext.Provider, {
    value: _extends({}, data, notifications, {
      onLoading: onLoading,
      onReset: onReset,
      markNotificationRead: markNotificationRead
    })
  }, children);
};
function useAtlasmap() {
  var _configModel$mappings2, _configModel$mappings3, _configModel$mappings4, _configModel$mappings5, _configModel$mappings6;

  var context = React.useContext(AtlasmapContext);

  if (!context) {
    throw new Error("useAtlasmap must be used inside an AtlasmapProvider component");
  }

  var configModel = initializationService.cfg;

  var onReset = context.onReset,
      state = _objectWithoutPropertiesLoose(context, ["onLoading", "onReset"]);

  var searchSources = React.useCallback(function (term) {
    return configModel.documentService.filterDocumentFields(term, true);
  }, [configModel]);
  var searchTargets = React.useCallback(function (term) {
    return configModel.documentService.filterDocumentFields(term, false);
  }, [configModel]);
  var handleImportADMArchiveFile = React.useCallback(function (file) {
    importADMArchiveFile(file, configModel);
  }, [configModel]);
  var handleImportJarFile = React.useCallback(function (file) {
    importJarFile(file, configModel);
  }, [configModel]);
  var handleResetAtlasmap = React.useCallback(function () {
    onReset();
    resetAtlasmap();
  }, [onReset]);
  var onAddToMapping = React.useCallback(function (node) {
    var field = node.amField;
    addToCurrentMapping(field);
  }, []);
  var onRemoveFromMapping = React.useCallback(function (node) {
    var field = node.amField;
    removeFromCurrentMapping(field);
  }, []);
  var onCreateMapping = React.useCallback(function (source, target) {
    var sourceField = source === null || source === void 0 ? void 0 : source.amField;
    var targetField = target === null || target === void 0 ? void 0 : target.amField;
    createMapping(sourceField, targetField);
  }, []);
  var isMappingExpressionEmpty = ((_configModel$mappings2 = configModel.mappings) === null || _configModel$mappings2 === void 0 ? void 0 : (_configModel$mappings3 = _configModel$mappings2.activeMapping) === null || _configModel$mappings3 === void 0 ? void 0 : (_configModel$mappings4 = _configModel$mappings3.transition) === null || _configModel$mappings4 === void 0 ? void 0 : (_configModel$mappings5 = _configModel$mappings4.expression) === null || _configModel$mappings5 === void 0 ? void 0 : _configModel$mappings5.nodes.length) === 0;
  var mappingHasSourceCollection = React.useCallback(function () {
    return configModel.expressionService.willClearOutSourceFieldsOnTogglingExpression();
  }, [configModel]);
  /**
   * Return true if it's possible to add a source or target field to the current
   * mapping from the specified panel, false otherwise.
   */

  var canAddToSelectedMapping = React.useCallback(function (isSource) {
    var selectedMapping = context.selectedMapping;

    if (!selectedMapping || selectedMapping.mapping.transition.mode === core.TransitionMode.ENUM && selectedMapping.sourceFields.length > 0 && selectedMapping.targetFields.length > 0) {
      return false;
    }

    if (selectedMapping.sourceFields.length <= 1 && selectedMapping.targetFields.length <= 1) {
      return true;
    } else if (isSource && (selectedMapping.targetFields.length <= 1 || selectedMapping.sourceFields.length === 0)) {
      return true;
    } else if (!isSource && (selectedMapping.sourceFields.length <= 1 || selectedMapping.targetFields.length === 0)) {
      return true;
    }

    return false;
  }, [context]);
  /**
   * Return true if it's possible to add the specified source field to the current mapping
   * from the specified panel, false otherwise.
   */

  var isFieldAddableToSelection = React.useCallback(function (documentType, field, dropTarget) {
    var selectedMapping = context.selectedMapping;
    var isSource = documentType === 'source';

    if (!field || !field.amField.isTerminal() || (dropTarget === null || dropTarget === void 0 ? void 0 : dropTarget.type) === 'UNSUPPORTED' || selectedMapping && selectedMapping.mapping.transition.mode === core.TransitionMode.ENUM && selectedMapping.sourceFields.length > 0 && selectedMapping.targetFields.length > 0) {
      return false;
    }

    if (!selectedMapping || dropTarget && !dropTarget.isConnected) {
      return true;
    }

    if (selectedMapping.sourceFields.length <= 1 && selectedMapping.targetFields.length <= 1) {
      if (isSource && !selectedMapping.sourceFields.find(function (f) {
        return f.id === field.id;
      })) {
        return true;
      } else if (field.isCollection || field.isInCollection || !field.isConnected && !selectedMapping.targetFields.find(function (f) {
        return f.id === field.id;
      })) {
        return true;
      }
    } else if (isSource && (selectedMapping.targetFields.length <= 1 || selectedMapping.sourceFields.length === 0) && !selectedMapping.sourceFields.find(function (f) {
      return f.id === field.id;
    })) {
      return true;
    } else if (!isSource && (field.isCollection || field.isInCollection || !field.isConnected && (selectedMapping.sourceFields.length <= 1 || selectedMapping.targetFields.length === 0) && !selectedMapping.targetFields.find(function (f) {
      return f.id === field.id;
    }))) {
      return true;
    }

    return false;
  }, [context]);
  var isFieldRemovableFromSelection = React.useCallback(function (documentType, field) {
    return !!context.selectedMapping && !!context.selectedMapping[documentType === 'source' ? 'sourceFields' : 'targetFields'].find(function (f) {
      return f.id === field.id;
    });
  }, [context.selectedMapping]);
  return _extends({}, state, {
    selectMapping: selectMapping,
    deselectMapping: deselectMapping,
    deleteAtlasFile: deleteAtlasFile,
    exportADMArchiveFile: exportADMArchiveFile,
    importADMArchiveFile: handleImportADMArchiveFile,
    importJarFile: handleImportJarFile,
    resetAtlasmap: handleResetAtlasmap,
    getUIVersion: getUIVersion,
    getRuntimeVersion: getRuntimeVersion,
    mappingExpressionClearText: mappingExpressionClearText,
    isMappingExpressionEmpty: isMappingExpressionEmpty,
    executeFieldSearch: executeFieldSearch,
    getFieldEnums: getFieldEnums,
    setSelectedEnumValue: setSelectedEnumValue,
    mappingExpressionAddField: mappingExpressionAddField,
    mappingExpressionInit: mappingExpressionInit,
    mappingExpressionInsertText: mappingExpressionInsertText,
    mappingExpressionObservable: mappingExpressionObservable,
    mappingExpressionRemoveField: mappingExpressionRemoveField,
    mappingHasSourceCollection: mappingHasSourceCollection,
    mappingExpressionEnabled: configModel.expressionService.isExpressionEnabledForActiveMapping(),
    currentMappingExpression: configModel.expressionService.getMappingExpressionStr(true, (_configModel$mappings6 = configModel.mappings) === null || _configModel$mappings6 === void 0 ? void 0 : _configModel$mappings6.activeMapping),
    getMappingExpression: getMappingExpression,
    toggleExpressionMode: toggleExpressionMode,
    toggleMappingPreview: toggleMappingPreview,
    toggleShowMappedFields: toggleShowMappedFields,
    toggleShowUnmappedFields: toggleShowUnmappedFields,
    onFieldPreviewChange: onFieldPreviewChange,
    addToCurrentMapping: addToCurrentMapping,
    removeFromCurrentMapping: removeFromCurrentMapping,
    removeMappedFieldFromCurrentMapping: removeMappedFieldFromCurrentMapping,
    fromMappedFieldToIMappingField: fromMappedFieldToIMappingField,
    createMapping: createMapping,
    newMapping: newMapping,
    removeMapping: removeMapping,
    documentExists: documentExists,
    getMappingActions: getMappingActions,
    getMultiplicityActions: getMultiplicityActions,
    getMultiplicityActionDelimiters: getMultiplicityActionDelimiters,
    handleActionChange: handleActionChange,
    handleIndexChange: handleIndexChange,
    handleNewTransformation: handleNewTransformation,
    handleRemoveTransformation: handleRemoveTransformation,
    handleTransformationChange: handleTransformationChange,
    handleTransformationArgumentChange: handleTransformationArgumentChange,
    handleMultiplicityChange: handleMultiplicityChange,
    handleMultiplicityArgumentChange: handleMultiplicityArgumentChange,
    createConstant: createConstant,
    deleteConstant: deleteConstant,
    editConstant: editConstant,
    createProperty: createProperty,
    deleteProperty: deleteProperty,
    editProperty: editProperty,
    trailerId: trailerId,
    canAddToSelectedMapping: canAddToSelectedMapping,
    isFieldAddableToSelection: isFieldAddableToSelection,
    isFieldRemovableFromSelection: isFieldRemovableFromSelection,
    searchSources: searchSources,
    searchTargets: searchTargets,
    importInstanceSchema: importInstanceSchema,
    enableCustomClass: enableCustomClass,
    createNamespace: createNamespace,
    editNamespace: editNamespace,
    deleteNamespace: deleteNamespace,
    onAddToMapping: onAddToMapping,
    onRemoveFromMapping: onRemoveFromMapping,
    onCreateMapping: onCreateMapping,
    changeDocumentName: changeDocumentName,
    getEnumerationValues: getEnumerationValues,
    isEnumerationMapping: isEnumerationMapping,
    configModel: configModel
  });
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function useContextToolbar(_ref) {
  var _ref$showImportAtlasF = _ref.showImportAtlasFileToolbarItem,
      showImportAtlasFileToolbarItem = _ref$showImportAtlasF === void 0 ? true : _ref$showImportAtlasF,
      _ref$showImportJarFil = _ref.showImportJarFileToolbarItem,
      showImportJarFileToolbarItem = _ref$showImportJarFil === void 0 ? true : _ref$showImportJarFil,
      _ref$showExportAtlasF = _ref.showExportAtlasFileToolbarItem,
      showExportAtlasFileToolbarItem = _ref$showExportAtlasF === void 0 ? true : _ref$showExportAtlasF,
      _ref$showResetToolbar = _ref.showResetToolbarItem,
      showResetToolbarItem = _ref$showResetToolbar === void 0 ? true : _ref$showResetToolbar,
      _ref$showColumnMapper = _ref.showColumnMapperViewToolbarItem,
      showColumnMapperViewToolbarItem = _ref$showColumnMapper === void 0 ? true : _ref$showColumnMapper,
      _ref$showMappingTable = _ref.showMappingTableViewToolbarItem,
      showMappingTableViewToolbarItem = _ref$showMappingTable === void 0 ? true : _ref$showMappingTable,
      _ref$showNamespaceTab = _ref.showNamespaceTableViewToolbarItem,
      showNamespaceTableViewToolbarItem = _ref$showNamespaceTab === void 0 ? true : _ref$showNamespaceTab,
      _ref$showToggleMappin = _ref.showToggleMappingPreviewToolbarItem,
      showToggleMappingPreviewToolbarItem = _ref$showToggleMappin === void 0 ? true : _ref$showToggleMappin,
      _ref$showToggleTypesT = _ref.showToggleTypesToolbarItem,
      showToggleTypesToolbarItem = _ref$showToggleTypesT === void 0 ? true : _ref$showToggleTypesT,
      _ref$showToggleMapped = _ref.showToggleMappedFieldsToolbarItem,
      showToggleMappedFieldsToolbarItem = _ref$showToggleMapped === void 0 ? true : _ref$showToggleMapped,
      _ref$showToggleUnmapp = _ref.showToggleUnmappedFieldsToolbarItem,
      showToggleUnmappedFieldsToolbarItem = _ref$showToggleUnmapp === void 0 ? true : _ref$showToggleUnmapp,
      _ref$showAddNewMappin = _ref.showAddNewMappingToolbarItem,
      showAddNewMappingToolbarItem = _ref$showAddNewMappin === void 0 ? true : _ref$showAddNewMappin,
      onImportADMArchiveFile = _ref.onImportADMArchiveFile,
      onImportJarFile = _ref.onImportJarFile,
      onExportAtlasFile = _ref.onExportAtlasFile,
      onResetAtlasmap = _ref.onResetAtlasmap,
      onAbout = _ref.onAbout;

  var _useAtlasmap = useAtlasmap(),
      amToggleMappingPreview = _useAtlasmap.toggleMappingPreview,
      amToggleShowMappedFields = _useAtlasmap.toggleShowMappedFields,
      amToggleShowUnmappedFields = _useAtlasmap.toggleShowUnmappedFields,
      newMapping = _useAtlasmap.newMapping;

  var _useState = React.useState('ColumnMapper'),
      activeView = _useState[0],
      setActiveView = _useState[1];

  var _useToggle = useToggle(false, amToggleMappingPreview),
      showMappingPreview = _useToggle.state,
      toggleShowMappingPreview = _useToggle.toggle;

  var _useToggle2 = useToggle(true),
      showTypes = _useToggle2.state,
      toggleShowTypes = _useToggle2.toggle;

  var _useToggle3 = useToggle(true, amToggleShowMappedFields),
      showMappedFields = _useToggle3.state,
      toggleShowMappedFields = _useToggle3.toggle;

  var _useToggle4 = useToggle(true, amToggleShowUnmappedFields),
      showUnmappedFields = _useToggle4.state,
      toggleShowUnmappedFields = _useToggle4.toggle;

  var contextToolbar = React.useMemo(function () {
    return React__default.createElement(ContextToolbar, null, (showImportAtlasFileToolbarItem || showImportJarFileToolbarItem || showExportAtlasFileToolbarItem || showResetToolbarItem) && React__default.createElement(reactCore.ToolbarGroup, {
      variant: "button-group",
      spacer: {
        "default": 'spacerMd'
      }
    }, React__default.createElement(AtlasmapToolbarItem, {
      showImportAtlasFileToolbarItem: showImportAtlasFileToolbarItem,
      showImportJarFileToolbarItem: showImportJarFileToolbarItem,
      showExportAtlasFileToolbarItem: showExportAtlasFileToolbarItem,
      showResetToolbarItem: showResetToolbarItem,
      onImportAtlasFile: onImportADMArchiveFile,
      onImportJarFile: onImportJarFile,
      onExportAtlasFile: onExportAtlasFile,
      onResetAtlasmap: onResetAtlasmap
    })), (showColumnMapperViewToolbarItem || showMappingTableViewToolbarItem || showNamespaceTableViewToolbarItem) && React__default.createElement(reactCore.ToolbarGroup, {
      variant: "icon-button-group",
      spacer: {
        "default": 'spacerMd'
      }
    }, showColumnMapperViewToolbarItem && React__default.createElement(ToggleColumnMapperViewToolbarItem, {
      toggled: activeView === 'ColumnMapper',
      onClick: function onClick() {
        return setActiveView('ColumnMapper');
      }
    }), showMappingTableViewToolbarItem && React__default.createElement(ToggleMappingTableViewToolbarItem, {
      toggled: activeView === 'MappingTable',
      onClick: function onClick() {
        return setActiveView('MappingTable');
      }
    }), showNamespaceTableViewToolbarItem && React__default.createElement(ToggleNamespaceTableViewToolbarItem, {
      toggled: activeView === 'NamespaceTable',
      onClick: function onClick() {
        return setActiveView('NamespaceTable');
      }
    })), React__default.createElement(reactCore.ToolbarGroup, {
      variant: "icon-button-group"
    }, showToggleMappingPreviewToolbarItem && (activeView === 'ColumnMapper' || activeView === 'MappingTable') && React__default.createElement(ToggleMappingPreviewToolbarItem, {
      toggled: showMappingPreview,
      onClick: toggleShowMappingPreview
    }), showToggleTypesToolbarItem && (activeView === 'ColumnMapper' || activeView === 'MappingTable') && React__default.createElement(ToggleTypesToolbarItem, {
      toggled: showTypes,
      onClick: toggleShowTypes
    }), showToggleMappedFieldsToolbarItem && activeView === 'ColumnMapper' && React__default.createElement(ToggleMappedFieldsToolbarItem, {
      toggled: showMappedFields,
      onClick: toggleShowMappedFields
    }), showToggleUnmappedFieldsToolbarItem && activeView === 'ColumnMapper' && React__default.createElement(ToggleUnmappedFieldsToolbarItem, {
      toggled: showUnmappedFields,
      onClick: toggleShowUnmappedFields
    }), showAddNewMappingToolbarItem && (activeView === 'ColumnMapper' || activeView === 'MappingTable') && React__default.createElement(AddMappingToolbarItem, {
      onClick: newMapping
    }), showAddNewMappingToolbarItem && (activeView === 'ColumnMapper' || activeView === 'MappingTable') && React__default.createElement(AboutToolbarItem, {
      onClick: onAbout
    })));
  }, [showImportAtlasFileToolbarItem, showImportJarFileToolbarItem, showExportAtlasFileToolbarItem, showResetToolbarItem, onImportADMArchiveFile, onImportJarFile, onExportAtlasFile, onResetAtlasmap, onAbout, showColumnMapperViewToolbarItem, showMappingTableViewToolbarItem, showNamespaceTableViewToolbarItem, activeView, showToggleMappingPreviewToolbarItem, showMappingPreview, toggleShowMappingPreview, showToggleTypesToolbarItem, showTypes, toggleShowTypes, showToggleMappedFieldsToolbarItem, showMappedFields, toggleShowMappedFields, showToggleUnmappedFieldsToolbarItem, showUnmappedFields, toggleShowUnmappedFields, showAddNewMappingToolbarItem, newMapping]);
  return {
    activeView: activeView,
    showMappingPreview: showMappingPreview,
    showTypes: showTypes,
    showMappedFields: showMappedFields,
    showUnmappedFields: showUnmappedFields,
    contextToolbar: contextToolbar
  };
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function useConfirmationDialog(title, content) {
  var _useToggle = useToggle(false),
      state = _useToggle.state,
      toggleOn = _useToggle.toggleOn,
      toggleOff = _useToggle.toggleOff;

  var onConfirmCb = React.useRef(null);

  var onConfirm = function onConfirm() {
    if (onConfirmCb.current) {
      onConfirmCb.current();
    }

    toggleOff();
  };

  var openDialog = function openDialog(confirmCb) {
    onConfirmCb.current = confirmCb;
    toggleOn();
  };

  return [React__default.createElement(ConfirmationDialog, {
    key: 'confirmation-dialog-' + title,
    title: title,
    onCancel: toggleOff,
    onConfirm: onConfirm,
    isOpen: state
  }, React__default.createElement(reactCore.TextContent, null, content)), openDialog];
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function useConstantDialog(title) {
  var _useState = React.useState(null),
      onConstantCb = _useState[0],
      setOnConstantCb = _useState[1];

  var _useState2 = React.useState({
    name: '',
    value: '',
    valueType: core.constantTypes[0][0]
  }),
      initialConstant = _useState2[0],
      setInitialConstant = _useState2[1];

  var _useState3 = React.useState(null),
      constantsDoc = _useState3[0],
      setConstants = _useState3[1];

  var _useToggle = useToggle(false),
      state = _useToggle.state,
      toggleOn = _useToggle.toggleOn,
      toggleOff = _useToggle.toggleOff;

  var onConfirm = React.useCallback(function (constant) {
    if (onConstantCb) {
      if ((initialConstant === null || initialConstant === void 0 ? void 0 : initialConstant.name) !== constant.name) {
        onConstantCb(constant, initialConstant === null || initialConstant === void 0 ? void 0 : initialConstant.name);
      } else {
        onConstantCb(constant);
      }

      toggleOff();
    }
  }, [initialConstant, onConstantCb, toggleOff]);

  function onValidation(name) {
    var fieldNameExists = false;

    if (constantsDoc) {
      // Ensure constant name is unique
      var fields = constantsDoc.fields.filter(function (fieldOrGroup) {
        return fieldOrGroup.name === name;
      });
      fieldNameExists = fields.length > 0;
    }

    return name === (initialConstant === null || initialConstant === void 0 ? void 0 : initialConstant.name) || !fieldNameExists;
  }

  var dialog = React__default.createElement(ConstantDialog, Object.assign({
    title: title,
    isOpen: state,
    valueTypeOptions: core.constantTypes.map(function (_ref) {
      var value = _ref[0],
          label = _ref[1];
      return {
        value: value,
        label: label
      };
    }),
    onCancel: toggleOff,
    onConfirm: onConfirm,
    onValidation: onValidation
  }, initialConstant || {}));
  var onOpenConstantDialog = React.useCallback(function (callback, constantsDoc, constant) {
    // we use a closure to set the state here else React will think that callback
    // is the function to retrieve the state and will call it immediately.
    setOnConstantCb(function () {
      return callback;
    });

    if (constant) {
      setInitialConstant(constant);
    }

    if (constantsDoc) {
      setConstants(constantsDoc);
    }

    toggleOn();
  }, [toggleOn]);
  return [dialog, onOpenConstantDialog];
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function useCustomClassDialog(title) {
  var _useState = React.useState(null),
      onCustomClassCb = _useState[0],
      setOnCustomClassCb = _useState[1];

  var _useState2 = React.useState(null),
      initialCustomClass = _useState2[0],
      setInitialCustomClass = _useState2[1];

  var _useState3 = React.useState([]),
      customClassNames = _useState3[0],
      setCustomClassNames = _useState3[1];

  var _useToggle = useToggle(false),
      state = _useToggle.state,
      toggleOn = _useToggle.toggleOn,
      toggleOff = _useToggle.toggleOff;

  var onConfirm = React.useCallback(function (constant) {
    if (onCustomClassCb) {
      onCustomClassCb(constant);
      toggleOff();
    }
  }, [onCustomClassCb, toggleOff]);

  var getCustomClassNames = function getCustomClassNames() {
    try {
      return Promise.resolve(getCustomClassNameOptions()).then(function (_getCustomClassNameOp) {
        setCustomClassNames(_getCustomClassNameOp);
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var dialog = React__default.createElement(CustomClassDialog, Object.assign({
    title: title,
    isOpen: state,
    customClassName: customClassNames ? customClassNames[0] : '',
    customClassNames: customClassNames,
    collectionTypeOptions: core.collectionTypes.map(function (_ref) {
      var value = _ref[0],
          label = _ref[1];
      return {
        value: value,
        label: label
      };
    }),
    onCancel: toggleOff,
    onConfirm: onConfirm
  }, initialCustomClass || {
    collectionType: 'NONE'
  }));
  var onOpenCustomClassDialog = React.useCallback(function (callback, constant) {
    // we use a closure to set the state here else React will think that callback
    // is the function to retrieve the state and will call it immediately.
    setOnCustomClassCb(function () {
      return callback;
    });

    if (constant) {
      setInitialCustomClass(constant);
    }

    getCustomClassNames();
    toggleOn();
  }, [toggleOn]);
  return [dialog, onOpenCustomClassDialog];
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function useDeleteConstantDialog() {
  var _useAtlasmap = useAtlasmap(),
      deleteConstant = _useAtlasmap.deleteConstant;

  var _useConfirmationDialo = useConfirmationDialog('Delete constant?', 'Are you sure you want to delete the selected constant and remove any associated mapping references?'),
      deleteConstantDialog = _useConfirmationDialo[0],
      openDeleteConstantDialog = _useConfirmationDialo[1];

  var onDeleteConstant = React.useCallback(function (constName) {
    return openDeleteConstantDialog(function () {
      return deleteConstant(constName);
    });
  }, [deleteConstant, openDeleteConstantDialog]);
  return [deleteConstantDialog, onDeleteConstant];
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function useDeleteDocumentDialog() {
  var _useAtlasmap = useAtlasmap(),
      deleteAtlasFile = _useAtlasmap.deleteAtlasFile;

  var _useConfirmationDialo = useConfirmationDialog('Delete selected document?', 'Are you sure you want to delete the selected document and remove any associated mappings?'),
      deleteDialog = _useConfirmationDialo[0],
      openDeleteDialog = _useConfirmationDialo[1];

  var onDeleteDocument = React.useCallback(function (id, isSource) {
    return openDeleteDialog(function () {
      return deleteAtlasFile(id, isSource);
    });
  }, [deleteAtlasFile, openDeleteDialog]);
  return [deleteDialog, onDeleteDocument];
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var docId = '';

function useCreateToast() {
  var _useToggle = useToggle(false),
      state = _useToggle.state,
      toggleOn = _useToggle.toggleOn,
      toggleOff = _useToggle.toggleOff;

  var onExecuteCb = React.useRef(null);

  var onClose = function onClose() {
    toggleOff();
  };

  var description = 'Document ID ' + docId + ' copied to clipboard.';

  var openToast = function openToast(executeCb) {
    onExecuteCb.current = executeCb;
    toggleOn();
  };

  var toastElement = React__default.createElement(TimedToast, {
    variant: 'info',
    title: 'Capture Document ID',
    key: docId,
    onClose: onClose,
    onTimeout: onClose
  }, description);

  if (state) {
    if (onExecuteCb.current) {
      onExecuteCb.current();
    }
  } else {
    toastElement = React__default.createElement("span", null);
  }

  return [toastElement, openToast];
}

function useCaptureDocumentIDToast() {
  var _useCreateToast = useCreateToast(),
      captureDocumentIDToast = _useCreateToast[0],
      openCaptureDocumentIDToast = _useCreateToast[1];

  var onCaptureDocumentID = React.useCallback(function (documentId) {
    docId = documentId;
    openCaptureDocumentIDToast(function () {
      return copyToClipboard(documentId);
    });
  }, [openCaptureDocumentIDToast]);
  return [captureDocumentIDToast, onCaptureDocumentID];
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function useChangeDocumentNameDialog() {
  var _useState = React.useState(null),
      onDocumentNameCb = _useState[0],
      setOnChangeDocumentNameCb = _useState[1];

  var _useState2 = React.useState({
    id: '',
    name: '',
    isSource: false
  }),
      initialDocumentName = _useState2[0],
      setInitialDocumentName = _useState2[1];

  var _useToggle = useToggle(false),
      state = _useToggle.state,
      toggleOn = _useToggle.toggleOn,
      toggleOff = _useToggle.toggleOff;

  var onConfirm = React.useCallback(function (documentNameInfo) {
    if (onDocumentNameCb) {
      onDocumentNameCb(documentNameInfo);
      toggleOff();
    }
  }, [onDocumentNameCb, toggleOff]);
  var dialog = React__default.createElement(ChangeDocumentNameDialog, Object.assign({
    isOpen: state,
    onCancel: toggleOff,
    onConfirm: onConfirm
  }, initialDocumentName || {}));
  var onOpenChangeDocumentNameDialog = React.useCallback(function (callback, documentNameInfo) {
    setOnChangeDocumentNameCb(function () {
      return callback;
    });
    setInitialDocumentName(documentNameInfo);
    toggleOn();
  }, [toggleOn]);
  return [dialog, onOpenChangeDocumentNameDialog];
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function useDeleteMappingDialog() {
  var _useAtlasmap = useAtlasmap(),
      removeMapping = _useAtlasmap.removeMapping,
      deselectMapping = _useAtlasmap.deselectMapping;

  var _useConfirmationDialo = useConfirmationDialog('Remove Mapping?', 'Are you sure you want to remove the current mapping?'),
      deleteMappingDialog = _useConfirmationDialo[0],
      openDeleteMappingDialog = _useConfirmationDialo[1];

  var onDeleteMapping = React.useCallback(function (mapping) {
    openDeleteMappingDialog(function () {
      removeMapping(mapping.mapping);
      deselectMapping();
    });
  }, [deselectMapping, openDeleteMappingDialog, removeMapping]);
  return [deleteMappingDialog, onDeleteMapping];
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function useDeletePropertyDialog() {
  var _useAtlasmap = useAtlasmap(),
      deleteProperty = _useAtlasmap.deleteProperty;

  var _useConfirmationDialo = useConfirmationDialog('Delete property?', 'Are you sure you want to delete the selected property and remove any associated mapping references?'),
      deletePropertyDialog = _useConfirmationDialo[0],
      openDeletePropertyDialog = _useConfirmationDialo[1];

  var onDeleteProperty = React.useCallback(function (propName, propScope, isSource) {
    return openDeletePropertyDialog(function () {
      return deleteProperty(propName, propScope, isSource);
    });
  }, [deleteProperty, openDeletePropertyDialog]);
  return [deletePropertyDialog, onDeleteProperty];
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function useImportADMArchiveDialog() {
  var _useAtlasmap = useAtlasmap(),
      importADMArchiveFile = _useAtlasmap.importADMArchiveFile;

  var _useConfirmationDialo = useConfirmationDialog('Import ADM archive file?', 'Importing a new ADM archive file will discard all unsaved changes. To save the current mappings, use the Export feature.'),
      ImportADMArchiveDialog = _useConfirmationDialo[0],
      openImportADMArchiveDialog = _useConfirmationDialo[1];

  var onImportADMArchive = React.useCallback(function (file) {
    return openImportADMArchiveDialog(function () {
      return importADMArchiveFile(file);
    });
  }, [importADMArchiveFile, openImportADMArchiveDialog]);
  return [ImportADMArchiveDialog, onImportADMArchive];
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function useExportADMArchiveDialog() {
  var _useToggle = useToggle(false),
      state = _useToggle.state,
      toggleOn = _useToggle.toggleOn,
      toggleOff = _useToggle.toggleOff;

  var _useAtlasmap = useAtlasmap(),
      exportADMArchiveFile = _useAtlasmap.exportADMArchiveFile;

  var onExportADMArchiveFile = React.useCallback(function (filename) {
    exportADMArchiveFile(filename);
    toggleOff();
  }, [exportADMArchiveFile, toggleOff]);
  var dialog = React__default.createElement(ExportCatalogDialog, {
    isOpen: state,
    onCancel: toggleOff,
    onConfirm: onExportADMArchiveFile
  });
  return [dialog, toggleOn];
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function useParametersDialog(title) {
  var _useState = React.useState(null),
      onParametersCb = _useState[0],
      setOnParametersCb = _useState[1];

  var _useState2 = React.useState([]),
      parameters = _useState2[0],
      setParameters = _useState2[1];

  var _useToggle = useToggle(false),
      state = _useToggle.state,
      toggleOn = _useToggle.toggleOn,
      toggleOff = _useToggle.toggleOff;

  var reset = React.useCallback(function () {
    setParameters([]);
  }, []);
  var onConfirm = React.useCallback(function (parameters) {
    if (onParametersCb) {
      onParametersCb(parameters);
      toggleOff();
    }
  }, [onParametersCb, toggleOff]);
  var dialog = React__default.createElement(ParametersDialog, {
    title: title,
    isOpen: state,
    onCancel: toggleOff,
    onConfirm: onConfirm,
    parameters: parameters
  });
  var onOpenParametersDialog = React.useCallback(function (callback, parameters) {
    setOnParametersCb(function () {
      return callback;
    });

    if (parameters) {
      setParameters(parameters);
    }

    toggleOn();
  }, [toggleOn]);
  React.useEffect(reset, [reset]);
  return [dialog, onOpenParametersDialog];
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function useSpecifyInstanceSchemaDialog(defaultSchema) {
  var dialogState = useToggle(false);
  var isSchema = useToggle(defaultSchema);
  var onConfirmCb = React.useRef(null);

  var onConfirm = function onConfirm() {
    if (onConfirmCb.current) {
      onConfirmCb.current(isSchema.state);
    }

    dialogState.toggleOff();
  };

  var openDialog = function openDialog(confirmCb) {
    onConfirmCb.current = confirmCb;

    if (defaultSchema) {
      isSchema.toggleOn();
    } else {
      isSchema.toggleOff();
    }

    dialogState.toggleOn();
  };

  var handleInstanceChange = function handleInstanceChange() {
    isSchema.toggleOff();
  };

  var handleSchemaChange = function handleSchemaChange() {
    isSchema.toggleOn();
  };

  return [React__default.createElement(reactCore.Modal, {
    key: "specify-instance-schema-dialog",
    variant: "small",
    title: 'Specify Instance/ Schema',
    description: 'Distinguish between instance and schema imported file formats.',
    isOpen: dialogState.state,
    onClose: dialogState.toggleOff,
    actions: [React__default.createElement(reactCore.Button, {
      key: 'confirm',
      variant: 'primary',
      onClick: onConfirm,
      "aria-label": "Ok",
      "data-testid": 'specify-instance-schema-dialog-ok-button-test',
      isDisabled: !onConfirm,
      style: {
        display: 'flex',
        marginLeft: 'auto'
      }
    }, "OK")]
  }, React__default.createElement(React__default.Fragment, null, React__default.createElement(reactCore.Radio, {
    isChecked: !isSchema.state,
    name: "instance",
    onChange: handleInstanceChange,
    label: "Instance",
    id: "instance-radio",
    "data-testid": 'instance-radio-button-test'
  }), React__default.createElement(reactCore.Radio, {
    isChecked: isSchema.state,
    name: "schema",
    onChange: handleSchemaChange,
    label: "Schema",
    id: "schema-radio",
    "data-testid": 'schema-radio-button-test'
  }))), openDialog];
}

function useImportDocumentDialog() {
  var _useAtlasmap = useAtlasmap(),
      configModel = _useAtlasmap.configModel,
      documentExists = _useAtlasmap.documentExists,
      importInstanceSchema = _useAtlasmap.importInstanceSchema;

  var _useConfirmationDialo = useConfirmationDialog('Confirm document import', 'A document with the selected name has already been imported into the specified panel. It will appear in addition to the pre-existing document.'),
      importDialog = _useConfirmationDialo[0],
      openImportDialog = _useConfirmationDialo[1];

  var _useParametersDialog = useParametersDialog('Select CSV Processing Parameters'),
      parametersDialog = _useParametersDialog[0],
      openParametersDialog = _useParametersDialog[1];

  var _useState = React.useState(false),
      defaultSchema = _useState[0],
      setDefaultSchema = _useState[1];

  var _useSpecifyInstanceSc = useSpecifyInstanceSchemaDialog(defaultSchema),
      specifyInstanceSchemaDialog = _useSpecifyInstanceSc[0],
      openSpecifyInstanceSchema = _useSpecifyInstanceSc[1];

  var importFile = React.useCallback(function (selectedFile, isSource) {
    if (selectedFile.name) {
      var userFileSplit = selectedFile.name.split('.');
      var userFileSuffix = userFileSplit[userFileSplit.length - 1].toUpperCase();

      if (userFileSuffix === 'CSV') {
        openParametersDialog(function (parameters) {
          var inspectionParameters = {};

          for (var _iterator = _createForOfIteratorHelperLoose(parameters), _step; !(_step = _iterator()).done;) {
            var parameter = _step.value;
            inspectionParameters[parameter.name] = parameter.value;
          }

          importInstanceSchema(selectedFile, configModel, isSource, false, inspectionParameters);
        }, core.getCsvParameterOptions());
        return;
      }

      setDefaultSchema(userFileSuffix === 'XSD' ? true : false);
      openSpecifyInstanceSchema(function (isSchema) {
        importInstanceSchema(selectedFile, configModel, isSource, isSchema);
      });
    }
  }, [configModel, importInstanceSchema, openParametersDialog, openSpecifyInstanceSchema]);
  var onImportDocument = React.useCallback(function (selectedFile, isSource) {
    if (documentExists(selectedFile, isSource)) {
      openImportDialog(function () {
        return importFile(selectedFile, isSource);
      });
    } else {
      importFile(selectedFile, isSource);
    }
  }, [documentExists, importFile, openImportDialog]);
  return [React__default.createElement(React__default.Fragment, null, importDialog, parametersDialog, specifyInstanceSchemaDialog), onImportDocument];
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function useNamespaceDialog(title) {
  var _useState = React.useState(null),
      onNamespaceCb = _useState[0],
      setOnNamespaceCb = _useState[1];

  var _useState2 = React.useState(null),
      initialNamespace = _useState2[0],
      setInitialNamespace = _useState2[1];

  var _useToggle = useToggle(false),
      state = _useToggle.state,
      toggleOn = _useToggle.toggleOn,
      toggleOff = _useToggle.toggleOff;

  var onConfirm = React.useCallback(function (namespace) {
    if (onNamespaceCb) {
      onNamespaceCb(namespace);
      toggleOff();
    }
  }, [onNamespaceCb, toggleOff]);
  var dialog = React__default.createElement(NamespaceDialog, Object.assign({
    title: title,
    isOpen: state,
    onCancel: toggleOff,
    onConfirm: onConfirm
  }, initialNamespace || {}));
  var onOpenNamespaceDialog = React.useCallback(function (callback, namespace) {
    // we use a closure to set the state here else React will think that callback
    // is the function to retrieve the state and will call it immediately.
    setOnNamespaceCb(function () {
      return callback;
    });

    if (namespace) {
      setInitialNamespace(namespace);
    }

    toggleOn();
  }, [toggleOn]);
  return [dialog, onOpenNamespaceDialog];
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function usePropertyDialog(title, scopeOptions) {
  var _useState = React.useState(null),
      onPropertyCb = _useState[0],
      setOnPropertyCb = _useState[1];

  var _useState2 = React.useState({
    name: '',
    valueType: core.propertyTypes[0][0],
    scope: scopeOptions[0].value
  }),
      initialProperty = _useState2[0],
      setInitialProperty = _useState2[1];

  var _useState3 = React.useState(null),
      properties = _useState3[0],
      setProperties = _useState3[1];

  var _useToggle = useToggle(false),
      state = _useToggle.state,
      toggleOn = _useToggle.toggleOn,
      toggleOff = _useToggle.toggleOff;

  var onConfirm = React.useCallback(function (property) {
    if (onPropertyCb) {
      onPropertyCb(property);
      toggleOff();
    }
  }, [onPropertyCb, toggleOff]);

  function onValidation(name, scope) {
    var fieldNameExists = false;

    if (properties) {
      // Ensure proerty name/scope combination is unique
      var fields = properties.fields.filter(function (fieldOrGroup) {
        return fieldOrGroup.name === name && fieldOrGroup.amField.scope === scope;
      });
      fieldNameExists = fields.length > 0;
    }

    return name === (initialProperty === null || initialProperty === void 0 ? void 0 : initialProperty.name) && scope === initialProperty.scope || !fieldNameExists;
  }

  var dialog = React__default.createElement(PropertyDialog, Object.assign({
    title: title,
    valueTypeOptions: core.propertyTypes.map(function (_ref) {
      var value = _ref[0],
          label = _ref[1];
      return {
        value: value,
        label: label
      };
    }),
    scopeOptions: scopeOptions,
    isOpen: state,
    onCancel: toggleOff,
    onConfirm: onConfirm,
    onValidation: onValidation
  }, initialProperty || {}));
  var onOpenPropertyDialog = React.useCallback(function (callback, properties, property) {
    // we use a closure to set the state here else React will think that callback
    // is the function to retrieve the state and will call it immediately.
    setOnPropertyCb(function () {
      return callback;
    });

    if (property) {
      setInitialProperty(property);
    } // Set properties even if null to reset values when switching panels.


    setProperties(properties);
    toggleOn();
  }, [toggleOn]);
  return [dialog, onOpenPropertyDialog];
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function useRemoveMappedFieldDialog() {
  var _useConfirmationDialo = useConfirmationDialog('Remove field?', 'Are you sure you want to remove this field?'),
      removeMappedFieldDialog = _useConfirmationDialo[0],
      openRemoveMappedFieldDialog = _useConfirmationDialo[1];

  var onRemoveMappedField = React.useCallback(function (removeMappedField) {
    return openRemoveMappedFieldDialog(removeMappedField);
  }, [openRemoveMappedFieldDialog]);
  return [removeMappedFieldDialog, onRemoveMappedField];
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function useResetAtlasmapDialog() {
  var _useAtlasmap = useAtlasmap(),
      resetAtlasmap = _useAtlasmap.resetAtlasmap;

  var _useConfirmationDialo = useConfirmationDialog('Reset All Mappings and Imports?', 'Are you sure you want to reset all mappings and clear all imported documents?'),
      resetDialog = _useConfirmationDialo[0],
      openResetDialog = _useConfirmationDialo[1];

  var onResetAtlasmap = React.useCallback(function () {
    return openResetDialog(resetAtlasmap);
  }, [openResetDialog, resetAtlasmap]);
  return [resetDialog, onResetAtlasmap];
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function useAboutDialog() {
  var _useAtlasmap = useAtlasmap(),
      getRuntimeVersion = _useAtlasmap.getRuntimeVersion,
      getUIVersion = _useAtlasmap.getUIVersion;

  var uiVersion = getUIVersion();

  var _useState = React.useState('0.0'),
      runtimeVersion = _useState[0],
      setRuntimeVersion = _useState[1];

  var _useToggle = useToggle(false),
      state = _useToggle.state,
      toggleOn = _useToggle.toggleOn,
      toggleOff = _useToggle.toggleOff;

  var dialog = React__default.createElement(AboutDialog, {
    title: "AtlasMap Data Mapper",
    isOpen: state,
    onClose: toggleOff,
    uiVersion: uiVersion,
    runtimeVersion: runtimeVersion
  });
  var onAboutDialog = React.useCallback(function () {
    getRuntimeVersion().then(function (body) {
      setRuntimeVersion(body);
      toggleOn();
    })["catch"](function (error) {
      setRuntimeVersion(error);
      toggleOn();
    });
  }, [toggleOn, getRuntimeVersion]);
  return [dialog, onAboutDialog];
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function useToggleExpressionModeDialog() {
  var _useAtlasmap = useAtlasmap(),
      mappingHasSourceCollection = _useAtlasmap.mappingHasSourceCollection,
      toggleExpressionMode = _useAtlasmap.toggleExpressionMode;

  var _useConfirmationDialo = useConfirmationDialog('Disable Expression?', 'If you disable an expression with a source collection, all source fields will be removed from the mapping.  Proceed with expression disable?'),
      toggleExpressionModeDialog = _useConfirmationDialo[0],
      openToggleExpressionModeDialog = _useConfirmationDialo[1];

  var onToggleExpressionMode = React.useCallback(function () {
    if (mappingHasSourceCollection()) {
      openToggleExpressionModeDialog(toggleExpressionMode);
    } else {
      toggleExpressionMode();
    }
  }, [mappingHasSourceCollection, openToggleExpressionModeDialog, toggleExpressionMode]);
  return [toggleExpressionModeDialog, onToggleExpressionMode];
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
/**
 * Enumeration mapping occurs through a "lookup" table.
 */

function useEditMappingEnumerationDialog() {
  var _useToggle = useToggle(false),
      state = _useToggle.state,
      toggleOn = _useToggle.toggleOn,
      toggleOff = _useToggle.toggleOff;

  var _useState = React.useState([]),
      enumerationValues = _useState[0],
      setEnumerationValues = _useState[1];

  var getEnumValues = function getEnumValues() {
    setEnumerationValues(getEnumerationValues());
  };

  var onConfirm = React.useCallback(function () {
    updateEnumerationValues(enumerationValues);
    toggleOff();
  }, [enumerationValues, toggleOff]);
  var dialog = React__default.createElement(ConfirmationDialog, {
    title: 'Map Enumeration Values',
    description: 'Map enumeration source values to target values.',
    onCancel: toggleOff,
    onConfirm: onConfirm,
    isOpen: state
  }, state && enumerationValues && enumerationValues.map(function (value, idx) {
    return React__default.createElement("div", {
      key: idx
    }, React__default.createElement(LookupTableDialog, {
      enumerationValue: value,
      sourceKey: idx,
      isOpen: state
    }));
  }));
  var onOpenDialog = React.useCallback(function () {
    getEnumValues();
    toggleOn();
  }, [toggleOn]);
  return [dialog, onOpenDialog];
}

function useAtlasmapDialogs(_ref) {
  var modalContainer = _ref.modalContainer;

  var _useAtlasmap = useAtlasmap(),
      configModel = _useAtlasmap.configModel,
      selectedMapping = _useAtlasmap.selectedMapping,
      createConstant = _useAtlasmap.createConstant,
      editConstant = _useAtlasmap.editConstant,
      createProperty = _useAtlasmap.createProperty,
      editProperty = _useAtlasmap.editProperty,
      createNamespace = _useAtlasmap.createNamespace,
      editNamespace = _useAtlasmap.editNamespace,
      deleteNamespace = _useAtlasmap.deleteNamespace,
      changeDocumentName = _useAtlasmap.changeDocumentName; //#region constant dialogs


  var _useConstantDialog = useConstantDialog('Create Constant'),
      createConstantDialog = _useConstantDialog[0],
      openCreateConstantDialog = _useConstantDialog[1];

  var onCreateConstant = React.useCallback(function (constants, addToActiveMapping) {
    openCreateConstantDialog(function (_ref2) {
      var name = _ref2.name,
          value = _ref2.value,
          valueType = _ref2.valueType;
      createConstant(name, value, valueType, addToActiveMapping);
    }, constants);
  }, [createConstant, openCreateConstantDialog]);

  var _useConstantDialog2 = useConstantDialog('Edit Constant'),
      editConstantDialog = _useConstantDialog2[0],
      openEditConstantDialog = _useConstantDialog2[1];

  var onEditConstant = React.useCallback(function (constant, constants) {
    openEditConstantDialog(function (_ref3, origName) {
      var name = _ref3.name,
          value = _ref3.value,
          valueType = _ref3.valueType;
      editConstant(name, value, valueType, origName);
    }, constants, constant);
  }, [editConstant, openEditConstantDialog]);

  var _useDeleteConstantDia = useDeleteConstantDialog(),
      deleteConstantDialog = _useDeleteConstantDia[0],
      onDeleteConstant = _useDeleteConstantDia[1]; //#endregion
  //#region property dialogs


  var _useState = React.useState(getPropertyScopeOptions(true)),
      scopeOptions = _useState[0],
      setScopeOptions = _useState[1];

  var _usePropertyDialog = usePropertyDialog('Create Property', scopeOptions),
      createPropertyDialog = _usePropertyDialog[0],
      openCreatePropertyDialog = _usePropertyDialog[1];

  var onCreateProperty = React.useCallback(function (isSource, properties, addToActiveMapping) {
    setScopeOptions(getPropertyScopeOptions(isSource));
    openCreatePropertyDialog(function (_ref4) {
      var name = _ref4.name,
          valueType = _ref4.valueType,
          scope = _ref4.scope;
      createProperty(name, valueType, scope, isSource, addToActiveMapping);
    }, properties);
  }, [createProperty, openCreatePropertyDialog]);

  var _usePropertyDialog2 = usePropertyDialog('Edit Property', scopeOptions),
      editPropertyDialog = _usePropertyDialog2[0],
      openEditPropertyDialog = _usePropertyDialog2[1];

  var onEditProperty = React.useCallback(function (property, isSource, properties) {
    setScopeOptions(getPropertyScopeOptions(isSource));
    openEditPropertyDialog(function (_ref5) {
      var name = _ref5.name,
          valueType = _ref5.valueType,
          scope = _ref5.scope;
      editProperty(property.name, valueType, property.scope, isSource, name, scope);
    }, properties, property);
  }, [editProperty, openEditPropertyDialog]);

  var _useDeletePropertyDia = useDeletePropertyDialog(),
      deletePropertyDialog = _useDeletePropertyDia[0],
      onDeleteProperty = _useDeletePropertyDia[1]; //#endregion
  //#region atlasmap catalog


  var _useImportADMArchiveD = useImportADMArchiveDialog(),
      importADMArchiveDialog = _useImportADMArchiveD[0],
      onImportADMArchive = _useImportADMArchiveD[1];

  var _useExportADMArchiveD = useExportADMArchiveDialog(),
      exportADMArchiveDialog = _useExportADMArchiveD[0],
      onExportADMArchive = _useExportADMArchiveD[1];

  var _useResetAtlasmapDial = useResetAtlasmapDialog(),
      resetDialog = _useResetAtlasmapDial[0],
      onResetAtlasmap = _useResetAtlasmapDial[1];

  var _useAboutDialog = useAboutDialog(),
      aboutDialog = _useAboutDialog[0],
      onAbout = _useAboutDialog[1];

  var _useToggleExpressionM = useToggleExpressionModeDialog(),
      toggleExpressionModeDialog = _useToggleExpressionM[0],
      onToggleExpressionMode = _useToggleExpressionM[1]; //#endregion
  //#region document dialogs


  var _useImportDocumentDia = useImportDocumentDialog(),
      importDocumentDialog = _useImportDocumentDia[0],
      onImportDocument = _useImportDocumentDia[1];

  var _useDeleteDocumentDia = useDeleteDocumentDialog(),
      deleteDocumentDialog = _useDeleteDocumentDia[0],
      onDeleteDocument = _useDeleteDocumentDia[1];

  var _useCaptureDocumentID = useCaptureDocumentIDToast(),
      captureDocumentNameToast = _useCaptureDocumentID[0],
      onCaptureDocumentID = _useCaptureDocumentID[1];

  var _useChangeDocumentNam = useChangeDocumentNameDialog(),
      changeDocumentNameDialog = _useChangeDocumentNam[0],
      openChangeDocumentNameDialog = _useChangeDocumentNam[1];

  var onChangeDocumentName = React.useCallback(function (docNameInfo) {
    openChangeDocumentNameDialog(function (_ref6) {
      var id = _ref6.id,
          name = _ref6.name,
          isSource = _ref6.isSource;
      changeDocumentName(id, name, isSource);
    }, docNameInfo);
  }, [changeDocumentName, openChangeDocumentNameDialog]); //#endregion
  //#region namespace table dialogs

  var _useNamespaceDialog = useNamespaceDialog('Create namespace'),
      createNamespaceDialog = _useNamespaceDialog[0],
      openCreateNamespaceDialog = _useNamespaceDialog[1];

  var onCreateNamespace = React.useCallback(function (docName) {
    openCreateNamespaceDialog(function (_ref7) {
      var alias = _ref7.alias,
          uri = _ref7.uri,
          locationUri = _ref7.locationUri,
          targetNamespace = _ref7.targetNamespace;
      return createNamespace(docName, alias, uri, locationUri, targetNamespace);
    });
  }, [createNamespace, openCreateNamespaceDialog]);

  var _useNamespaceDialog2 = useNamespaceDialog('Edit namespace'),
      editNamespaceDialog = _useNamespaceDialog2[0],
      openEditNamespaceDialog = _useNamespaceDialog2[1];

  var onEditNamespace = React.useCallback(function (docName, namespace) {
    openEditNamespaceDialog(function (_ref8) {
      var alias = _ref8.alias,
          uri = _ref8.uri,
          locationUri = _ref8.locationUri,
          targetNamespace = _ref8.targetNamespace;
      return editNamespace(docName, namespace.alias, alias, uri, locationUri, targetNamespace);
    }, namespace);
  }, [editNamespace, openEditNamespaceDialog]); //#endregion
  //#region mapping support dialogs

  var _useRemoveMappedField = useRemoveMappedFieldDialog(),
      removeMappedFieldDialog = _useRemoveMappedField[0],
      onRemoveMappedField = _useRemoveMappedField[1];

  var _useDeleteMappingDial = useDeleteMappingDialog(),
      deleteMappingDialog = _useDeleteMappingDial[0],
      onDeleteMapping = _useDeleteMappingDial[1];

  var onDeleteSelectedMapping = React.useCallback(function () {
    if (selectedMapping) {
      onDeleteMapping(selectedMapping);
    }
  }, [onDeleteMapping, selectedMapping]);

  var _useEditMappingEnumer = useEditMappingEnumerationDialog(),
      editMappingEnumerationDialog = _useEditMappingEnumer[0],
      onEditMappingEnumeration = _useEditMappingEnumer[1]; //#endregion
  //#region custom class dialogs


  var _useCustomClassDialog = useCustomClassDialog('Load Java Document From Custom Class'),
      createEnableCustomClassDialog = _useCustomClassDialog[0],
      openCreateEnableCustomClassDialog = _useCustomClassDialog[1];

  var onEnableCustomClass = React.useCallback(function (isSource) {
    openCreateEnableCustomClassDialog(function (_ref9) {
      var customClassName = _ref9.customClassName,
          collectionType = _ref9.collectionType;
      return enableCustomClass(configModel, customClassName, collectionType, isSource);
    });
  }, [configModel, openCreateEnableCustomClassDialog]); //#endregion
  //#region CSV processing dialogs

  var _useParametersDialog = useParametersDialog('Edit CSV Processing Parameters'),
      editCSVParamsDialog = _useParametersDialog[0],
      openEditCSVParamsDialog = _useParametersDialog[1];

  function initialCSVParams(docId, isSource) {
    // User-defined CSV parameters.
    var predefinedParameters = getDocCSVParams(docId, isSource); // Complete list of available CSV parameters.

    var initialCSVParameters = core.getCsvParameterOptions();
    var predefinedParamNames = Object.keys(predefinedParameters).map(function (key) {
      return key;
    });
    var predefinedParamValues = Object.values(predefinedParameters).map(function (key) {
      return key;
    }); // Annotate the initial CSV parameters with the predefined values.

    for (var _iterator = _createForOfIteratorHelperLoose(initialCSVParameters.map(function (value, index) {
      return {
        index: index,
        value: value
      };
    })), _step; !(_step = _iterator()).done;) {
      var index = _step.value.index;

      for (var _iterator2 = _createForOfIteratorHelperLoose(predefinedParamNames.map(function (pvalue, pindex) {
        return {
          pindex: pindex,
          pvalue: pvalue
        };
      })), _step2; !(_step2 = _iterator2()).done;) {
        var _step2$value = _step2.value,
            pvalue = _step2$value.pvalue,
            pindex = _step2$value.pindex;

        if (initialCSVParameters[index].name === pvalue) {
          initialCSVParameters[index].value = predefinedParamValues[pindex];
          initialCSVParameters[index].enabled = true;
          break;
        }
      }
    }

    return initialCSVParameters;
  }

  var onEditCSVParams = React.useCallback(function (docId, isSource) {
    openEditCSVParamsDialog(function (parameters) {
      var inspectionParameters = {};

      for (var _iterator3 = _createForOfIteratorHelperLoose(parameters), _step3; !(_step3 = _iterator3()).done;) {
        var parameter = _step3.value;
        inspectionParameters[parameter.name] = parameter.value;
      }

      setDocCSVParams(docId, isSource, inspectionParameters);
    }, initialCSVParams(docId, isSource));
  }, [openEditCSVParamsDialog]); //#endregion

  var _useSpecifyInstanceSc = useSpecifyInstanceSchemaDialog(false),
      specifyInstanceSchemaDialog = _useSpecifyInstanceSc[0],
      onSpecifyInstanceSchema = _useSpecifyInstanceSc[1];

  var portal = React.useMemo(function () {
    return reactDom.createPortal(React__default.createElement(React__default.Fragment, null, importADMArchiveDialog, exportADMArchiveDialog, importDocumentDialog, deleteDocumentDialog, specifyInstanceSchemaDialog, captureDocumentNameToast, changeDocumentNameDialog, createConstantDialog, deleteConstantDialog, editConstantDialog, createPropertyDialog, deletePropertyDialog, editPropertyDialog, resetDialog, aboutDialog, removeMappedFieldDialog, deleteMappingDialog, createEnableCustomClassDialog, createNamespaceDialog, editNamespaceDialog, toggleExpressionModeDialog, editMappingEnumerationDialog, editCSVParamsDialog), modalContainer);
  }, [createConstantDialog, createEnableCustomClassDialog, createNamespaceDialog, createPropertyDialog, deleteConstantDialog, deleteDocumentDialog, captureDocumentNameToast, changeDocumentNameDialog, deleteMappingDialog, deletePropertyDialog, editConstantDialog, editNamespaceDialog, editPropertyDialog, exportADMArchiveDialog, importADMArchiveDialog, importDocumentDialog, specifyInstanceSchemaDialog, modalContainer, removeMappedFieldDialog, resetDialog, aboutDialog, toggleExpressionModeDialog, editMappingEnumerationDialog, editCSVParamsDialog]);
  return {
    handlers: {
      onImportADMArchive: onImportADMArchive,
      onExportADMArchive: onExportADMArchive,
      onCreateConstant: onCreateConstant,
      onDeleteConstant: onDeleteConstant,
      onEditConstant: onEditConstant,
      onCreateProperty: onCreateProperty,
      onDeleteProperty: onDeleteProperty,
      onEditProperty: onEditProperty,
      onResetAtlasmap: onResetAtlasmap,
      onAbout: onAbout,
      onImportDocument: onImportDocument,
      onDeleteDocument: onDeleteDocument,
      onSpecifyInstanceSchema: onSpecifyInstanceSchema,
      onCaptureDocumentID: onCaptureDocumentID,
      onChangeDocumentName: onChangeDocumentName,
      onRemoveMappedField: onRemoveMappedField,
      onDeleteMapping: onDeleteMapping,
      onDeleteSelectedMapping: onDeleteSelectedMapping,
      onEnableCustomClass: onEnableCustomClass,
      onCreateNamespace: onCreateNamespace,
      onEditNamespace: onEditNamespace,
      deleteNamespace: deleteNamespace,
      onToggleExpressionMode: onToggleExpressionMode,
      onEditMappingEnumeration: onEditMappingEnumeration,
      onEditCSVParams: onEditCSVParams
    },
    dialogs: portal
  };
}

/*
    Copyright (C) 2017 Red Hat, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
function useSidebar(_ref) {
  var onCreateConstant = _ref.onCreateConstant,
      _onCreateProperty = _ref.onCreateProperty,
      onRemoveMapping = _ref.onRemoveMapping,
      onEditEnum = _ref.onEditEnum,
      isEnumMapping = _ref.isEnumMapping;

  var _useAtlasmap = useAtlasmap(),
      selectedMapping = _useAtlasmap.selectedMapping,
      deselectMapping = _useAtlasmap.deselectMapping,
      removeMappedFieldFromCurrentMapping = _useAtlasmap.removeMappedFieldFromCurrentMapping,
      fromMappedFieldToIMappingField = _useAtlasmap.fromMappedFieldToIMappingField,
      flatSources = _useAtlasmap.flatSources,
      flatTargets = _useAtlasmap.flatTargets,
      constants = _useAtlasmap.constants,
      sourceProperties = _useAtlasmap.sourceProperties,
      targetProperties = _useAtlasmap.targetProperties,
      canAddToSelectedMapping = _useAtlasmap.canAddToSelectedMapping,
      isFieldAddableToSelection = _useAtlasmap.isFieldAddableToSelection,
      addToCurrentMapping = _useAtlasmap.addToCurrentMapping,
      notifications = _useAtlasmap.notifications,
      markNotificationRead = _useAtlasmap.markNotificationRead,
      mappingExpressionEnabled = _useAtlasmap.mappingExpressionEnabled,
      getMultiplicityActions = _useAtlasmap.getMultiplicityActions,
      getMultiplicityActionDelimiters = _useAtlasmap.getMultiplicityActionDelimiters,
      handleIndexChange = _useAtlasmap.handleIndexChange,
      handleNewTransformation = _useAtlasmap.handleNewTransformation,
      handleRemoveTransformation = _useAtlasmap.handleRemoveTransformation,
      handleTransformationChange = _useAtlasmap.handleTransformationChange,
      handleTransformationArgumentChange = _useAtlasmap.handleTransformationArgumentChange,
      handleMultiplicityChange = _useAtlasmap.handleMultiplicityChange,
      handleMultiplicityArgumentChange = _useAtlasmap.handleMultiplicityArgumentChange;

  return React.useCallback(function () {
    if (selectedMapping) {
      var m = selectedMapping.mapping;
      var sources = m.getMappedFields(true).map(fromMappedFieldToIMappingField);
      var targets = m.getMappedFields(false).map(fromMappedFieldToIMappingField);
      var showSourcesIndex = sources.length > 1 && m.transition.isManyToOneMode() && !m.transition.enableExpression;
      var showTargetsIndex = targets.length > 1 && m.transition.isOneToManyMode() && !m.transition.enableExpression;
      var multiplicityFieldAction = m.transition.transitionFieldAction;
      var multiplicity = undefined;

      if (multiplicityFieldAction) {
        var transformations = getMultiplicityActions(m);
        var transformationsOptions = transformations.map(function (a) {
          return {
            label: core.CommonUtil.toDisplayable(a.name),
            name: a.name,
            value: a.name
          };
        });
        var delimiters = getMultiplicityActionDelimiters();
        var delimitersOptions = delimiters.map(function (a) {
          return {
            name: a.prettyName,
            value: a.actualDelimiter
          };
        });
        multiplicity = {
          name: multiplicityFieldAction.name,
          transformationsOptions: transformationsOptions,
          transformationsArguments: multiplicityFieldAction.argumentValues.map(function (a) {
            var _multiplicityFieldAct, _multiplicityFieldAct2;

            return {
              label: core.CommonUtil.toDisplayable(a.name),
              name: a.name,
              type: (_multiplicityFieldAct = multiplicityFieldAction.definition) === null || _multiplicityFieldAct === void 0 ? void 0 : (_multiplicityFieldAct2 = _multiplicityFieldAct.arguments.find(function (arg) {
                return arg.name === a.name;
              })) === null || _multiplicityFieldAct2 === void 0 ? void 0 : _multiplicityFieldAct2.type,
              value: a.value,
              options: a.name === 'delimiter' ? delimitersOptions : undefined
            };
          }),
          onChange: function onChange(name) {
            return handleMultiplicityChange(multiplicityFieldAction, name);
          },
          onArgumentChange: function onArgumentChange(argumentName, arguemntValue) {
            return handleMultiplicityArgumentChange(multiplicityFieldAction, argumentName, arguemntValue);
          }
        };
      }

      var handleRemoveMappedField = function handleRemoveMappedField(isSource, index) {
        var amField = selectedMapping.mapping.getMappedFieldForIndex('' + (index + 1), isSource);

        if (amField) {
          removeMappedFieldFromCurrentMapping(amField);
        }
      };
      /**
       * @todo Field search has to be consolidated when server side field search is implemented,
       * see {@link MappingExpressionService.executeFieldSearch()} and
       * {@link DocumentManagementService.filterDocumentFields()}
       * https://github.com/atlasmap/atlasmap/issues/603
       */


      var addableSources = [constants === null || constants === void 0 ? void 0 : constants.fields, sourceProperties === null || sourceProperties === void 0 ? void 0 : sourceProperties.fields, flatSources].flatMap(function (fields) {
        return fields ? fields : [];
      }).filter(function (f) {
        return isFieldAddableToSelection('source', f);
      });
      var addableTargets = [targetProperties === null || targetProperties === void 0 ? void 0 : targetProperties.fields, flatTargets].flatMap(function (fields) {
        return fields ? fields : [];
      }).filter(function (f) {
        return isFieldAddableToSelection('target', f);
      });
      return React__default.createElement(MappingDetailsView, {
        notifications: notifications.filter(function (n) {
          return n.mappingId === selectedMapping.id && !n.isRead;
        }),
        sources: sources,
        targets: targets,
        addableSources: addableSources,
        addableTargets: addableTargets,
        onClose: deselectMapping,
        onRemoveMapping: onRemoveMapping,
        onRemoveMappedField: handleRemoveMappedField,
        showSourcesIndex: showSourcesIndex,
        showTargetsIndex: showTargetsIndex,
        mappingExpressionEnabled: mappingExpressionEnabled,
        multiplicity: multiplicity,
        onIndexChange: handleIndexChange,
        onNewTransformation: handleNewTransformation,
        onRemoveTransformation: handleRemoveTransformation,
        onTransformationChange: handleTransformationChange,
        onTransformationArgumentChange: handleTransformationArgumentChange,
        onAddFieldToMapping: function onAddFieldToMapping(_isSource, f) {
          return addToCurrentMapping(f.amField);
        },
        onNotificationRead: markNotificationRead,
        onEditEnum: onEditEnum,
        isEnumMapping: isEnumMapping,
        onCreateConstant: onCreateConstant,
        onCreateProperty: function onCreateProperty(isSource) {
          if (isSource) {
            _onCreateProperty(isSource, sourceProperties, true);
          } else {
            _onCreateProperty(isSource, targetProperties, true);
          }
        },
        canAddToSelectedMapping: canAddToSelectedMapping
      });
    }

    return React__default.createElement(React__default.Fragment, null, "TODO: error");
  }, [selectedMapping, fromMappedFieldToIMappingField, constants, sourceProperties, targetProperties, flatSources, flatTargets, notifications, deselectMapping, onRemoveMapping, onEditEnum, isEnumMapping, handleIndexChange, handleNewTransformation, handleRemoveTransformation, handleTransformationChange, handleTransformationArgumentChange, markNotificationRead, getMultiplicityActions, getMultiplicityActionDelimiters, handleMultiplicityChange, handleMultiplicityArgumentChange, removeMappedFieldFromCurrentMapping, isFieldAddableToSelection, addToCurrentMapping, mappingExpressionEnabled, onCreateConstant, _onCreateProperty, canAddToSelectedMapping]);
}

var Atlasmap = function Atlasmap(_ref) {
  var _ref$allowImport = _ref.allowImport,
      allowImport = _ref$allowImport === void 0 ? true : _ref$allowImport,
      _ref$allowExport = _ref.allowExport,
      allowExport = _ref$allowExport === void 0 ? true : _ref$allowExport,
      _ref$allowReset = _ref.allowReset,
      allowReset = _ref$allowReset === void 0 ? true : _ref$allowReset,
      _ref$allowDelete = _ref.allowDelete,
      allowDelete = _ref$allowDelete === void 0 ? true : _ref$allowDelete,
      _ref$allowCustomJavaC = _ref.allowCustomJavaClasses,
      allowCustomJavaClasses = _ref$allowCustomJavaC === void 0 ? true : _ref$allowCustomJavaC,
      _ref$modalsContainerI = _ref.modalsContainerId,
      modalsContainerId = _ref$modalsContainerI === void 0 ? 'modals' : _ref$modalsContainerI,
      toolbarOptions = _ref.toolbarOptions;

  var _useAtlasmap = useAtlasmap(),
      pending = _useAtlasmap.pending,
      notifications = _useAtlasmap.notifications,
      markNotificationRead = _useAtlasmap.markNotificationRead,
      sourceProperties = _useAtlasmap.sourceProperties,
      targetProperties = _useAtlasmap.targetProperties,
      constants = _useAtlasmap.constants,
      sources = _useAtlasmap.sources,
      targets = _useAtlasmap.targets,
      mappings = _useAtlasmap.mappings,
      selectedMapping = _useAtlasmap.selectedMapping,
      selectMapping = _useAtlasmap.selectMapping,
      onFieldPreviewChange = _useAtlasmap.onFieldPreviewChange,
      searchSources = _useAtlasmap.searchSources,
      searchTargets = _useAtlasmap.searchTargets,
      importJarFile = _useAtlasmap.importJarFile,
      currentMappingExpression = _useAtlasmap.currentMappingExpression,
      executeFieldSearch = _useAtlasmap.executeFieldSearch,
      getFieldEnums = _useAtlasmap.getFieldEnums,
      setSelectedEnumValue = _useAtlasmap.setSelectedEnumValue,
      mappingExpressionAddField = _useAtlasmap.mappingExpressionAddField,
      mappingExpressionClearText = _useAtlasmap.mappingExpressionClearText,
      mappingExpressionInit = _useAtlasmap.mappingExpressionInit,
      mappingExpressionInsertText = _useAtlasmap.mappingExpressionInsertText,
      mappingExpressionObservable = _useAtlasmap.mappingExpressionObservable,
      mappingExpressionRemoveField = _useAtlasmap.mappingExpressionRemoveField,
      mappingExpressionEnabled = _useAtlasmap.mappingExpressionEnabled,
      isMappingExpressionEmpty = _useAtlasmap.isMappingExpressionEmpty,
      trailerId = _useAtlasmap.trailerId,
      canAddToSelectedMapping = _useAtlasmap.canAddToSelectedMapping,
      isFieldAddableToSelection = _useAtlasmap.isFieldAddableToSelection,
      isFieldRemovableFromSelection = _useAtlasmap.isFieldRemovableFromSelection,
      onAddToMapping = _useAtlasmap.onAddToMapping,
      onRemoveFromMapping = _useAtlasmap.onRemoveFromMapping,
      onCreateMapping = _useAtlasmap.onCreateMapping,
      isEnumerationMapping = _useAtlasmap.isEnumerationMapping;

  var _useAtlasmapDialogs = useAtlasmapDialogs({
    modalContainer: document.getElementById(modalsContainerId)
  }),
      handlers = _useAtlasmapDialogs.handlers,
      dialogs = _useAtlasmapDialogs.dialogs;

  var _useContextToolbar = useContextToolbar(_extends({
    showImportAtlasFileToolbarItem: allowImport,
    showImportJarFileToolbarItem: allowImport,
    showExportAtlasFileToolbarItem: allowExport,
    showResetToolbarItem: allowReset
  }, toolbarOptions, {
    onImportADMArchiveFile: handlers.onImportADMArchive,
    onImportJarFile: function onImportJarFile(file) {
      return importJarFile(file);
    },
    onExportAtlasFile: handlers.onExportADMArchive,
    onResetAtlasmap: handlers.onResetAtlasmap,
    onAbout: handlers.onAbout
  })),
      activeView = _useContextToolbar.activeView,
      showMappingPreview = _useContextToolbar.showMappingPreview,
      showTypes = _useContextToolbar.showTypes,
      contextToolbar = _useContextToolbar.contextToolbar;

  var shouldShowMappingPreviewForField = React.useCallback(function (field) {
    return showMappingPreview && !!selectedMapping && field.isConnected && !!field.mappings.find(function (m) {
      return m.id === selectedMapping.id;
    });
  }, [selectedMapping, showMappingPreview]);
  var shouldShowMappingPreview = React.useCallback(function (mapping) {
    return showMappingPreview && !!selectedMapping && mapping.id === selectedMapping.id;
  }, [selectedMapping, showMappingPreview]);
  var expressionToolbar = React__default.createElement(ExpressionToolbar, null, React__default.createElement(ConditionalExpressionInput, {
    mappingExpression: mappingExpressionEnabled ? currentMappingExpression : undefined,
    executeFieldSearch: executeFieldSearch,
    getFieldEnums: getFieldEnums,
    mappingExpressionAddField: mappingExpressionAddField,
    mappingExpressionClearText: mappingExpressionClearText,
    isMappingExpressionEmpty: isMappingExpressionEmpty,
    mappingExpressionInit: mappingExpressionInit,
    mappingExpressionInsertText: mappingExpressionInsertText,
    mappingExpressionObservable: mappingExpressionObservable,
    mappingExpressionRemoveField: mappingExpressionRemoveField,
    trailerId: trailerId,
    disabled: !selectedMapping,
    onToggle: handlers.onToggleExpressionMode,
    setSelectedEnumValue: setSelectedEnumValue
  }));
  var sourceEvents = React.useMemo(function () {
    return {
      isSource: true,
      acceptDropType: 'target',
      draggableType: 'source',
      canDrop: function canDrop(dt, i) {
        return isFieldAddableToSelection('target', i.payload, dt);
      },
      onDrop: function onDrop(s, t) {
        return onCreateMapping(s, t === null || t === void 0 ? void 0 : t.payload);
      },
      onShowMappingDetails: selectMapping,
      onAddToSelectedMapping: onAddToMapping,
      canAddToSelectedMapping: canAddToSelectedMapping,
      canAddFieldToSelectedMapping: function canAddFieldToSelectedMapping(f) {
        return isFieldAddableToSelection('source', f);
      },
      onAddFieldToSelectedMapping: onAddToMapping,
      canRemoveFromSelectedMapping: function canRemoveFromSelectedMapping(f) {
        return isFieldRemovableFromSelection('source', f);
      },
      onRemoveFromSelectedMapping: onRemoveFromMapping,
      onCreateConstant: function onCreateConstant() {
        return handlers.onCreateConstant(constants);
      },
      onEditConstant: function onEditConstant(constName, constValue) {
        var name = constName;
        var value = constValue;
        var valueType = getConstantType(name);
        handlers.onEditConstant({
          name: name,
          value: value,
          valueType: valueType
        }, constants);
      },
      onDeleteConstant: handlers.onDeleteConstant,
      onCreateProperty: function onCreateProperty(isSource) {
        handlers.onCreateProperty(isSource, sourceProperties);
      },
      onEditProperty: function onEditProperty(property, scope, isSource) {
        var _property$split = property.split(' '),
            leftPart = _property$split[0];

        var valueType = getPropertyType(leftPart, scope, isSource);
        handlers.onEditProperty({
          name: leftPart,
          valueType: valueType,
          scope: scope
        }, true, sourceProperties);
      },
      onDeleteProperty: handlers.onDeleteProperty,
      onDeleteDocument: allowDelete ? function (id) {
        return handlers.onDeleteDocument(id, true);
      } : undefined,
      onCaptureDocumentID: function onCaptureDocumentID(id) {
        return handlers.onCaptureDocumentID(id);
      },
      onChangeDocumentName: function onChangeDocumentName(id, name) {
        return handlers.onChangeDocumentName({
          id: id,
          name: name,
          isSource: true
        });
      },
      onCustomClassSearch: allowCustomJavaClasses ? function (isSource) {
        return handlers.onEnableCustomClass(isSource);
      } : undefined,
      onImportDocument: allowImport ? function (id) {
        return handlers.onImportDocument(id, true);
      } : undefined,
      onSearch: searchSources,
      shouldShowMappingPreviewForField: shouldShowMappingPreviewForField,
      onFieldPreviewChange: onFieldPreviewChange,
      canStartMapping: function canStartMapping() {
        return true;
      },
      onStartMapping: function onStartMapping(field) {
        return onCreateMapping(field, undefined);
      },
      onEditCSVParams: function onEditCSVParams(docId, isSource) {
        handlers.onEditCSVParams(docId, isSource);
      }
    };
  }, [selectMapping, onAddToMapping, onRemoveFromMapping, handlers, constants, allowDelete, allowCustomJavaClasses, allowImport, searchSources, shouldShowMappingPreviewForField, onFieldPreviewChange, onCreateMapping, canAddToSelectedMapping, isFieldAddableToSelection, isFieldRemovableFromSelection, sourceProperties]);
  var targetEvents = React.useMemo(function () {
    return {
      isSource: false,
      acceptDropType: 'source',
      draggableType: 'target',
      canDrop: function canDrop(dt, i) {
        return isFieldAddableToSelection('source', i.payload, dt);
      },
      onDrop: function onDrop(s, t) {
        return onCreateMapping(t === null || t === void 0 ? void 0 : t.payload, s);
      },
      canAddToSelectedMapping: canAddToSelectedMapping,
      canAddFieldToSelectedMapping: function canAddFieldToSelectedMapping(f) {
        return isFieldAddableToSelection('target', f);
      },
      onShowMappingDetails: selectMapping,
      onAddToSelectedMapping: onAddToMapping,
      canRemoveFromSelectedMapping: function canRemoveFromSelectedMapping(f) {
        return isFieldRemovableFromSelection('target', f);
      },
      onRemoveFromSelectedMapping: onRemoveFromMapping,
      onCreateProperty: function onCreateProperty(isSource) {
        handlers.onCreateProperty(isSource, targetProperties);
      },
      onEditProperty: function onEditProperty(property, scope, isSource) {
        var _property$split2 = property.split(' '),
            leftPart = _property$split2[0];

        var valueType = getPropertyType(leftPart, scope, isSource);
        handlers.onEditProperty({
          name: leftPart,
          valueType: valueType,
          scope: scope
        }, false, targetProperties);
      },
      onDeleteProperty: handlers.onDeleteProperty,
      onDeleteDocument: allowDelete ? function (id) {
        return handlers.onDeleteDocument(id, false);
      } : undefined,
      onCaptureDocumentID: function onCaptureDocumentID(id) {
        return handlers.onCaptureDocumentID(id);
      },
      onChangeDocumentName: function onChangeDocumentName(id, name) {
        return handlers.onChangeDocumentName({
          id: id,
          name: name,
          isSource: false
        });
      },
      onCustomClassSearch: allowCustomJavaClasses ? function (isSource) {
        return handlers.onEnableCustomClass(isSource);
      } : undefined,
      onImportDocument: allowImport ? function (id) {
        return handlers.onImportDocument(id, false);
      } : undefined,
      onSearch: searchTargets,
      shouldShowMappingPreviewForField: shouldShowMappingPreviewForField,
      onFieldPreviewChange: onFieldPreviewChange,
      canStartMapping: function canStartMapping(field) {
        return !field.isConnected;
      },
      onStartMapping: function onStartMapping(field) {
        return onCreateMapping(undefined, field);
      },
      onEditCSVParams: function onEditCSVParams(docId, isSource) {
        handlers.onEditCSVParams(docId, isSource);
      }
    };
  }, [selectMapping, onAddToMapping, onRemoveFromMapping, handlers, allowDelete, allowCustomJavaClasses, allowImport, searchTargets, shouldShowMappingPreviewForField, onFieldPreviewChange, onCreateMapping, canAddToSelectedMapping, isFieldAddableToSelection, isFieldRemovableFromSelection, targetProperties]);
  var currentView = React.useMemo(function () {
    switch (activeView) {
      case 'ColumnMapper':
        return React__default.createElement(SourceTargetView, {
          sourceProperties: sourceProperties,
          targetProperties: targetProperties,
          constants: constants,
          sources: sources,
          mappings: mappings,
          targets: targets,
          selectedMappingId: selectedMapping === null || selectedMapping === void 0 ? void 0 : selectedMapping.id,
          onSelectMapping: selectMapping,
          showMappingPreview: showMappingPreview,
          showTypes: showTypes,
          sourceEvents: sourceEvents,
          targetEvents: targetEvents
        });

      case 'MappingTable':
        return React__default.createElement(MappingTableView, {
          mappings: mappings,
          onSelectMapping: selectMapping,
          shouldShowMappingPreview: shouldShowMappingPreview,
          onFieldPreviewChange: onFieldPreviewChange
        });

      case 'NamespaceTable':
        return React__default.createElement(NamespaceTableView, {
          sources: sources,
          onCreateNamespace: handlers.onCreateNamespace,
          onEditNamespace: function onEditNamespace(docName, alias, uri, locationUri, targetNamespace) {
            return handlers.onEditNamespace(docName, {
              alias: alias,
              uri: uri,
              locationUri: locationUri,
              targetNamespace: targetNamespace
            });
          },
          onDeleteNamespace: handlers.deleteNamespace
        });

      default:
        return React__default.createElement(React__default.Fragment, null, "TODO");
    }
  }, [activeView, constants, handlers, mappings, onFieldPreviewChange, sourceProperties, targetProperties, selectMapping, selectedMapping, shouldShowMappingPreview, showMappingPreview, showTypes, sourceEvents, sources, targetEvents, targets]);
  var renderSidebar = useSidebar({
    onCreateConstant: function onCreateConstant() {
      handlers.onCreateConstant(constants, true);
    },
    onCreateProperty: function onCreateProperty(isSource) {
      if (isSource) {
        handlers.onCreateProperty(isSource, sourceProperties, true);
      } else {
        handlers.onCreateProperty(isSource, targetProperties, true);
      }
    },
    onRemoveMapping: handlers.onDeleteSelectedMapping,
    onEditEnum: handlers.onEditMappingEnumeration,
    isEnumMapping: isEnumerationMapping
  });
  return React__default.createElement(FieldsDndProvider, null, React__default.createElement(CanvasProvider, null, React__default.createElement(MainLayout, {
    loading: pending,
    contextToolbar: contextToolbar,
    expressionToolbar: activeView !== 'NamespaceTable' && expressionToolbar,
    showSidebar: !!selectedMapping,
    renderSidebar: renderSidebar
  }, currentView), React__default.createElement(FieldDragLayer, null), React__default.createElement(reactCore.AlertGroup, {
    isToast: true
  }, notifications.filter(function (n) {
    return !n.isRead && !n.mappingId;
  }).slice(0, 5).map(function (_ref2) {
    var id = _ref2.id,
        variant = _ref2.variant,
        title = _ref2.title,
        description = _ref2.description;
    return React__default.createElement(TimedToast, {
      variant: variant,
      title: title,
      key: id,
      onClose: function onClose() {
        return markNotificationRead(id);
      },
      onTimeout: function onTimeout() {
        return markNotificationRead(id);
      }
    }, description);
  })), dialogs));
};

exports.AboutDialog = AboutDialog;
exports.Actions = Actions;
exports.AddFieldTypeahead = AddFieldTypeahead;
exports.Arc = Arc;
exports.ArcEdge = ArcEdge;
exports.Atlasmap = Atlasmap;
exports.AtlasmapProvider = AtlasmapProvider;
exports.AutoDropdown = AutoDropdown;
exports.Canvas = Canvas;
exports.CanvasProvider = CanvasProvider;
exports.CanvasTransforms = CanvasTransforms;
exports.CaptureDocumentIDAction = CaptureDocumentIDAction;
exports.ChangeDocumentNameAction = ChangeDocumentNameAction;
exports.ChangeDocumentNameDialog = ChangeDocumentNameDialog;
exports.Column = Column;
exports.ColumnBody = ColumnBody;
exports.ColumnHeader = ColumnHeader;
exports.ColumnMapper = ColumnMapper;
exports.Columns = Columns;
exports.ConditionalExpressionInput = ConditionalExpressionInput;
exports.ConfirmationDialog = ConfirmationDialog;
exports.ConstantDialog = ConstantDialog;
exports.ContextToolbar = ContextToolbar;
exports.CustomClassDialog = CustomClassDialog;
exports.DelayedBoolean = DelayedBoolean;
exports.DeleteDocumentAction = DeleteDocumentAction;
exports.DeleteMappingAction = DeleteMappingAction;
exports.Document = Document;
exports.DocumentActions = DocumentActions;
exports.DocumentField = DocumentField;
exports.DocumentFieldPreview = DocumentFieldPreview;
exports.DocumentFieldPreviewResults = DocumentFieldPreviewResults;
exports.DocumentFooter = DocumentFooter;
exports.DocumentGroup = DocumentGroup;
exports.DraggableField = DraggableField;
exports.DraggedField = DraggedField;
exports.EditCSVParamsAction = EditCSVParamsAction;
exports.EditMappingAction = EditMappingAction;
exports.EnableJavaClassAction = EnableJavaClassAction;
exports.ExportCatalogDialog = ExportCatalogDialog;
exports.ExpressionContent = ExpressionContent;
exports.ExpressionNode = ExpressionNode;
exports.ExpressionToolbar = ExpressionToolbar;
exports.FieldDragLayer = FieldDragLayer;
exports.FieldDropTarget = FieldDropTarget;
exports.FieldNode = FieldNode;
exports.FieldsDndProvider = FieldsDndProvider;
exports.HTMLObject = HTMLObject;
exports.ImportAction = ImportAction;
exports.Loading = Loading;
exports.LookupTableDialog = LookupTableDialog;
exports.MAPPINGS_DOCUMENT_ID_PREFIX = MAPPINGS_DOCUMENT_ID_PREFIX;
exports.MAPPINGS_DROP_TYPE = MAPPINGS_DROP_TYPE;
exports.MAPPINGS_FIELD_ID_PREFIX = MAPPINGS_FIELD_ID_PREFIX;
exports.MAPPINGS_HEIGHT_BOUNDARY_ID = MAPPINGS_HEIGHT_BOUNDARY_ID;
exports.MAPPINGS_WIDTH_BOUNDARY_ID = MAPPINGS_WIDTH_BOUNDARY_ID;
exports.MainContent = MainContent;
exports.MainLayout = MainLayout;
exports.MappingDetailsSidebar = MappingDetailsSidebar;
exports.MappingDetailsView = MappingDetailsView;
exports.MappingField = MappingField;
exports.MappingFields = MappingFields;
exports.MappingTableView = MappingTableView;
exports.MappingTransformation = MappingTransformation;
exports.NamespaceDialog = NamespaceDialog;
exports.NamespaceTableView = NamespaceTableView;
exports.NodeRef = NodeRef;
exports.NodeRefContext = NodeRefContext;
exports.NodeRefProvider = NodeRefProvider;
exports.NodesArc = NodesArc;
exports.ParametersDialog = ParametersDialog;
exports.PropertyDialog = PropertyDialog;
exports.SOURCES_CONSTANTS_ID = SOURCES_CONSTANTS_ID;
exports.SOURCES_DOCUMENT_ID_PREFIX = SOURCES_DOCUMENT_ID_PREFIX;
exports.SOURCES_DRAGGABLE_TYPE = SOURCES_DRAGGABLE_TYPE;
exports.SOURCES_FIELD_ID_PREFIX = SOURCES_FIELD_ID_PREFIX;
exports.SOURCES_HEIGHT_BOUNDARY_ID = SOURCES_HEIGHT_BOUNDARY_ID;
exports.SOURCES_PROPERTIES_ID = SOURCES_PROPERTIES_ID;
exports.SOURCES_WIDTH_BOUNDARY_ID = SOURCES_WIDTH_BOUNDARY_ID;
exports.SearchableColumnHeader = SearchableColumnHeader;
exports.Sidebar = Sidebar;
exports.SourceTargetLinks = SourceTargetLinks;
exports.SourceTargetView = SourceTargetView;
exports.SourcesColumn = SourcesColumn;
exports.TARGETS_DOCUMENT_ID_PREFIX = TARGETS_DOCUMENT_ID_PREFIX;
exports.TARGETS_DRAGGABLE_TYPE = TARGETS_DRAGGABLE_TYPE;
exports.TARGETS_FIELD_ID_PREFIX = TARGETS_FIELD_ID_PREFIX;
exports.TARGETS_HEIGHT_BOUNDARY_ID = TARGETS_HEIGHT_BOUNDARY_ID;
exports.TARGETS_PROPERTIES_ID = TARGETS_PROPERTIES_ID;
exports.TARGETS_WIDTH_BOUNDARY_ID = TARGETS_WIDTH_BOUNDARY_ID;
exports.TargetsColumn = TargetsColumn;
exports.TextNode = TextNode;
exports.TimedToast = TimedToast;
exports.TraverseFields = TraverseFields;
exports.Tree = Tree;
exports.TreeFocusProvider = TreeFocusProvider;
exports.TreeGroup = TreeGroup;
exports.TreeItem = TreeItem;
exports.TruncatedString = TruncatedString;
exports.WithCanvas = WithCanvas;
exports.addToCurrentMapping = addToCurrentMapping;
exports.changeDocumentName = changeDocumentName;
exports.commonActions = commonActions;
exports.configModel = configModel;
exports.copyToClipboard = copyToClipboard;
exports.createConstant = createConstant;
exports.createMapping = createMapping;
exports.createNamespace = createNamespace;
exports.createProperty = createProperty;
exports.deleteAtlasFile = deleteAtlasFile;
exports.deleteConstant = deleteConstant;
exports.deleteNamespace = deleteNamespace;
exports.deleteProperty = deleteProperty;
exports.deselectMapping = deselectMapping;
exports.documentExists = documentExists;
exports.editConstant = editConstant;
exports.editNamespace = editNamespace;
exports.editProperty = editProperty;
exports.enableCustomClass = enableCustomClass;
exports.errorInfoToNotification = errorInfoToNotification;
exports.errorLevelToVariant = errorLevelToVariant;
exports.errorMessageToString = errorMessageToString;
exports.errorTypeToString = errorTypeToString;
exports.executeFieldSearch = executeFieldSearch;
exports.exportADMArchiveFile = exportADMArchiveFile;
exports.fromDocumentDefinitionToFieldGroup = fromDocumentDefinitionToFieldGroup;
exports.fromFieldToIFields = fromFieldToIFields;
exports.fromFieldToIFieldsGroup = fromFieldToIFieldsGroup;
exports.fromFieldToIFieldsNode = fromFieldToIFieldsNode;
exports.fromMappedFieldToIMappingField = fromMappedFieldToIMappingField;
exports.fromMappingDefinitionToIMappings = fromMappingDefinitionToIMappings;
exports.fromMappingModelToImapping = fromMappingModelToImapping;
exports.fromNamespaceModelToINamespace = fromNamespaceModelToINamespace;
exports.getConstantType = getConstantType;
exports.getConstantTypeIndex = getConstantTypeIndex;
exports.getCustomClassNameOptions = getCustomClassNameOptions;
exports.getDocCSVParams = getDocCSVParams;
exports.getDocDef = getDocDef;
exports.getDocDefByName = getDocDefByName;
exports.getEnumerationValues = getEnumerationValues;
exports.getExpression = getExpression;
exports.getField = getField;
exports.getFieldEnums = getFieldEnums;
exports.getMappingActions = getMappingActions;
exports.getMappingExpression = getMappingExpression;
exports.getMultiplicityActionDelimiters = getMultiplicityActionDelimiters;
exports.getMultiplicityActions = getMultiplicityActions;
exports.getPropertyScopeOptions = getPropertyScopeOptions;
exports.getPropertyType = getPropertyType;
exports.getPropertyTypeIndex = getPropertyTypeIndex;
exports.getRuntimeVersion = getRuntimeVersion;
exports.getUIVersion = getUIVersion;
exports.handleActionChange = handleActionChange;
exports.handleIndexChange = handleIndexChange;
exports.handleMultiplicityArgumentChange = handleMultiplicityArgumentChange;
exports.handleMultiplicityChange = handleMultiplicityChange;
exports.handleNewTransformation = handleNewTransformation;
exports.handleRemoveTransformation = handleRemoveTransformation;
exports.handleTransformationArgumentChange = handleTransformationArgumentChange;
exports.handleTransformationChange = handleTransformationChange;
exports.importADMArchiveFile = importADMArchiveFile;
exports.importInstanceSchema = importInstanceSchema;
exports.importJarFile = importJarFile;
exports.initializationService = initializationService;
exports.initializeMappingExpression = initializeMappingExpression;
exports.isEnumerationMapping = isEnumerationMapping;
exports.mappingExpressionAddField = mappingExpressionAddField;
exports.mappingExpressionClearText = mappingExpressionClearText;
exports.mappingExpressionInit = mappingExpressionInit;
exports.mappingExpressionInsertText = mappingExpressionInsertText;
exports.mappingExpressionObservable = mappingExpressionObservable;
exports.mappingExpressionRemoveField = mappingExpressionRemoveField;
exports.newMapping = newMapping;
exports.onFieldPreviewChange = onFieldPreviewChange;
exports.removeDocumentRef = removeDocumentRef;
exports.removeFromCurrentMapping = removeFromCurrentMapping;
exports.removeMappedFieldFromCurrentMapping = removeMappedFieldFromCurrentMapping;
exports.removeMapping = removeMapping;
exports.resetAtlasmap = resetAtlasmap;
exports.selectMapping = selectMapping;
exports.setDocCSVParams = setDocCSVParams;
exports.setSelectedEnumValue = setSelectedEnumValue;
exports.toggleExpressionMode = toggleExpressionMode;
exports.toggleMappingPreview = toggleMappingPreview;
exports.toggleShowMappedFields = toggleShowMappedFields;
exports.toggleShowUnmappedFields = toggleShowUnmappedFields;
exports.trailerId = trailerId;
exports.updateEnumerationValues = updateEnumerationValues;
exports.useAtlasmap = useAtlasmap;
exports.useAtlasmapDialogs = useAtlasmapDialogs;
exports.useBoundingCanvasRect = useBoundingCanvasRect;
exports.useCanvas = useCanvas;
exports.useDimensions = useDimensions;
exports.useFieldsDnd = useFieldsDnd;
exports.useInputTextSelectDialog = useInputTextSelectDialog;
exports.useLatestValue = useLatestValue;
exports.useNodeRect = useNodeRect;
exports.useNodeRef = useNodeRef;
exports.useToggle = useToggle;
exports.useTreeFocus = useTreeFocus;
//# sourceMappingURL=atlasmap.cjs.development.js.map
