import { DocumentType, InspectionType } from '@atlasmap/core';
import { IAtlasmapDocument, IAtlasmapField } from '../Views';
import { FunctionComponent } from 'react';
import { addToCurrentMapping, changeDocumentName, createConstant, createMapping, createNamespace, createProperty, deleteAtlasFile, deleteConstant, deleteNamespace, deleteProperty, deselectMapping, documentExists, editConstant, editNamespace, editProperty, enableCustomClass, executeFieldSearch, exportADMArchiveFile, fromMappedFieldToIMappingField, getEnumerationValues, getFieldEnums, getMappingActions, getMappingExpression, getMultiplicityActionDelimiters, getMultiplicityActions, getRuntimeVersion, getUIVersion, handleActionChange, handleIndexChange, handleMultiplicityArgumentChange, handleMultiplicityChange, handleNewTransformation, handleRemoveTransformation, handleTransformationArgumentChange, handleTransformationChange, importInstanceSchema, isEnumerationMapping, mappingExpressionAddField, mappingExpressionClearText, mappingExpressionInit, mappingExpressionInsertText, mappingExpressionObservable, mappingExpressionRemoveField, newMapping, onFieldPreviewChange, removeFromCurrentMapping, removeMappedFieldFromCurrentMapping, removeMapping, selectMapping, setSelectedEnumValue, toggleExpressionMode, toggleMappingPreview, toggleShowMappedFields, toggleShowUnmappedFields } from './utils';
export interface IExternalDocumentProps {
    id: string;
    name: string;
    description: string;
    documentType: DocumentType;
    inspectionType: InspectionType;
    inspectionSource: string;
    inspectionParameters: {
        [key: string]: string;
    };
    inspectionResult: string;
    showFields: boolean;
}
export interface IAtlasmapProviderProps {
    baseJavaInspectionServiceUrl: string;
    baseXMLInspectionServiceUrl: string;
    baseJSONInspectionServiceUrl: string;
    baseCSVInspectionServiceUrl: string;
    baseMappingServiceUrl: string;
    logLevel: string;
    externalDocument?: {
        documentId: string;
        inputDocuments: IExternalDocumentProps[];
        outputDocument: IExternalDocumentProps;
        initialMappings?: string;
    };
    onMappingChange?: (serializedMappings: string) => void;
}
export declare const AtlasmapProvider: FunctionComponent<IAtlasmapProviderProps>;
export declare function useAtlasmap(): {
    selectMapping: typeof selectMapping;
    deselectMapping: typeof deselectMapping;
    deleteAtlasFile: typeof deleteAtlasFile;
    exportADMArchiveFile: typeof exportADMArchiveFile;
    importADMArchiveFile: (file: File) => void;
    importJarFile: (file: File) => void;
    resetAtlasmap: () => void;
    getUIVersion: typeof getUIVersion;
    getRuntimeVersion: typeof getRuntimeVersion;
    mappingExpressionClearText: typeof mappingExpressionClearText;
    isMappingExpressionEmpty: boolean;
    executeFieldSearch: typeof executeFieldSearch;
    getFieldEnums: typeof getFieldEnums;
    setSelectedEnumValue: typeof setSelectedEnumValue;
    mappingExpressionAddField: typeof mappingExpressionAddField;
    mappingExpressionInit: typeof mappingExpressionInit;
    mappingExpressionInsertText: typeof mappingExpressionInsertText;
    mappingExpressionObservable: typeof mappingExpressionObservable;
    mappingExpressionRemoveField: typeof mappingExpressionRemoveField;
    mappingHasSourceCollection: () => boolean;
    mappingExpressionEnabled: boolean;
    currentMappingExpression: string;
    getMappingExpression: typeof getMappingExpression;
    toggleExpressionMode: typeof toggleExpressionMode;
    toggleMappingPreview: typeof toggleMappingPreview;
    toggleShowMappedFields: typeof toggleShowMappedFields;
    toggleShowUnmappedFields: typeof toggleShowUnmappedFields;
    onFieldPreviewChange: typeof onFieldPreviewChange;
    addToCurrentMapping: typeof addToCurrentMapping;
    removeFromCurrentMapping: typeof removeFromCurrentMapping;
    removeMappedFieldFromCurrentMapping: typeof removeMappedFieldFromCurrentMapping;
    fromMappedFieldToIMappingField: typeof fromMappedFieldToIMappingField;
    createMapping: typeof createMapping;
    newMapping: typeof newMapping;
    removeMapping: typeof removeMapping;
    documentExists: typeof documentExists;
    getMappingActions: typeof getMappingActions;
    getMultiplicityActions: typeof getMultiplicityActions;
    getMultiplicityActionDelimiters: typeof getMultiplicityActionDelimiters;
    handleActionChange: typeof handleActionChange;
    handleIndexChange: typeof handleIndexChange;
    handleNewTransformation: typeof handleNewTransformation;
    handleRemoveTransformation: typeof handleRemoveTransformation;
    handleTransformationChange: typeof handleTransformationChange;
    handleTransformationArgumentChange: typeof handleTransformationArgumentChange;
    handleMultiplicityChange: typeof handleMultiplicityChange;
    handleMultiplicityArgumentChange: typeof handleMultiplicityArgumentChange;
    createConstant: typeof createConstant;
    deleteConstant: typeof deleteConstant;
    editConstant: typeof editConstant;
    createProperty: typeof createProperty;
    deleteProperty: typeof deleteProperty;
    editProperty: typeof editProperty;
    trailerId: string;
    canAddToSelectedMapping: (isSource: boolean) => boolean;
    isFieldAddableToSelection: (documentType: 'source' | 'target', field: IAtlasmapField, dropTarget?: IAtlasmapField | undefined) => boolean;
    isFieldRemovableFromSelection: (documentType: 'source' | 'target', field: IAtlasmapField) => boolean;
    searchSources: (term: string) => void;
    searchTargets: (term: string) => void;
    importInstanceSchema: typeof importInstanceSchema;
    enableCustomClass: typeof enableCustomClass;
    createNamespace: typeof createNamespace;
    editNamespace: typeof editNamespace;
    deleteNamespace: typeof deleteNamespace;
    onAddToMapping: (node: IAtlasmapField) => void;
    onRemoveFromMapping: (node: IAtlasmapField) => void;
    onCreateMapping: (source: IAtlasmapField | undefined, target: IAtlasmapField | undefined) => void;
    changeDocumentName: typeof changeDocumentName;
    getEnumerationValues: typeof getEnumerationValues;
    isEnumerationMapping: typeof isEnumerationMapping;
    configModel: import("@atlasmap/core").ConfigModel;
    markNotificationRead: (id: string) => void;
    pending: boolean;
    error: boolean;
    sources: IAtlasmapDocument[];
    targets: IAtlasmapDocument[];
    sourceProperties: IAtlasmapDocument | null;
    targetProperties: IAtlasmapDocument | null;
    constants: IAtlasmapDocument | null;
    mappings: import("../Views").IAtlasmapMapping[];
    selectedMapping: import("../Views").IAtlasmapMapping | null;
    flatSources: IAtlasmapField[];
    flatTargets: IAtlasmapField[];
    notifications: import("../Views").INotification[];
};
//# sourceMappingURL=AtlasmapProvider.d.ts.map