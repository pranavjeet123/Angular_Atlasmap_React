import { ConfigModel, DocumentDefinition } from '@atlasmap/core';
/**
 * Modify the document name of the document specified by the document ID.
 *
 * @param docId
 * @param newDocName
 * @param isSource
 */
export declare function changeDocumentName(docId: string, newDocName: string, isSource: boolean): Promise<void>;
/**
 * Create a new namespace for the supplied XML document.
 *
 * @param docName
 * @param alias
 * @param uri
 * @param locationUri
 */
export declare function createNamespace(docName: string, alias: string, uri: string, locationUri: string, isTarget: boolean): void;
export declare function editNamespace(docName: string, initAlias: string, alias: string, uri: string, locationUri: string, isTarget: boolean): void;
export declare function deleteNamespace(docName: string, alias: string): void;
/**
 * Remove a document from the UI and backend service.
 *
 * @param docDef
 * @param cfg
 */
export declare function removeDocumentRef(docDef: DocumentDefinition, cfg: ConfigModel): Promise<boolean>;
/**
 * Return the document definition associated with the specified document ID.
 *
 * @param docId - document ID
 * @param cfg
 * @param isSource
 */
export declare function getDocDef(docId: string, cfg: ConfigModel, isSource: boolean): DocumentDefinition;
/**
 * Return the document definition associated with the specified document name.
 *
 * @param docName - document name
 * @param cfg
 * @param isSource
 */
export declare function getDocDefByName(docName: string, cfg: ConfigModel, isSource: boolean): DocumentDefinition;
/**
 * Determine the user-defined class names associated with previously
 * imported JARs.
 */
export declare function getCustomClassNameOptions(): Promise<string[]>;
/**
 * Import a CSV, instance or schema document into either the Source panel or Target
 * panel (CSV, JSON, XML, XSD).
 *
 * @param selectedFile
 * @param cfg
 * @param isSource
 * @param isSchema - user-specified instance/ schema (true === schema)
 * @param inspectionParameters - CSV parameters
 */
export declare function importInstanceSchema(selectedFile: File, cfg: ConfigModel, isSource: boolean, isSchema: boolean, inspectionParameters?: {
    [key: string]: string;
}): Promise<boolean>;
/**
 * Enable the specified class name and collection type in the targetted
 * panel for use in Java document loading. The user must have previously
 * imported a JAR file containing the class.
 *
 * @param selectedClass
 * @param selectedCollection
 * @param isSource
 */
export declare function enableCustomClass(cfg: ConfigModel, selectedClass: string, selectedCollection: string, isSource: boolean): Promise<boolean>;
export declare function getPropertyScopeOptions(isSource: boolean): {
    value: string;
    label: string;
}[];
/**
 * Return CSV document inspection parameters.
 *
 * @param docId
 * @param isSource
 * @returns
 */
export declare function getDocCSVParams(docId: string, isSource: boolean): {
    [key: string]: string;
};
/**
 * Set CSV document inspection parameters.
 *
 * @param docId
 * @param isSource
 * @param parameters
 */
export declare function setDocCSVParams(docId: string, isSource: boolean, parameters: {
    [key: string]: string;
}): Promise<void>;
//# sourceMappingURL=document.d.ts.map