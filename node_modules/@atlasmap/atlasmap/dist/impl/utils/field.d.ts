import { Field, MappedField, MappingModel } from '@atlasmap/core';
import { LookupTableData } from '../../UI';
export declare type EnumValue = {
    name: string;
    ordinal: number;
};
export declare function createConstant(constName: string, constValue: string, constType: string, addToActiveMapping?: boolean): void;
export declare function deleteConstant(constName: string): void;
export declare function editConstant(constName: string, constValue: string, constType: string, origName?: string): void;
export declare function getConstantType(constName: string): string;
export declare function getConstantTypeIndex(constName: string): number;
export declare function createProperty(propName: string, propType: string, propScope: string, isSource: boolean, addToActiveMapping?: boolean): void;
export declare function deleteProperty(propName: string, propScope: string, isSource: boolean): void;
export declare function editProperty(propName: string, propType: string, propScope: string, isSource: boolean, newName?: string, newScope?: string): void;
export declare function getPropertyType(propName: string, propScope: string, isSource: boolean): string;
export declare function getPropertyTypeIndex(propName: string, propScope: string, isSource: boolean): number;
/**
 * Create a new mapping or modify the existing active mapping using the specified source and target IDs.
 *
 * @param source
 * @param target
 */
export declare function createMapping(source: Field | undefined, target?: Field): void;
/**
 * Create a new mapping.
 */
export declare function newMapping(): void;
/**
 * Removes a mapping.
 */
export declare function removeMapping(mappingModel: MappingModel): void;
/**
 * Add the specified field to the current mapping.
 *
 * @param field
 */
export declare function addToCurrentMapping(field: Field): void;
/**
 * Remove the specified field from the current mapping.
 *
 * @param field
 */
export declare function removeFromCurrentMapping(field: Field): void;
/**
 * Add the specified field to the current mapping.
 *
 * @param field
 */
export declare function removeMappedFieldFromCurrentMapping(field: MappedField): void;
/**
 * Return the enumeration mapping lookup table associated with the active mapping.
 *
 */
export declare function getEnumerationValues(): LookupTableData[];
/**
 * Retrieve the enumeration values for the specified field node ID.
 *
 * @param nodeId - enumeration field node ID
 */
export declare function getFieldEnums(nodeId: string): EnumValue[];
/**
 * Set the value for a enumeration reference field.  This way the enumeration field may be
 * used in conditional expressions.  Not used for enumeration mappings.
 *
 * @param selectedEnumNodeId - enumeration field node ID
 * @param selectedEnumValueIndex - enumeration index value
 */
export declare function setSelectedEnumValue(selectedEnumNodeId: string, selectedEnumValueIndex: number): void;
export declare function updateEnumerationValues(enumerationValues: LookupTableData[]): void;
export declare function isEnumerationMapping(): boolean;
//# sourceMappingURL=field.d.ts.map