import { ConfigModel } from '@atlasmap/core';
/**
 * Return true if the specified file object exists as a source or target
 * document, false otherwise.
 *
 * @param file - file object
 * @param isSource - source or target panel
 */
export declare function documentExists(file: File, isSource: boolean): boolean;
/**
 * Delete the specified source or target document.
 *
 * @param fileId - document ID to delete
 * @param isSource - source or target panel
 */
export declare function deleteAtlasFile(fileId: string, isSource: boolean): Promise<void>;
/**
 * The user has requested their current mappings be exported.  Use the mapping management
 * service to establish the file content and to push it down to the server.
 *
 * @param fileName - user-specified ADM archive file name
 */
export declare function exportADMArchiveFile(fileName: string): Promise<boolean>;
/**
 * Import an ADM archive file or a user JAR file.
 *
 * @param selectedFile
 * @param userFileSuffix
 * @param cfg
 */
export declare function importADMArchiveFile(selectedFile: File, cfg: ConfigModel): void;
/**
 * Import a JAR file.
 *
 * @param selectedFile
 * @param userFileSuffix
 * @param cfg
 */
export declare function importJarFile(selectedFile: File, cfg: ConfigModel): void;
/**
 * Remove all documents and imported JARs from the server.
 */
export declare function resetAtlasmap(): void;
export declare function getRuntimeVersion(): Promise<string>;
export declare function getUIVersion(): string;
export declare function toggleMappingPreview(enabled: boolean): boolean;
export declare function toggleShowMappedFields(enabled: boolean): boolean;
export declare function toggleShowUnmappedFields(enabled: boolean): boolean;
//# sourceMappingURL=toolbar.d.ts.map