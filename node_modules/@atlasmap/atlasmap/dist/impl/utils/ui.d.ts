import { ConfigModel, DocumentDefinition, ErrorInfo, ErrorLevel, ErrorType, Field, FieldAction, FieldActionDefinition, InitializationService, MappedField, MappingDefinition, MappingModel, NamespaceModel } from '@atlasmap/core';
import { IAtlasmapDocument, IAtlasmapField, IAtlasmapGroup, IAtlasmapMappedField, IAtlasmapMapping, INotification } from '../../Views';
import { Observable } from 'rxjs';
export declare function copyToClipboard(text: string): void;
export declare const initializationService: InitializationService;
export declare const configModel: ConfigModel;
export declare function fromFieldToIFieldsGroup(field: Field): IAtlasmapGroup | null;
export declare function fromFieldToIFieldsNode(field: Field): IAtlasmapField | null;
export declare function fromFieldToIFields(field: Field): IAtlasmapGroup | IAtlasmapField | null;
export declare function fromNamespaceModelToINamespace(namespace: NamespaceModel): {
    alias: string;
    uri: string;
    locationUri: string | undefined;
    isTarget: boolean;
};
export declare function fromDocumentDefinitionToFieldGroup(def: DocumentDefinition): IAtlasmapDocument | null;
export declare function fromMappedFieldToIMappingField(mappedField: MappedField): IAtlasmapMappedField | null;
export declare function errorLevelToVariant(level: ErrorLevel): INotification['variant'];
export declare function errorMessageToString(message: any): string;
export declare function errorTypeToString(type: ErrorType): string;
export declare function errorInfoToNotification(e: ErrorInfo): INotification;
export declare function fromMappingModelToImapping(m: MappingModel | null | undefined): IAtlasmapMapping | null;
export declare function fromMappingDefinitionToIMappings(def: MappingDefinition | null): IAtlasmapMapping[];
export declare function executeFieldSearch(searchFilter: string, isSource: boolean): string[][];
export declare function getField(fieldPath: string, isSource: boolean): Field | null;
export declare function mappingExpressionAddField(selectedDocId: string, selectedField: string, newTextNode: any, atIndex: number, isTrailer: boolean): void;
export declare function mappingExpressionInit(): void;
export declare function mappingExpressionClearText(nodeId?: string, startOffset?: number, endOffset?: number): import("@atlasmap/core").TextNode | null;
export declare function mappingExpressionInsertText(str: string, nodeId?: string, offset?: number): void;
export declare function mappingExpressionObservable(): Observable<any> | null;
export declare function mappingExpressionRemoveField(tokenPosition?: string, offset?: number, removeNext?: boolean): void;
export declare function onFieldPreviewChange(field: IAtlasmapField, value: string): void;
export declare function toggleExpressionMode(): void;
export declare function getMappingActions(isSource: boolean): FieldActionDefinition[];
export declare function getMultiplicityActions(mapping: MappingModel): FieldActionDefinition[];
export declare function getMultiplicityActionDelimiters(): import("@atlasmap/core").TransitionDelimiterModel[];
export declare function handleActionChange(action: FieldAction, definition: FieldActionDefinition): void;
/**
 * Process a mapped field index change.  The source field is represented by
 * currentIndex.  The target index is represented either by a number or by a
 * mapped field (depending on whether the index was physically modified or
 * d&d modified).
 *
 * @param isSource
 * @param currentIndex
 * @param target
 */
export declare function handleIndexChange(isSource: boolean, currentIndex: number, target: number | Field): void;
export declare function handleNewTransformation(isSource: boolean, index: number): void;
export declare function handleTransformationChange(isSource: boolean, index: number, currentTransformationIndex: number, newTransformationName: string): void;
export declare function handleTransformationArgumentChange(isSource: boolean, index: number, transformationIndex: number, argumentName: string, argumentValue: string): void;
export declare function handleRemoveTransformation(isSource: boolean, index: number, transformationIndex: number): void;
export declare function handleMultiplicityChange(action: FieldAction, name: string): void;
export declare function handleMultiplicityArgumentChange(multiplicityFieldAction: FieldAction, argumentName: string, argumentValue: string): void;
export declare function selectMapping(mapping: IAtlasmapMapping): void;
export declare function deselectMapping(): void;
//# sourceMappingURL=ui.d.ts.map