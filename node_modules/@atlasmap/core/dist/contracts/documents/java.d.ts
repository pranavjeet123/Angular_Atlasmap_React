import { CollectionType, IField, IStringList } from '../common';
/**
 * The Java class inspection data model contracts between frontend and backend.
 */
export declare const JAVA_MODEL_PACKAGE_PREFIX = "io.atlasmap.java.v2";
export declare const JAVA_INSPECTION_REQUEST_JSON_TYPE: string;
export declare const JAVA_CLASS_JSON_TYPE: string;
export declare const JAVA_ENUM_FIELD_JSON_TYPE: string;
/**
 * The root object that carries {@link IClassInspectionRequest}
 * when it's sent to backend.
 */
export interface IClassInspectionRequestContainer {
    ClassInspectionRequest: IClassInspectionRequest;
}
/**
 * The serialized Java class inspection request.
 */
export interface IClassInspectionRequest {
    jsonType: string;
    fieldNameExclusions?: IStringList;
    classNameExclusions?: IStringList;
    classpath?: string;
    className: string;
    collectionType?: CollectionType;
    collectionClassName?: string;
    disablePrivateOnlyFields?: boolean;
    disableProtectedOnlyFields?: boolean;
    disablePublicOnlyFields?: boolean;
    disablePublicGetterSetterFields?: boolean;
}
/**
 * The root object that carries {@link IClassInspectionResponse}
 * when it's received from backend.
 */
export interface IClassInspectionResponseContainer {
    ClassInspectionResponse: IClassInspectionResponse;
}
/**
 * The serialized Java class inspection response.
 */
export interface IClassInspectionResponse {
    javaClass: IJavaClass;
    errorMessage: string;
    executionTime: number;
}
/**
 * The root object that carries {@link IJavaClass}
 * when it's read from Java offline inspection (maven plugin).
 */
export interface IJavaClassContainer {
    JavaClass: IJavaClass;
}
/**
 * The serialized Java class inspection result.
 */
export interface IJavaClass extends IJavaField {
    javaEnumFields: IJavaEnumFields;
    javaFields: IJavaFields;
    packageName: string;
    annotation: boolean;
    annonymous: boolean;
    enumeration: boolean;
    isInterface: boolean;
    localClass: boolean;
    memberClass: boolean;
    uri: string;
}
/**
 * The serialized Java field.
 */
export interface IJavaField extends IField {
    annotations?: IStringList;
    modifiers?: {
        modifier: Modifier[];
    };
    parameterizedTypes?: IStringList;
    className?: string;
    canonicalClassName?: string;
    collectionClassName?: string;
    getMethod?: string;
    setMethod?: string;
    primitive?: boolean;
    synthetic?: boolean;
}
/**
 * The serialized Java modifier.
 */
export declare enum Modifier {
    ALL = "ALL",
    ABSTRACT = "ABSTRACT",
    FINAL = "FINAL",
    INTERFACE = "INTERFACE",
    NATIVE = "NATIVE",
    PACKAGE_PRIVATE = "Package Private",
    PUBLIC = "PUBLIC",
    PROTECTED = "PROTECTED",
    PRIVATE = "PRIVATE",
    STATIC = "STATIC",
    STRICT = "STRICT",
    SYNCHRONIZED = "SYNCHRONIZED",
    TRANSIENT = "TRANSIENT",
    VOLATILE = "VOLATILE",
    NONE = "NONE"
}
/**
 * The container of serialized {@link IJavaEnumField}.
 */
export interface IJavaEnumFields {
    javaEnumField: IJavaEnumField[];
}
/**
 * The serialized Java enum field.
 */
export interface IJavaEnumField extends IField {
    name: string;
    ordinal: number;
    className: string;
}
/**
 * The container of serialized {@link IJavaField}.
 */
export interface IJavaFields {
    javaField: IJavaField[];
}
//# sourceMappingURL=java.d.ts.map