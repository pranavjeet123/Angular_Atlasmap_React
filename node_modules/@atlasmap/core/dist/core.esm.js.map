{"version":3,"file":"core.esm.js","sources":["../src/contracts/common.ts","../src/common/config.types.ts","../src/contracts/documents/csv.ts","../src/contracts/documents/java.ts","../src/contracts/documents/json.ts","../src/contracts/documents/xml.ts","../src/contracts/field-action.ts","../src/contracts/mapping.ts","../src/contracts/mapping-preview.ts","../src/utils/common-util.ts","../src/models/field.model.ts","../src/models/document-definition.model.ts","../src/models/config.model.ts","../src/models/error.model.ts","../src/models/examples.ts","../src/models/expression.model.ts","../src/models/field-action.model.ts","../src/models/inspect/document-inspection.model.ts","../src/models/inspect/csv-inspection.model.ts","../src/models/inspect/java-inspection.model.ts","../src/models/inspect/json-inspection.model.ts","../src/models/inspect/xml-inspection.model.ts","../src/models/lookup-table.model.ts","../src/models/transition.model.ts","../src/models/mapping-definition.model.ts","../src/models/mapping.model.ts","../../../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/utils/document-inspection-util.ts","../src/utils/guid.ts","../src/utils/lookup-table-util.ts","../src/utils/mapping-digest-util.ts","../src/utils/mapping-util.ts","../src/utils/mapping-serializer.ts","../src/services/document-management.service.ts","../src/services/error-handler.service.ts","../src/services/field-action.service.ts","../src/services/file-management.service.ts","../src/services/mapping-expression.service.ts","../src/services/mapping-management.service.ts","../src/services/mapping-preview.service.ts","../src/services/initialization.service.ts"],"sourcesContent":["/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\nexport const FIELD_PATH_SEPARATOR = '/';\n\nexport const MODEL_PACKAGE_PREFIX = 'io.atlasmap.v2';\nexport const DATA_SOURCE_JSON_TYPE = MODEL_PACKAGE_PREFIX + '.DataSource';\n\n/** SOURCE or TARGET. */\nexport enum DataSourceType {\n  SOURCE = 'SOURCE',\n  TARGET = 'TARGET',\n}\n\n/**\n * The type of collection, such as {@link ARRAY} and {@link LIST}.\n */\nexport enum CollectionType {\n  ALL = 'ALL',\n  ARRAY = 'ARRAY',\n  LIST = 'LIST',\n  MAP = 'MAP',\n  NONE = 'NONE',\n}\n\n/**\n * The field status held by {@link IField}.\n */\nexport enum FieldStatus {\n  SUPPORTED = 'SUPPORTED',\n  UNSUPPORTED = 'UNSUPPORTED',\n  CACHED = 'CACHED',\n  ERROR = 'ERROR',\n  NOT_FOUND = 'NOT_FOUND',\n  EXCLUDED = 'EXCLUDED',\n}\n\n/**\n * The field type held by {@link IField}.\n */\nexport enum FieldType {\n  ANY = 'ANY',\n  ANY_DATE = 'ANY_DATE',\n  BIG_INTEGER = 'BIG_INTEGER',\n  BOOLEAN = 'BOOLEAN',\n  BYTE = 'BYTE',\n  BYTE_ARRAY = 'BYTE_ARRAY',\n  CHAR = 'CHAR',\n  COMPLEX = 'COMPLEX',\n  DATE = 'DATE',\n  DATE_TIME = 'DATE_TIME',\n  DATE_TIME_TZ = 'DATE_TIME_TZ',\n  DATE_TZ = 'DATE_TZ',\n  DECIMAL = 'DECIMAL',\n  DOUBLE = 'DOUBLE',\n  FLOAT = 'FLOAT',\n  INTEGER = 'INTEGER',\n  LONG = 'LONG',\n  NONE = 'NONE',\n  NUMBER = 'NUMBER',\n  SHORT = 'SHORT',\n  STRING = 'STRING',\n  TIME = 'TIME',\n  TIME_TZ = 'TIME_TZ',\n  UNSIGNED_BYTE = 'UNSIGNED_BYTE',\n  UNSIGNED_INTEGER = 'UNSIGNED_INTEGER',\n  UNSIGNED_LONG = 'UNSIGNED_LONG',\n  UNSIGNED_SHORT = 'UNSIGNED_SHORT',\n  UNSUPPORTED = 'UNSUPPORTED',\n}\n\nexport enum DocumentType {\n  JAVA = 'JAVA',\n  XML = 'XML',\n  XSD = 'XSD',\n  JSON = 'JSON',\n  CORE = 'Core',\n  CSV = 'CSV',\n  CONSTANT = 'Constants',\n  PROPERTY = 'Property',\n}\n\nexport enum InspectionType {\n  JAVA_CLASS = 'JAVA_CLASS',\n  SCHEMA = 'SCHEMA',\n  INSTANCE = 'INSTANCE',\n  UNKNOWN = 'UNKNOWN',\n}\n\n/** The serialized DataSource held by {@link IAtlasMapping}. */\nexport interface IDataSource {\n  id: string;\n  name?: string;\n  description?: string;\n  uri: string;\n  dataSourceType: DataSourceType;\n  characterEncoding?: string;\n  locale?: string;\n  jsonType: string;\n}\n\n/**\n * The serialized CSV document inspection result.\n */\nexport interface IDocument {\n  fields: IFields;\n}\n\n/**\n * The container of {@link IField}.\n */\nexport interface IFields {\n  field: IField[];\n}\n\n/**\n * The field in the mapping.\n */\nexport interface IField {\n  actions?: IFieldAction[];\n  value?: string;\n  arrayDimensions?: number;\n  arraySize?: number;\n  collectionType?: CollectionType;\n  docId?: string;\n  index?: number;\n  path?: string;\n  required?: boolean;\n  status?: FieldStatus;\n  fieldType?: FieldType;\n  format?: string;\n  name?: string;\n  jsonType: string;\n}\n\n/**\n * The field action, aka transformation in the mapping.\n */\nexport interface IFieldAction {\n  '@type'?: string;\n  displayName?: string;\n  [x: string]: any;\n}\n\nexport interface IStringList {\n  string: string[];\n}\n\nexport interface IParameterOption {\n  label: string;\n  value: string;\n}\n\nexport interface IParameter {\n  name: string;\n  label: string;\n  value: string;\n  boolean?: boolean;\n  options?: IParameterOption[];\n  enabled?: boolean;\n  required?: boolean;\n}\n\nexport interface IStringContainer {\n  String: string;\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\nimport { CollectionType } from '../contracts/common';\n\nexport enum DocumentDefaultName {\n  CONSTANTS = 'Constants',\n  PROPERTIES = 'Properties',\n}\n\nexport const enum FieldMode {\n  CREATE,\n  EDIT,\n}\n\nexport const collectionTypes = [\n  [CollectionType[CollectionType.ARRAY], 'Array'],\n  [CollectionType[CollectionType.LIST], 'List'],\n  [CollectionType[CollectionType.MAP], 'Map'],\n  [CollectionType[CollectionType.NONE], 'None'],\n];\n\nexport const constantTypes = [\n  ['STRING', 'String'], // default type\n  ['BOOLEAN', 'Boolean'],\n  ['BIG_INTEGER', 'Big Integer'],\n  ['BYTE', 'Byte'],\n  ['BYTE_ARRAY', 'ByteArray'],\n  ['CHAR', 'Char'],\n  ['COMPLEX', 'Complex'],\n  ['DECIMAL', 'Decimal'],\n  ['DOUBLE', 'Double'],\n  ['FLOAT', 'Float'],\n  ['INTEGER', 'Integer'],\n  ['LONG', 'Long'],\n  ['SHORT', 'Short'],\n  ['TIME', 'Time'],\n  ['DATE', 'Date'],\n  ['DATE_TIME', 'DateTime'],\n  ['DATE_TZ', 'DateTZ'],\n  ['TIME_TZ', 'TimeTZ'],\n  ['DATE_TIME_TZ', 'DateTimeTZ'],\n  ['UNSIGNED_BYTE', 'Unsigned Byte'],\n  ['UNSIGNED_INTEGER', 'Unsigned Integer'],\n  ['UNSIGNED_LONG', 'Unsigned Long'],\n  ['UNSIGNED_SHORT', 'Unsigned Short'],\n];\n\nexport const propertyTypes = [\n  ['STRING', 'String'], // default type\n  ['ANY', 'Any'],\n  ['BOOLEAN', 'Boolean'],\n  ['BIG_INTEGER', 'Big Integer'],\n  ['BYTE', 'Byte'],\n  ['BYTE_ARRAY', 'ByteArray'],\n  ['CHAR', 'Char'],\n  ['COMPLEX', 'Complex'],\n  ['DECIMAL', 'Decimal'],\n  ['DOUBLE', 'Double'],\n  ['FLOAT', 'Float'],\n  ['INTEGER', 'Integer'],\n  ['LONG', 'Long'],\n  ['SHORT', 'Short'],\n  ['TIME', 'Time'],\n  ['DATE', 'Date'],\n  ['DATE_TIME', 'DateTime'],\n  ['DATE_TZ', 'DateTZ'],\n  ['TIME_TZ', 'TimeTZ'],\n  ['DATE_TIME_TZ', 'DateTimeTZ'],\n  ['UNSIGNED_BYTE', 'Unsigned Byte'],\n  ['UNSIGNED_INTEGER', 'Unsigned Integer'],\n  ['UNSIGNED_LONG', 'Unsigned Long'],\n  ['UNSIGNED_SHORT', 'Unsigned Short'],\n];\n\nexport const HTTP_STATUS_OK = 200;\nexport const HTTP_STATUS_NO_CONTENT = 204;\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\nimport { IDocument, IField, IParameter } from '../common';\n\n/**\n * The CSV inspection data model contracts between frontend and backend.\n */\n\n/**\n * The root object that carries {@link ICsvInspectionResponse}\n * when it's received from backend.\n */\nexport interface ICsvInspectionResponseContainer {\n  CsvInspectionResponse: ICsvInspectionResponse;\n}\n\n/**\n * The serialized CSV inspection response.\n */\nexport interface ICsvInspectionResponse {\n  csvDocument: IDocument;\n  errorMessage?: string;\n  executionTime?: number;\n}\n\n/**\n * The root object that carries {@link ICsvDocument}\n * when it's inspected with maven plugin.\n */\nexport interface ICsvDocumentContainer {\n  CsvDocument: IDocument;\n}\n\n/**\n * The serialized CSV complex field.\n */\nexport interface ICsvComplexType extends ICsvField {\n  csvFields: ICsvFields;\n  uri?: string;\n}\n\n/**\n * The serialized CSV primitive field.\n */\nexport interface ICsvField extends IField {\n  column: number;\n}\n\n/**\n * The container of {@link ICsvField}.\n */\nexport interface ICsvFields {\n  csvField: ICsvField[];\n}\n\n// TODO: Retrieve from the backend CSV module\nexport function getCsvParameterOptions(): IParameter[] {\n  return [\n    {\n      name: 'format',\n      label: 'CSV File Format',\n      value: 'Default',\n      options: [\n        { label: 'Default', value: 'Default' },\n        { label: 'Excel', value: 'Excel' },\n        { label: 'InformixUnload', value: 'InformixUnload' },\n        { label: 'InformixUnloadCsv', value: 'InformixUnloadCsv' },\n        { label: 'MongoDBCsv', value: 'MongoDBCsv' },\n        { label: 'MongoDBTsv', value: 'MongoDBTsv' },\n        { label: 'MySQL', value: 'MySQL' },\n        { label: 'Oracle', value: 'Oracle' },\n        { label: 'PostgreSQLCsv', value: 'PostgreSQLCsv' },\n        { label: 'PostgreSQLText', value: 'PostgreSQLText' },\n        { label: 'RFC4180', value: 'RFC4180' },\n        { label: 'TDF', value: 'TDF' },\n      ],\n      required: true,\n    },\n    {\n      name: 'allowDuplicateHeaderNames',\n      label: 'Allow Duplicate Header Names',\n      value: 'true',\n      boolean: true,\n      required: false,\n    },\n    {\n      name: 'allowMissingColumnNames',\n      label: 'Allow Missing Column Names',\n      value: 'true',\n      boolean: true,\n      required: false,\n    },\n    {\n      name: 'commentMarker',\n      label: 'Comment Marker',\n      value: '',\n      required: false,\n    },\n    {\n      name: 'delimiter',\n      label: 'Delimiter',\n      value: '',\n      required: false,\n    },\n    { name: 'escape', label: 'Escape', value: '', required: false },\n    {\n      name: 'firstRecordAsHeader',\n      label: 'First Record As Header',\n      value: 'true',\n      boolean: true,\n      required: false,\n    },\n    { name: 'headers', label: 'Headers', value: '', required: false },\n    {\n      name: 'ignoreEmptyLines',\n      label: 'Ignore Empty Lines',\n      value: 'true',\n      boolean: true,\n      required: false,\n    },\n    {\n      name: 'ignoreHeaderCase',\n      label: 'Ignore Header Case',\n      value: 'true',\n      boolean: true,\n      required: false,\n    },\n    {\n      name: 'ignoreSurroundingSpaces',\n      label: 'Ignore Surrounding Spaces',\n      value: 'true',\n      boolean: true,\n      required: false,\n    },\n    {\n      name: 'nullString',\n      label: 'Null String',\n      value: '',\n      required: false,\n    },\n    {\n      name: 'skipHeaderRecord',\n      label: 'Skip Header Record',\n      value: 'true',\n      boolean: true,\n      required: false,\n    },\n  ];\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport { CollectionType, IField, IStringList } from '../common';\n\n/**\n * The Java class inspection data model contracts between frontend and backend.\n */\nexport const JAVA_MODEL_PACKAGE_PREFIX = 'io.atlasmap.java.v2';\nexport const JAVA_INSPECTION_REQUEST_JSON_TYPE =\n  JAVA_MODEL_PACKAGE_PREFIX + '.ClassInspectionRequest';\nexport const JAVA_CLASS_JSON_TYPE = JAVA_MODEL_PACKAGE_PREFIX + '.JavaClass';\nexport const JAVA_ENUM_FIELD_JSON_TYPE =\n  JAVA_MODEL_PACKAGE_PREFIX + '.JavaEnumField';\n\n/**\n * The root object that carries {@link IClassInspectionRequest}\n * when it's sent to backend.\n */\nexport interface IClassInspectionRequestContainer {\n  ClassInspectionRequest: IClassInspectionRequest;\n}\n\n/**\n * The serialized Java class inspection request.\n */\nexport interface IClassInspectionRequest {\n  jsonType: string;\n  fieldNameExclusions?: IStringList;\n  classNameExclusions?: IStringList;\n  classpath?: string;\n  className: string;\n  collectionType?: CollectionType;\n  collectionClassName?: string;\n  disablePrivateOnlyFields?: boolean;\n  disableProtectedOnlyFields?: boolean;\n  disablePublicOnlyFields?: boolean;\n  disablePublicGetterSetterFields?: boolean;\n}\n\n/**\n * The root object that carries {@link IClassInspectionResponse}\n * when it's received from backend.\n */\nexport interface IClassInspectionResponseContainer {\n  ClassInspectionResponse: IClassInspectionResponse;\n}\n\n/**\n * The serialized Java class inspection response.\n */\nexport interface IClassInspectionResponse {\n  javaClass: IJavaClass;\n  errorMessage: string;\n  executionTime: number;\n}\n\n/**\n * The root object that carries {@link IJavaClass}\n * when it's read from Java offline inspection (maven plugin).\n */\nexport interface IJavaClassContainer {\n  JavaClass: IJavaClass;\n}\n\n/**\n * The serialized Java class inspection result.\n */\nexport interface IJavaClass extends IJavaField {\n  javaEnumFields: IJavaEnumFields;\n  javaFields: IJavaFields;\n  packageName: string;\n  annotation: boolean;\n  annonymous: boolean;\n  enumeration: boolean;\n  isInterface: boolean;\n  localClass: boolean;\n  memberClass: boolean;\n  uri: string;\n}\n\n/**\n * The serialized Java field.\n */\nexport interface IJavaField extends IField {\n  annotations?: IStringList;\n  modifiers?: { modifier: Modifier[] };\n  parameterizedTypes?: IStringList;\n  className?: string;\n  canonicalClassName?: string;\n  collectionClassName?: string;\n  getMethod?: string;\n  setMethod?: string;\n  primitive?: boolean;\n  synthetic?: boolean;\n}\n\n/**\n * The serialized Java modifier.\n */\nexport enum Modifier {\n  ALL = 'ALL',\n  ABSTRACT = 'ABSTRACT',\n  FINAL = 'FINAL',\n  INTERFACE = 'INTERFACE',\n  NATIVE = 'NATIVE',\n  PACKAGE_PRIVATE = 'Package Private',\n  PUBLIC = 'PUBLIC',\n  PROTECTED = 'PROTECTED',\n  PRIVATE = 'PRIVATE',\n  STATIC = 'STATIC',\n  STRICT = 'STRICT',\n  SYNCHRONIZED = 'SYNCHRONIZED',\n  TRANSIENT = 'TRANSIENT',\n  VOLATILE = 'VOLATILE',\n  NONE = 'NONE',\n}\n\n/**\n * The container of serialized {@link IJavaEnumField}.\n */\nexport interface IJavaEnumFields {\n  javaEnumField: IJavaEnumField[];\n}\n\n/**\n * The serialized Java enum field.\n */\nexport interface IJavaEnumField extends IField {\n  name: string;\n  ordinal: number;\n  className: string;\n}\n\n/**\n * The container of serialized {@link IJavaField}.\n */\nexport interface IJavaFields {\n  javaField: IJavaField[];\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\nimport { IDocument, IField, IStringList, InspectionType } from '../common';\n\n/**\n * The JSON inspection data model contracts between frontend and backend.\n */\nexport const JSON_MODEL_PACKAGE_PREFIX = 'io.atlasmap.json.v2';\nexport const JSON_DATA_SOURCE_JSON_TYPE =\n  JSON_MODEL_PACKAGE_PREFIX + '.JsonDataSource';\nexport const JSON_ENUM_FIELD_JSON_TYPE =\n  JSON_MODEL_PACKAGE_PREFIX + '.JsonEnumField';\nexport const JSON_INSPECTION_REQUEST_JSON_TYPE =\n  JSON_MODEL_PACKAGE_PREFIX + '.JsonInspectionRequest';\n\n/**\n * The root object that carries {@link IJsonInspectionRequest}\n * when it's sent to backend.\n */\nexport interface IJsonInspectionRequestContainer {\n  JsonInspectionRequest: IJsonInspectionRequest;\n}\n\n/**\n * The serialized JSON inspection request.\n */\nexport interface IJsonInspectionRequest {\n  fieldNameExclusions?: IStringList;\n  typeNameExclusions?: IStringList;\n  namespaceExclusions?: IStringList;\n  jsonData?: string;\n  uri?: string;\n  type: InspectionType;\n}\n\n/**\n * The root object that carries {@link IJsonInspectionResponse}\n * when it's received from backend.\n */\nexport interface IJsonInspectionResponseContainer {\n  JsonInspectionResponse: IJsonInspectionResponse;\n}\n\n/**\n * The serialized JSON inspection response.\n */\nexport interface IJsonInspectionResponse {\n  jsonDocument: IJsonDocument;\n  errorMessage?: string;\n  executionTime?: number;\n}\n\n/**\n * The root object that carries {@link IJsonDocument}\n * when it's inspected with maven plugin.\n */\nexport interface IJsonDocumentContainer {\n  JsonDocument: IJsonDocument;\n}\n\n/**\n * The serialized JSON document inspection result.\n */\nexport interface IJsonDocument extends IDocument {}\n\n/**\n * The serialized JSON primitive field in inspection result.\n */\nexport interface IJsonField extends IField {\n  primitive: boolean;\n  typeName: string;\n  userCreated?: boolean;\n}\n\n/**\n * The serialized JSON complex field in inspection result.\n */\nexport interface IJsonComplexType extends IJsonField {\n  jsonFields?: IJsonFields;\n  jsonEnumFields?: IJsonEnumFields;\n  enumeration: boolean;\n  uri?: string;\n}\n\n/**\n * The container of JSON field.\n */\nexport interface IJsonFields {\n  jsonField: IJsonField[];\n}\n\n/**\n * The container of JSON enum field.\n */\nexport interface IJsonEnumFields {\n  jsonEnumField: IJsonEnumField[];\n}\n\n/**\n * The serialized JSON enum field.\n */\nexport interface IJsonEnumField extends IField {\n  ordinal: number;\n  typeName: string;\n  userCreated?: boolean;\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\nimport { IDataSource, IDocument, IField } from '../common';\n\n/**\n * The XML inspection data model contracts between frontend and backend.\n */\n\nexport const XML_MODEL_PACKAGE_PREFIX = 'io.atlasmap.xml.v2';\nexport const XML_DATA_SOURCE_JSON_TYPE =\n  XML_MODEL_PACKAGE_PREFIX + '.XmlDataSource';\nexport const XML_ENUM_FIELD_JSON_TYPE =\n  XML_MODEL_PACKAGE_PREFIX + '.XmlEnumField';\nexport const XML_INSPECTION_REQUEST_JSON_TYPE =\n  XML_MODEL_PACKAGE_PREFIX + '.XmlInspectionRequest';\n\n/**\n * The root object that carries {@link IXmlInspectionResponse}\n * when it's sent to backend.\n */\nexport interface IXmlInspectionResponseContainer {\n  XmlInspectionResponse: IXmlInspectionResponse;\n}\n\n/**\n * The serialized XML inspection response.\n */\nexport interface IXmlInspectionResponse {\n  xmlDocument: IXmlDocument;\n  errorMessage?: string;\n  executionTime?: number;\n}\n\n/**\n * The root object that carries {@link IXmlDocument}\n * when it's inspected with maven plugin.\n */\nexport interface IXmlDocumentContainer {\n  XmlDocument: IXmlDocument;\n}\n\n/**\n * The serialized XML document in inspection result.\n */\nexport interface IXmlDocument extends IDocument {\n  xmlNamespaces?: IXmlNamespaces;\n}\n\n/**\n * The serialized XML DataSource.\n * @see IXmlNamespaces\n */\nexport interface IXmlDataSource extends IDataSource {\n  template?: string;\n  xmlNamespaces?: IXmlNamespaces;\n}\n\n/**\n * The container of XML namespace.\n */\nexport interface IXmlNamespaces {\n  xmlNamespace: IXmlNamespace[];\n}\n\n/**\n * The serialized XML namespace.\n */\nexport interface IXmlNamespace {\n  alias: string;\n  uri: string;\n  locationUri?: string;\n  targetNamespace: boolean;\n}\n\n/**\n * The serialized XML primitive field.\n */\nexport interface IXmlField extends IField {\n  userCreated?: boolean;\n  attribute?: boolean;\n}\n\n/**\n * The serialized XML complex field.\n */\nexport interface IXmlComplexType extends IField {\n  xmlEnumFields?: IXmlEnumFields;\n  xmlFields?: IXmlFields;\n  annotation?: boolean;\n  anonymous?: boolean;\n  enumeration: boolean;\n  uri?: string;\n}\n\n/**\n * The container of XML enum field.\n */\nexport interface IXmlEnumFields {\n  xmlEnumField: IXmlEnumField[];\n}\n\n/**\n * The serialized XML enum field.\n */\nexport interface IXmlEnumField extends IField {\n  ordinal: number;\n  typeName: string;\n  attribute: boolean;\n  userCreated: boolean;\n}\n\n/**\n * The container of XML field.\n */\nexport interface IXmlFields {\n  xmlField: IXmlField[];\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\nimport { CollectionType, FieldType } from './common';\n\n/**\n * The field action Data model contracts between frontend and backend.\n */\n\n/**\n * The root object that carries {@link IAActionDetails}\n * when it's received from backend.\n */\nexport interface IActionDetailsContainer {\n  ActionDetails: IActionDetails;\n}\n\n/**\n * The container of serialized {@link IActionDetail}.\n */\nexport interface IActionDetails {\n  actionDetail: IActionDetail[];\n}\n\n/**\n * The serialized field action detail.\n */\nexport interface IActionDetail {\n  parameters?: IActionParameters;\n  name: string;\n  custom: boolean;\n  className: string;\n  method: string;\n  sourceType: FieldType;\n  targetType: FieldType;\n  multiplicity: Multiplicity;\n  actionSchema: IActionSchema;\n}\n\n/**\n * The container of serialized field action parameter in old style.\n */\nexport interface IActionParameters {\n  actionParameter: IActionParameter[];\n}\n\n/**\n * The serialized field action parameter in old style.\n */\nexport interface IActionParameter {\n  values: string[];\n  name: string;\n  displayName: string;\n  description: string;\n  fieldType: FieldType;\n}\n\n/**\n * The multiplicity of the field action.\n */\nexport enum Multiplicity {\n  ONE_TO_ONE = 'ONE_TO_ONE',\n  ONE_TO_MANY = 'ONE_TO_MANY',\n  MANY_TO_ONE = 'MANY_TO_ONE',\n  ZERO_TO_ONE = 'ZERO_TO_ONE',\n  MANY_TO_MANY = 'MANY_TO_MANY',\n}\n\n/**\n * The newer style of field action metadata.\n */\nexport interface IActionSchema {\n  type: string;\n  id: string;\n  properties: IActionSchemaProperties;\n}\n\n/**\n * The newer style of field action parameter metadata.\n */\nexport interface IActionSchemaProperties {\n  [key: string]: {\n    type: string;\n    const: string;\n    description: string;\n    title: string;\n    enum?: string[];\n    'atlas-field-type'?: FieldType;\n    'atlas-collection-type'?: CollectionType;\n  };\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport {\n  CollectionType,\n  DataSourceType,\n  FieldType,\n  IDataSource,\n  IField,\n  MODEL_PACKAGE_PREFIX,\n} from './common';\n\n/**\n * The mapping Data model contracts between frontend and backend.\n */\n\nexport const ATLAS_MAPPING_JSON_TYPE = MODEL_PACKAGE_PREFIX + '.AtlasMapping';\nexport const MAPPING_JSON_TYPE = MODEL_PACKAGE_PREFIX + '.Mapping';\nexport const COLLECTION_JSON_TYPE = MODEL_PACKAGE_PREFIX + '.Collection';\nexport const FIELD_GROUP_JSON_TYPE = MODEL_PACKAGE_PREFIX + '.FieldGroup';\nexport const PROPERTY_FIELD_JSON_TYPE = MODEL_PACKAGE_PREFIX + '.PropertyField';\nexport const CONSTANT_FIELD_JSON_TYPE = MODEL_PACKAGE_PREFIX + '.ConstantField';\n\n/**\n * The root object that carries {@link IAtlasMapping}\n * when it's sent/received to/from backend.\n */\nexport interface IAtlasMappingContainer {\n  AtlasMapping: IAtlasMapping;\n}\n\n/**\n * The serialized AtlasMap mapping definition.\n */\nexport interface IAtlasMapping {\n  dataSource?: IDataSource[];\n  mappings?: IMappings;\n  lookupTables?: ILookupTables;\n  constants?: IConstants;\n  properties?: IProperties;\n  name?: string;\n  jsonType: string;\n}\n\n/**\n * The container of serialized {@link IBaseMapping} held by {@link IAtlasMapping}\n */\nexport interface IMappings {\n  mapping: IBaseMapping[];\n}\n\n/**\n * The base interface of serialized mapping entry held by {@link IMappings}.\n * @see IMapping\n * @see ICollection\n */\nexport interface IBaseMapping {\n  alias?: string;\n  description?: string;\n  mappingType?: MappingType;\n  jsonType: string;\n}\n\n/**\n * The serialized mapping entry held by {@link IMappings}.\n * @see IBaseMapping\n */\nexport interface IMapping extends IBaseMapping {\n  expression?: string;\n  inputFieldGroup?: IFieldGroup;\n  inputField?: IField[];\n  outputField: IField[];\n  id: string;\n  delimiter?: string;\n  delimiterString?: string;\n  lookupTableName?: string;\n  strategy?: string;\n  strategyClassName?: string;\n}\n\n/**\n * The serialized collection mapping entry held by {@link IMappings}.\n * @see IBaseMapping\n * This is no longer used ATM, but the one-to-many/many-to-one for each COMPLEX collection\n * might want to resurrect it - https://github.com/atlasmap/atlasmap/issues/1236\n */\nexport interface ICollection extends IBaseMapping {\n  mappings: IMappings;\n  collectionSize: number;\n  collectionType: CollectionType;\n}\n\n/**\n * The mapping mode, such as {@link LOOKUP}, {@link COLLECTION}, etc.\n * @deprecated {@link COMBINE}, {@link MAP}, {@link SEPARATE}\n */\nexport enum MappingType {\n  ALL = 'ALL',\n  COLLECTION = 'COLLECTION',\n  COMBINE = 'COMBINE',\n  LOOKUP = 'LOOKUP',\n  MAP = 'MAP',\n  SEPARATE = 'SEPARATE',\n  NONE = 'NONE',\n}\n\n/**\n * The group of fields in the mapping.\n */\nexport interface IFieldGroup extends IField {\n  field?: IField[];\n}\n\n/**\n * The container of serialized {@link ILookupTable}.\n */\nexport interface ILookupTables {\n  lookupTable?: ILookupTable[];\n}\n\n/**\n * The container of serialized LookupTable.\n * @see ILookupEntry\n */\nexport interface ILookupTable {\n  lookupEntry: ILookupEntry[];\n  name: string;\n  description?: string;\n}\n\n/**\n * The serialized lookup table entry.\n * @see {@link ILookupTable}\n */\nexport interface ILookupEntry {\n  sourceValue: string;\n  sourceType: FieldType;\n  targetValue: string;\n  targetType: FieldType;\n}\n\n/**\n * The container of serialized Constant.\n * @see IConstant\n */\nexport interface IConstants {\n  constant?: IConstant[];\n}\n\n/**\n * The serialized Constant.\n */\nexport interface IConstant {\n  name: string;\n  value: string;\n  fieldType: FieldType;\n}\n\n/**\n * The container of serialized Property.\n */\nexport interface IProperties {\n  property?: IProperty[];\n}\n\n/**\n * The serialized Property.\n */\nexport interface IProperty {\n  name: string;\n  value?: string;\n  fieldType: FieldType;\n  scope?: string;\n  dataSourceType?: DataSourceType;\n}\n\n/**\n * The serialized JSON DataSource.\n * @see IDataSource\n */\nexport interface IJsonDataSource extends IDataSource {\n  template?: string;\n}\n\n/**\n * The serialized property field in the mapping.\n */\nexport interface IPropertyField extends IField {\n  scope?: string;\n}\n\n/**\n * The root object that carries {@link IValidation}\n * when it's received from backend as a result of\n * mapping validation.\n */\nexport interface IValidationsContainer {\n  Validations: IValidations;\n}\n\n/**\n * THe container of serialized validation result.\n */\nexport interface IValidations {\n  validation: IValidation[];\n}\n\n/**\n * The validation result.\n */\nexport interface IValidation {\n  message?: string;\n  id?: string;\n  docId?: string;\n  docName?: string;\n  scope?: ValidationScope;\n  status?: ValidationStatus;\n}\n\n/**\n * The validation scope.\n */\nexport enum ValidationScope {\n  DATA_SOURCE = 'DATA_SOURCE',\n  MAPPING = 'MAPPING',\n  LOOKUP_TABLE = 'LOOKUP_TABLE',\n  CONSTANT = 'CONSTANT',\n  PROPERTY = 'PROPERTY',\n}\n\n/**\n * The validation status.\n */\nexport enum ValidationStatus {\n  INFO = 'INFO',\n  WARN = 'WARN',\n  ERROR = 'ERROR',\n}\n\n/**\n * The root object that carries {@link IStringMap}\n * when it's received from backend.\n */\nexport interface IStringMapContainer {\n  StringMap: IStringMap;\n}\n\n/**\n * The serialized string map, used for deliverying\n * a list of mapping name.\n */\nexport interface IStringMap {\n  stringMapEntry: IStringMapEntry[];\n}\n\n/**\n * The string map entry with name and value.\n */\nexport interface IStringMapEntry {\n  name: string;\n  value: string;\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport { IMapping } from './mapping';\nimport { MODEL_PACKAGE_PREFIX } from './common';\n\n/**\n * The mapping Data model contracts between frontend and backend.\n */\n\nexport const PROCESS_MAPPING_REQUEST_JSON_TYPE =\n  MODEL_PACKAGE_PREFIX + '.ProcessMappingRequest';\n\n/**\n * The root object that carries {@link IProcessMappingRequest}\n * when it's sent to backend.\n */\nexport interface IProcessMappingRequestContainer {\n  ProcessMappingRequest: IProcessMappingRequest;\n}\n\n/**\n * The serialized process mapping request object.\n */\nexport interface IProcessMappingRequest {\n  jsonType: string;\n  mapping: IMapping;\n}\n\n/**\n * The root object that carries {@link IProcessMappingResponse}\n * when it's received from backend.\n */\nexport interface IProcessMappingResponseContainer {\n  ProcessMappingResponse: IProcessMappingResponse;\n}\n\n/**\n * The serialized process mapping response object.\n */\nexport interface IProcessMappingResponse {\n  jsonType: string;\n  mapping: IMapping;\n  audits: IAudits;\n}\n\n/**\n * The container of serialized {@link IAudit}.\n */\nexport interface IAudits {\n  audit: IAudit[];\n}\n\n/**\n * The serialized audit object which is logged during processing a mapping.\n */\nexport interface IAudit {\n  message?: string;\n  docId?: string;\n  docName?: string;\n  path?: string;\n  value?: string;\n  status: AuditStatus;\n}\n\nexport enum AuditStatus {\n  INFO = 'INFO',\n  WARN = 'WARN',\n  ERROR = 'ERROR',\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport { saveAs } from 'file-saver';\n\nexport class CommonUtil {\n  static removeItemFromArray(item: any, items: any[]): boolean {\n    if (item == null || items == null || items.length === 0) {\n      return false;\n    }\n    let i = 0;\n    let itemWasRemoved = false;\n    while (i < items.length) {\n      if (items[i] === item) {\n        items.splice(i, 1);\n        itemWasRemoved = true;\n      } else {\n        i++;\n      }\n    }\n    return itemWasRemoved;\n  }\n\n  /**\n   * Split a source string by the specified substring into a string array.\n   *\n   * @param inStr\n   * @param splitMarker\n   */\n  static splitByString(inStr: string, splitMarker: string): string[] {\n    let splitLoc = 0;\n    let splitLocEnd = 0;\n    let fragment = null;\n    const splitMarkerLen = splitMarker.length;\n    const result: string[] = [];\n\n    if (\n      inStr === null ||\n      inStr.length === 0 ||\n      splitMarker === null ||\n      splitMarkerLen === 0\n    ) {\n      return [];\n    }\n    while (splitLoc !== -1) {\n      splitLoc = inStr.indexOf(splitMarker);\n      splitLocEnd = inStr.indexOf(splitMarker, splitLoc + 1);\n      fragment = inStr.substring(splitLoc, splitLocEnd);\n      result.push(fragment);\n      inStr = inStr.substring(splitLocEnd + splitMarkerLen);\n    }\n    return result;\n  }\n\n  /**\n   * Turn a string into a byte array.\n   *\n   * @param str\n   */\n  static str2bytes(str: string): Uint8Array {\n    const bytes = new Uint8Array(str.length);\n    for (let i = 0; i < str.length; i++) {\n      bytes[i] = str.charCodeAt(i);\n    }\n    return bytes;\n  }\n\n  /**\n   * Asynchronously read from the specified file and return as a string.\n   *\n   * @param fileName\n   * @param reader\n   */\n  static async readFile(file: File, reader: FileReader): Promise<string> {\n    return new Promise<string>((resolve) => {\n      reader.onload = () => {\n        const fileBody = reader.result;\n        resolve(fileBody as string);\n      };\n      reader.readAsText(file);\n    });\n  }\n\n  /**\n   *  Perform an asynchronous binary read of the specified file name with the specified reader object.\n   *\n   * @param fileName - file to read\n   * @param reader - reader object\n   */\n  static async readBinaryFile(\n    file: File,\n    reader: FileReader\n  ): Promise<Int8Array> {\n    return new Promise<Int8Array>((resolve) => {\n      reader.onload = () => {\n        const fileBody = new Int8Array(reader.result as ArrayBuffer);\n        resolve(fileBody);\n      };\n      reader.readAsArrayBuffer(file);\n    });\n  }\n\n  /**\n   * Asynchronously write the specified file content (Blob) to the specified file name.  It will appear\n   * in the user's local Downloads directory (or equivalent).\n   *\n   * @param fileContent\n   * @param fName\n   */\n  static async writeFile(fileContent: Blob, fName: string): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      saveAs(fileContent, fName);\n      resolve(true);\n    });\n  }\n\n  /**\n   * Convert a camel-case string into human-readable form.\n   *\n   * @param camelCaseString\n   */\n  static toDisplayable(camelCaseString: string): string {\n    if (\n      typeof camelCaseString === 'undefined' ||\n      !camelCaseString ||\n      camelCaseString.indexOf(' ') >= 0\n    ) {\n      return camelCaseString;\n    }\n    let displayableString: string = camelCaseString.charAt(0).toUpperCase();\n    for (let index = 1; index < camelCaseString.length; index++) {\n      const chr: string = camelCaseString.charAt(index);\n      if (chr !== chr.toLowerCase()) {\n        displayableString += ' ';\n      }\n      displayableString += chr;\n    }\n    return displayableString;\n  }\n\n  /**\n   * Return a string path that fits into the width provided.  Capture as much of the leaf\n   * as possible, then as much of the beginning with the remaining space.\n   *\n   * @param path\n   * @param fieldWidth\n   */\n  static extractDisplayPath(path: string, fieldWidth: number): string {\n    const MAX_PATH_WIDTH = fieldWidth - 4; // account for length of ellipsis\n\n    if (!path || MAX_PATH_WIDTH <= 0) {\n      return '';\n    }\n    if (path.length <= MAX_PATH_WIDTH) {\n      return path;\n    }\n    const segmentedPath = path.split('/');\n    const leaf = '/' + segmentedPath[segmentedPath.length - 1];\n    if (leaf.length >= MAX_PATH_WIDTH) {\n      return leaf.substr(0, MAX_PATH_WIDTH);\n    }\n    const delta = MAX_PATH_WIDTH - leaf.length;\n    return path.substr(0, delta) + '...' + leaf;\n  }\n\n  /**\n   * Use the JSON utility to translate the specified buffer into a JSON buffer - then replace any\n   * non-ascii character encodings with unicode escape sequences.\n   *\n   * @param buffer\n   */\n  static sanitizeJSON(buffer: string): string {\n    let jsonBuffer = JSON.stringify(buffer);\n    jsonBuffer = jsonBuffer.replace(/[\\u007F-\\uFFFF]/g, function (chr) {\n      return '\\\\u' + ('0000' + chr.charCodeAt(0).toString(16)).substr(-4);\n    });\n    return jsonBuffer;\n  }\n\n  /**\n   * Restrict JSON parsing to the document management service.\n   *\n   * @param buffer\n   */\n  static objectize(buffer: any): any {\n    if (typeof buffer === 'string') {\n      return JSON.parse(buffer);\n    } else {\n      return buffer;\n    }\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport {\n  DocumentType,\n  FIELD_PATH_SEPARATOR,\n  FieldType,\n  IField,\n} from '../contracts/common';\nimport { DocumentDefinition } from './document-definition.model';\n\nexport class EnumValue {\n  name: string;\n  ordinal: number;\n}\n\nexport class Field {\n  private static uuidCounter = 0;\n\n  name: string;\n  classIdentifier: string;\n  displayName: string;\n  path: string;\n  type: FieldType;\n  scope: string | undefined;\n  value: string;\n  column: number;\n  // The field properties read from document inspection result.\n  documentField: IField = { jsonType: '' };\n  parentField: Field;\n  partOfMapping = false;\n  partOfTransformation = false;\n  visibleInCurrentDocumentSearch = true;\n  enumeration = false;\n  enumIndexValue: number;\n  enumValues: EnumValue[] = [];\n  children: Field[] = [];\n  fieldDepth = 0;\n  uuid: string;\n  collapsed = true;\n  hasUnmappedChildren = false;\n  isCollection = false;\n  isArray = false;\n  isAttribute = false;\n  isPrimitive = false;\n  userCreated = false;\n  docDef: DocumentDefinition;\n  namespaceAlias: string | null;\n\n  static fieldHasUnmappedChild(field: Field): boolean {\n    if (field == null) {\n      return false;\n    }\n    if (field.isTerminal()) {\n      return field.partOfMapping === false;\n    }\n    for (const childField of field.children) {\n      if (\n        childField.hasUnmappedChildren ||\n        Field.fieldHasUnmappedChild(childField)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  static getFieldPaths(fields: Field[]): string[] {\n    const paths: string[] = [];\n    for (const field of fields) {\n      paths.push(field.path);\n    }\n    return paths;\n  }\n\n  static getFieldNames(fields: Field[]): string[] {\n    const paths: string[] = [];\n    for (const field of fields) {\n      paths.push(field.name);\n    }\n    return paths;\n  }\n\n  static getField(fieldPath: string, fields: Field[]): Field {\n    // TODO: check this non null operator\n    return fields.find((field) => fieldPath === field.path)!;\n  }\n\n  static alphabetizeFields(fields: Field[]): void {\n    const fieldsByPath: { [key: string]: Field } = {};\n    const fieldPaths: string[] = [];\n    for (const field of fields) {\n      let fieldKey = field.path;\n      // Discard duplicate field keys, field names are repeatable.\n      if (fieldsByPath[fieldKey] != null) {\n        continue;\n      }\n      fieldsByPath[fieldKey] = field;\n      fieldPaths.push(fieldKey);\n    }\n    fieldPaths.sort();\n    fields.length = 0;\n    for (const path of fieldPaths) {\n      fields.push(fieldsByPath[path]);\n    }\n\n    for (const field of fields) {\n      if (field.children && field.children.length) {\n        this.alphabetizeFields(field.children);\n      }\n    }\n  }\n\n  constructor() {\n    this.uuid = Field.uuidCounter.toString();\n    Field.uuidCounter++;\n  }\n\n  /**\n   * Expand all fields above the current field.\n   */\n  expandToRoot() {\n    let parent: Field = this;\n    while (parent != null) {\n      parent.collapsed = false;\n      if (parent.isPropertyOrConstant()) {\n        if (parent.docDef) {\n          parent.docDef.showFields = true;\n        }\n      }\n      parent = parent.parentField;\n    }\n  }\n\n  getNameWithNamespace(): string {\n    if (!this.namespaceAlias) {\n      return this.name;\n    }\n    return this.namespaceAlias + ':' + this.name;\n  }\n\n  isParentField(): boolean {\n    if (this.isCollection && !this.isPrimitive) {\n      return true;\n    }\n    return this.type === 'COMPLEX';\n  }\n\n  isStringField(): boolean {\n    return this.type === 'STRING';\n  }\n\n  isTerminal(): boolean {\n    if (this.enumeration) {\n      return true;\n    }\n    if (this.isCollection && !this.isPrimitive) {\n      return false;\n    }\n    return this.type !== 'COMPLEX';\n  }\n\n  copy(): Field {\n    const copy: Field = new Field();\n    Object.assign(copy, this);\n\n    // make these pointers to the same object, not copies\n    copy.documentField = this.documentField;\n    copy.parentField = this.parentField;\n    copy.docDef = this.docDef;\n\n    copy.children = [];\n    for (const childField of this.children) {\n      copy.children.push(childField.copy());\n    }\n    // console.log(\"Copied: \" + this.name, { \"src\": this, \"target\": copy });\n    return copy;\n  }\n\n  copyFrom(that: Field): void {\n    Object.assign(this, that);\n\n    // make these pointers to the same object, not copies\n    this.documentField = that.documentField;\n    this.parentField = that.parentField;\n    this.docDef = that.docDef;\n\n    this.children = [];\n    for (const childField of that.children) {\n      this.children.push(childField.copy());\n    }\n  }\n\n  // @ts-ignore\n  getCollectionParentField(): Field {\n    let parent: Field = this;\n    while (parent != null) {\n      if (parent.isCollection) {\n        return parent;\n      }\n      parent = parent.parentField;\n    }\n  }\n\n  isInCollection(): boolean {\n    return this.getCollectionParentField() != null;\n  }\n\n  getCollectionCount(): number {\n    let count = 0;\n    let field: Field = this;\n    while (field != null) {\n      if (field.isCollection) {\n        count++;\n      }\n      field = field.parentField;\n    }\n    return count;\n  }\n\n  isSource(): boolean {\n    return this.docDef != null && this.docDef.isSource;\n  }\n\n  getCollectionType(): string | null {\n    return this.isCollection ? (this.isArray ? 'ARRAY' : 'LIST') : null;\n  }\n\n  getFieldLabel(showTypes: boolean, includePath: boolean): string {\n    let fieldPath = '';\n    if (includePath) {\n      fieldPath = this.path;\n    } else {\n      const pathComps = this.path.split(FIELD_PATH_SEPARATOR);\n      // Check for a leaf path attribute field starting with '@'\n      if (\n        this.isAttribute &&\n        pathComps.length > 0 &&\n        pathComps[pathComps.length - 1].startsWith('@')\n      ) {\n        fieldPath = this.path.split('@')[1];\n      } else {\n        fieldPath = this.getNameWithNamespace();\n      }\n    }\n    if (showTypes && this.type && !this.isPropertyOrConstant()) {\n      fieldPath += ' (' + this.type + ')';\n    } else if (this.isProperty() && this.value != null) {\n      fieldPath += ' = ' + this.value;\n      if (showTypes && this.type) {\n        fieldPath += ' (' + this.type + ')';\n      }\n    }\n    if (!fieldPath && !this.parentField) {\n      fieldPath = '< Document Root >';\n    }\n    return fieldPath;\n  }\n\n  isPropertyOrConstant(): boolean {\n    return this.docDef == null ? false : this.docDef.isPropertyOrConstant;\n  }\n\n  isProperty(): boolean {\n    return this.docDef == null\n      ? false\n      : this.docDef.type === DocumentType.PROPERTY;\n  }\n\n  isConstant(): boolean {\n    return this.docDef == null\n      ? false\n      : this.docDef.type === DocumentType.CONSTANT;\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport {\n  DocumentType,\n  FIELD_PATH_SEPARATOR,\n  FieldType,\n  InspectionType,\n} from '../contracts/common';\n\nimport { CommonUtil } from '../utils/common-util';\nimport { DocumentInitializationModel } from './config.model';\nimport { Field } from './field.model';\nimport { MappingDefinition } from './mapping-definition.model';\n\nexport class NamespaceModel {\n  private static unqualifiedNamespace: NamespaceModel;\n\n  alias: string;\n  uri: string;\n  locationUri: string | undefined;\n  createdByUser = false;\n  isTarget = false;\n\n  static getUnqualifiedNamespace(): NamespaceModel {\n    if (NamespaceModel.unqualifiedNamespace == null) {\n      const ns: NamespaceModel = new NamespaceModel();\n      ns.alias = 'Unqualified';\n      NamespaceModel.unqualifiedNamespace = ns;\n    }\n    return NamespaceModel.unqualifiedNamespace;\n  }\n\n  getPrettyLabel(): string {\n    if (this === NamespaceModel.getUnqualifiedNamespace()) {\n      return this.alias;\n    }\n    return (\n      (this.isTarget ? 'Target' : this.alias) +\n      ' [' +\n      (this.uri == null ? 'NO URI' : this.uri) +\n      ']'\n    );\n  }\n\n  copy(): NamespaceModel {\n    const copy: NamespaceModel = new NamespaceModel();\n    Object.assign(copy, this);\n    return copy;\n  }\n\n  copyFrom(that: NamespaceModel): void {\n    Object.assign(this, that);\n  }\n}\n\nexport class PaddingField extends Field {\n  constructor(private _isSource: boolean) {\n    super();\n    this.name = '<padding field>';\n    this.classIdentifier = '<padding field>';\n    this.type = FieldType.NONE;\n    this.displayName = '<padding field>';\n    this.path = '';\n  }\n\n  isSource(): boolean {\n    return this._isSource;\n  }\n}\n\nexport class DocumentDefinition {\n  private static padField: Field;\n\n  LEFT_BRACKET = '\\x5b';\n  RIGHT_BRACKET = '\\x5d';\n\n  initModel: DocumentInitializationModel;\n  id: string;\n  _type: DocumentType;\n  name: string;\n  description: string | undefined;\n  uri: string;\n  inspectionType: InspectionType;\n  inspectionParameters: { [key: string]: string };\n  inspectionSource: string;\n  inspectionResult: string;\n  isSource: boolean;\n  isPropertyOrConstant: boolean;\n  selectedRoot: string;\n  classPath: string;\n  initialized = false;\n  errorOccurred = false;\n  fields: Field[] = [];\n  allFields: Field[] = [];\n  terminalFields: Field[] = [];\n  complexFieldsByClassIdentifier: { [key: string]: Field } = {};\n  enumFieldsByClassIdentifier: { [key: string]: Field } = {};\n  fieldsByPath: { [key: string]: Field } = {};\n  fieldPaths: string[] = [];\n  showFields = true;\n  visibleInCurrentDocumentSearch = true;\n  namespaces: NamespaceModel[] = [];\n  characterEncoding: string;\n  locale: string;\n\n  set type(type: DocumentType) {\n    this._type = type;\n    this.isPropertyOrConstant =\n      type === DocumentType.CONSTANT || type === DocumentType.PROPERTY;\n  }\n\n  get type(): DocumentType {\n    return this._type;\n  }\n\n  getComplexField(classIdentifier: string): Field {\n    return this.complexFieldsByClassIdentifier[classIdentifier];\n  }\n\n  getEnumField(classIdentifier: string): Field {\n    return this.enumFieldsByClassIdentifier[classIdentifier];\n  }\n\n  getAllFields(): Field[] {\n    return [...this.allFields];\n  }\n\n  /**\n   * Return true if the specified field name already exists in the specified document definition,\n   * false otherwise.\n   *\n   * @param targetField\n   * @param targetFieldDocDefType\n   */\n  fieldExists(\n    targetField: Field,\n    targetFieldDocDefType: DocumentType\n  ): boolean {\n    for (const field of this.getAllFields()) {\n      if (\n        field.name === targetField.name &&\n        field.docDef.type === targetFieldDocDefType\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  isFieldsExist(fields: Field[]): boolean {\n    if (fields == null || fields.length === 0) {\n      return true;\n    }\n    const foundFields: Field[] = this.getFields(Field.getFieldPaths(fields));\n    return foundFields != null && fields.length === foundFields.length;\n  }\n\n  getFields(fieldPaths: string[]): Field[] {\n    const fields: Field[] = [];\n    for (const fieldPath of fieldPaths) {\n      const field = this.getField(fieldPath);\n      if (field != null) {\n        fields.push(field);\n      }\n    }\n    return fields;\n  }\n\n  getName(showTypes: boolean): string {\n    let name = this.name;\n    if (showTypes && !this.isPropertyOrConstant) {\n      const type = this.type;\n      if (type) {\n        name += ' (' + type + ')';\n      }\n    }\n    return name;\n  }\n\n  getNamespaceForAlias(alias: string): NamespaceModel {\n    // TODO: check this non null operator\n    return this.namespaces.find((ns) => alias === ns.alias)!;\n  }\n\n  getField(fieldPath: string): Field | null {\n    if (!fieldPath) {\n      return null;\n    }\n    let field: Field = this.fieldsByPath[fieldPath];\n    // if we can't find the field we're looking for, find parent fields and populate their children\n    const pathSeparator: string = FIELD_PATH_SEPARATOR;\n    let originalPath: string = fieldPath;\n    // strip beginning path separator from path\n    if (originalPath != null && originalPath.indexOf(pathSeparator) === 0) {\n      originalPath = originalPath.substring(1);\n    }\n    if (field == null && originalPath.indexOf(pathSeparator) !== -1) {\n      let currentParentPath = '';\n      while (originalPath.indexOf(pathSeparator) !== -1) {\n        const currentPathSection: string = originalPath.substr(\n          0,\n          originalPath.indexOf(pathSeparator)\n        );\n        currentParentPath += pathSeparator + currentPathSection;\n        const parentField: Field = this.fieldsByPath[currentParentPath];\n        if (parentField == null) {\n          if (originalPath.indexOf(pathSeparator) !== -1) {\n            originalPath = originalPath.substr(\n              originalPath.indexOf(pathSeparator) + 1\n            );\n            continue;\n          } else {\n            break;\n          }\n          // https://github.com/atlasmap/atlasmap/issues/1128\n          // throw new Error('Could not populate parent field with path \\''\n          //  + currentParentPath + '\\' (for: ' + fieldPath + ')');\n        }\n        this.populateChildren(parentField);\n        if (originalPath.indexOf(pathSeparator) !== -1) {\n          originalPath = originalPath.substr(\n            originalPath.indexOf(pathSeparator) + 1\n          );\n        }\n      }\n      field = this.fieldsByPath[fieldPath];\n    }\n    return field;\n  }\n\n  getComplexFields(): Field[] {\n    return this.discoverAllComplexFields(this.fields);\n  }\n\n  getTerminalFields(): Field[] {\n    return [...this.terminalFields];\n  }\n\n  initializeFromFields(): void {\n    if (this.type === DocumentType.JAVA) {\n      this.prepareComplexFields();\n    }\n\n    Field.alphabetizeFields(this.fields);\n\n    for (const field of this.fields) {\n      this.populateFieldData(field);\n      this.allFields.push(field);\n      this.populateChildren(field);\n    }\n\n    this.fieldPaths.sort();\n    this.initialized = true;\n  }\n\n  updateField(field: Field, oldPath: string | null): void {\n    Field.alphabetizeFields(this.fields);\n    if (\n      oldPath != null &&\n      oldPath.length > 0 &&\n      this.fieldsByPath[oldPath] != null\n    ) {\n      delete this.fieldsByPath[oldPath];\n      CommonUtil.removeItemFromArray(oldPath, this.fieldPaths);\n    } else {\n      CommonUtil.removeItemFromArray(field.path, this.fieldPaths);\n    }\n    this.populateFieldData(field);\n    this.fieldPaths.sort();\n  }\n\n  addField(field: Field): void {\n    if (!field.parentField || this.isPropertyOrConstant) {\n      this.fields.push(field);\n      Field.alphabetizeFields(this.fields);\n    } else {\n      this.populateChildren(field.parentField);\n      field.parentField.children.push(field);\n      Field.alphabetizeFields(field.parentField.children);\n    }\n    this.populateFieldData(field);\n    this.allFields.push(field);\n    this.fieldPaths.sort();\n  }\n\n  /**\n   * Return true if the passed field is terminal or children are detected, false otherwise.\n   * @param field - target field\n   */\n  populateChildren(field: Field): boolean {\n    // populate complex fields\n    if (field.isTerminal() || field.children.length > 0) {\n      return true;\n    }\n\n    let cachedField = this.getComplexField(field.classIdentifier);\n    if (cachedField == null) {\n      return false;\n    }\n\n    // copy cached field contents\n    cachedField = cachedField.copy();\n    for (let childField of cachedField.children) {\n      childField = childField.copy();\n      childField.parentField = field;\n      this.rewriteFieldPath(childField);\n      this.populateFieldData(childField);\n      field.children.push(childField);\n    }\n\n    if (field.children.length > 0) {\n      this.fieldPaths.sort();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private rewriteFieldPath(field: Field) {\n    const parent = field.parentField;\n    const pathSegments = field.path.split(FIELD_PATH_SEPARATOR);\n    field.path = parent.path + FIELD_PATH_SEPARATOR + pathSegments.slice(-1)[0];\n    for (let child of field.children) {\n      this.rewriteFieldPath(child);\n    }\n  }\n\n  /**\n   * Clear all fields in this document.\n   */\n  clearFields(): void {\n    this.initialized = false;\n    this.fields = [];\n    this.allFields = [];\n    this.terminalFields = [];\n    this.fieldPaths = [];\n    this.namespaces = [];\n    this.fieldsByPath = {};\n    this.complexFieldsByClassIdentifier = {};\n    this.enumFieldsByClassIdentifier = {};\n  }\n\n  getFieldIndex(field: Field, fields: Field[]): number {\n    for (let i = 0; i < fields.length; i++) {\n      if (fields[i].path === field.path) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Remove the specified field from this document definition.\n   *\n   * @param field\n   */\n  removeField(field: Field): void {\n    if (field == null) {\n      return;\n    }\n    let targetIndex = this.getFieldIndex(field, this.fields);\n    if (targetIndex > -1) {\n      this.fields.splice(targetIndex, 1);\n    }\n    targetIndex = this.getFieldIndex(field, this.allFields);\n    if (targetIndex > -1) {\n      this.allFields.splice(targetIndex, 1);\n    }\n    targetIndex = this.getFieldIndex(field, this.terminalFields);\n    if (targetIndex > -1) {\n      this.terminalFields.splice(targetIndex, 1);\n    }\n    let oldFieldPath = field.path;\n    CommonUtil.removeItemFromArray(oldFieldPath, this.fieldPaths);\n    delete this.fieldsByPath[oldFieldPath];\n    if (field.parentField != null) {\n      CommonUtil.removeItemFromArray(field, field.parentField.children);\n    }\n  }\n\n  updateFromMappings(mappingDefinition: MappingDefinition): void {\n    if (mappingDefinition === null) {\n      return;\n    }\n\n    for (const field of this.allFields) {\n      field.partOfMapping = false;\n      field.hasUnmappedChildren = false;\n      field.partOfTransformation = false;\n    }\n\n    // FIXME: some of this work is happening N times for N source/target docs, should only happen once.\n    for (const mapping of mappingDefinition.getAllMappings(true)) {\n      for (const field of mapping.getAllFields()) {\n        let parentField = field;\n        // TODO: check this non null operator\n        const partOfTransformation =\n          mapping.getMappedFieldForField(field)!.actions.length > 0;\n        while (parentField != null) {\n          parentField.partOfMapping = true;\n          parentField.partOfTransformation =\n            parentField.partOfTransformation || partOfTransformation;\n          parentField = parentField.parentField;\n        }\n      }\n    }\n    for (const field of this.allFields) {\n      field.hasUnmappedChildren = Field.fieldHasUnmappedChild(field);\n    }\n  }\n\n  private populateFieldData(field: Field): void {\n    field.docDef = this;\n    let newFieldKey = field.path;\n    this.fieldPaths.push(newFieldKey);\n    this.fieldsByPath[newFieldKey] = field;\n\n    if (field.enumeration) {\n      this.enumFieldsByClassIdentifier[field.classIdentifier] = field;\n    }\n    if (field.isTerminal()) {\n      this.terminalFields.push(field);\n    } else {\n      for (const childField of field.children) {\n        this.populateFieldData(childField);\n        this.allFields.push(childField);\n      }\n    }\n  }\n\n  private prepareComplexFields(): void {\n    const fields: Field[] = this.fields;\n\n    // build complex field cache\n    this.discoverComplexFields(fields);\n\n    for (const key in this.complexFieldsByClassIdentifier) {\n      if (!this.complexFieldsByClassIdentifier.hasOwnProperty(key)) {\n        continue;\n      }\n      const cachedField: Field = this.complexFieldsByClassIdentifier[key];\n      // remove children more than one level deep in cached fields\n      for (const childField of cachedField.children) {\n        childField.children = [];\n      }\n      // alphabetize complex field's childrein\n      Field.alphabetizeFields(cachedField.children);\n    }\n  }\n\n  private discoverAllComplexFields(fields: Field[]): Field[] {\n    let complexFields: Field[] = [];\n\n    for (const field of fields) {\n      if (\n        field.type === 'COMPLEX' &&\n        (field.documentField.status === 'SUPPORTED' ||\n          field.documentField.status === 'CACHED')\n      ) {\n        complexFields.push(field.copy());\n      }\n      if (field.children) {\n        complexFields = complexFields.concat(\n          this.discoverAllComplexFields(field.children)\n        );\n      }\n    }\n    return complexFields;\n  }\n\n  private discoverComplexFields(fields: Field[]): void {\n    for (const field of fields) {\n      if (field.type !== 'COMPLEX') {\n        continue;\n      }\n      if (field.documentField.status === 'SUPPORTED') {\n        this.complexFieldsByClassIdentifier[field.classIdentifier] =\n          field.copy();\n      }\n      if (field.children) {\n        this.discoverComplexFields(field.children);\n      }\n    }\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport {\n  CollectionType,\n  DocumentType,\n  InspectionType,\n} from '../contracts/common';\nimport { DocumentDefaultName } from '../common/config.types';\nimport { DocumentDefinition } from './document-definition.model';\nimport { DocumentManagementService } from '../services/document-management.service';\nimport { ErrorHandlerService } from '../services/error-handler.service';\nimport { FieldActionService } from '../services/field-action.service';\nimport { FileManagementService } from '../services/file-management.service';\nimport { InitializationService } from '../services/initialization.service';\nimport { Logger } from 'loglevel';\nimport { MappingDefinition } from './mapping-definition.model';\nimport { MappingExpressionService } from '../services/mapping-expression.service';\nimport { MappingManagementService } from '../services/mapping-management.service';\nimport { MappingPreviewService } from '../services/mapping-preview.service';\n\nexport class DataMapperInitializationModel {\n  dataMapperVersion = '0.9.2017.07.28';\n  initialized = false;\n  loadingStatus = 'Loading.';\n  admHttpTimeout = 30000; // 30 seconds\n  initializationErrorOccurred = false;\n\n  baseJavaInspectionServiceUrl?: string;\n  baseXMLInspectionServiceUrl?: string;\n  baseJSONInspectionServiceUrl?: string;\n  baseCSVInspectionServiceUrl?: string;\n  baseMappingServiceUrl?: string;\n\n  xsrfHeaderName?: string;\n  xsrfCookieName?: string;\n  xsrfDefaultTokenValue?: string;\n\n  /* class path fetching configuration */\n  classPathFetchTimeoutInMilliseconds = 30000;\n  // if classPath is specified, maven call to resolve pom will be skipped\n  pomPayload?: string;\n\n  classPath?: string;\n\n  /* inspection service filtering flags */\n  fieldNameExclusions: string[] = [];\n  classNameExclusions: string[] = [];\n  disablePrivateOnlyFields = false;\n  disableProtectedOnlyFields = false;\n  disablePublicOnlyFields = false;\n  disablePublicGetterSetterFields = false;\n\n  disableMappingPreviewMode = false;\n\n  /* enable the navigation bar and import/export */\n  disableNavbar = true;\n\n  mappingInitialized = false;\n}\n\nexport class DocumentInitializationModel {\n  id: string;\n  type: DocumentType;\n  name: string;\n  description: string;\n  isSource: boolean;\n  showFields = true;\n  inspectionType: InspectionType;\n  inspectionSource: string;\n  inspectionParameters: { [key: string]: string };\n  inspectionResult: string;\n  selectedRoot: string;\n  collectionType?: CollectionType;\n  collectionClassName?: string;\n}\n\n/**\n * The central store of the AtlasMap UI core library. It is expected to be initialized through\n * {@link InitializationService}.\n */\nexport class ConfigModel {\n  private static cfg: ConfigModel = new ConfigModel();\n\n  initCfg: DataMapperInitializationModel = new DataMapperInitializationModel();\n\n  /* current ui state config */\n  showMappingDetailTray = false;\n  showMappingTable = false;\n  showNamespaceTable = false;\n  showLinesAlways = true;\n  showTypes = false;\n  showMappedFields = true;\n  showUnmappedFields = true;\n  _showMappingPreview = false;\n  currentDraggedField: any = null;\n\n  documentService: DocumentManagementService;\n  mappingService: MappingManagementService;\n  errorService: ErrorHandlerService;\n  initializationService: InitializationService;\n  fieldActionService: FieldActionService;\n  fileService: FileManagementService;\n  previewService: MappingPreviewService;\n  expressionService: MappingExpressionService;\n\n  sourceDocs: DocumentDefinition[] = [];\n  targetDocs: DocumentDefinition[] = [];\n  sourcePropertyDoc: DocumentDefinition = new DocumentDefinition();\n  targetPropertyDoc: DocumentDefinition = new DocumentDefinition();\n  constantDoc: DocumentDefinition = new DocumentDefinition();\n  mappingFiles: string[] = [];\n  mappingDefinitionId = 0;\n  mappings: MappingDefinition | null = null;\n\n  preloadedMappingJson: string | null = null;\n  preloadedFieldActionMetadata: any;\n  logger?: Logger;\n\n  constructor() {\n    this.setConstantPropertyDocs();\n  }\n\n  static getConfig(): ConfigModel {\n    return ConfigModel.cfg;\n  }\n\n  static setConfig(cfg: ConfigModel): void {\n    ConfigModel.cfg = cfg;\n  }\n\n  initializePropertyDoc(propertyDoc: DocumentDefinition, isSource: boolean) {\n    propertyDoc.clearFields();\n    propertyDoc.type = DocumentType.PROPERTY;\n    propertyDoc.name = DocumentDefaultName.PROPERTIES;\n    propertyDoc.id =\n      'DOC.' +\n      propertyDoc.name +\n      '.' +\n      Math.floor(Math.random() * 1000000 + 1).toString();\n    propertyDoc.isSource = isSource;\n    propertyDoc.showFields = false;\n    propertyDoc.isPropertyOrConstant = true;\n  }\n\n  setConstantPropertyDocs(): void {\n    this.initializePropertyDoc(this.sourcePropertyDoc, true);\n    this.initializePropertyDoc(this.targetPropertyDoc, false);\n    this.constantDoc.clearFields();\n    this.constantDoc.type = DocumentType.CONSTANT;\n    this.constantDoc.name = DocumentDefaultName.CONSTANTS;\n    this.constantDoc.id =\n      'DOC.' +\n      this.constantDoc.name +\n      '.' +\n      Math.floor(Math.random() * 1000000 + 1).toString();\n    this.constantDoc.isSource = true;\n    this.constantDoc.showFields = false;\n    this.constantDoc.isPropertyOrConstant = true;\n  }\n\n  set showMappingPreview(show: boolean) {\n    this._showMappingPreview = show;\n  }\n\n  get showMappingPreview(): boolean {\n    return this._showMappingPreview;\n  }\n\n  addDocument(docInitModel: DocumentInitializationModel): DocumentDefinition {\n    const docDef: DocumentDefinition = new DocumentDefinition();\n    docDef.initModel = docInitModel;\n    docDef.id = docInitModel.id;\n    docDef.type = docInitModel.type;\n    docDef.name = docInitModel.name;\n    docDef.description = docInitModel.description;\n    docDef.isSource = docInitModel.isSource;\n    docDef.showFields = docInitModel.showFields;\n    docDef.inspectionType = docInitModel.inspectionType;\n    docDef.inspectionSource = docInitModel.inspectionSource;\n    docDef.inspectionResult = docInitModel.inspectionResult;\n    docDef.inspectionParameters = docInitModel.inspectionParameters;\n    docDef.selectedRoot = docInitModel.selectedRoot;\n\n    if (docDef.type === DocumentType.XSD) {\n      docDef.uri = 'atlas:xml:' + docDef.id;\n    } else if (docDef.type === DocumentType.JAVA) {\n      docDef.uri = `atlas:java:${docDef.id}?className=${docDef.inspectionSource}`;\n      if (\n        docInitModel.collectionType &&\n        docInitModel.collectionType !== CollectionType.NONE\n      ) {\n        docDef.uri += '&collectionType=' + docInitModel.collectionType;\n        if (docInitModel.collectionClassName) {\n          docDef.uri +=\n            '&collectionClassName=' + docInitModel.collectionClassName;\n        }\n      }\n    } else {\n      docDef.uri = 'atlas:' + docDef.type.toLowerCase() + ':' + docDef.id;\n    }\n\n    if (docInitModel.isSource) {\n      this.sourceDocs.push(docDef);\n    } else {\n      this.targetDocs.push(docDef);\n    }\n    return docDef;\n  }\n\n  addDocuments(docModels: DocumentInitializationModel[]): DocumentDefinition[] {\n    const docDefs: DocumentDefinition[] = [];\n    for (const docModel of docModels) {\n      docDefs.push(this.addDocument(docModel));\n    }\n    return docDefs;\n  }\n\n  getDocsWithoutPropertyDoc(isSource: boolean): DocumentDefinition[] {\n    return isSource ? [...this.sourceDocs] : [...this.targetDocs];\n  }\n\n  getDocs(isSource: boolean): DocumentDefinition[] {\n    const docs: DocumentDefinition[] = this.getDocsWithoutPropertyDoc(isSource);\n    return isSource\n      ? [this.sourcePropertyDoc, this.constantDoc].concat(docs)\n      : [this.targetPropertyDoc].concat(docs);\n  }\n\n  /**\n   * Clear source/target/mapping documents from the model.  Reset constant and property document definitions.\n   */\n  clearDocs(): void {\n    this.sourceDocs = [];\n    this.targetDocs = [];\n    this.sourcePropertyDoc.clearFields();\n    this.targetPropertyDoc.clearFields();\n    this.constantDoc.clearFields();\n    this.mappingFiles = [];\n  }\n\n  hasJavaDocuments(): boolean {\n    for (const doc of this.getAllDocs()) {\n      if (doc.type === DocumentType.JAVA) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  getDocForIdentifier(\n    documentId: string,\n    isSource: boolean\n  ): DocumentDefinition | null {\n    // TODO: check this non null operator\n    return this.getDocs(isSource).find((d) => d.id === documentId)!;\n  }\n\n  getFirstXmlDoc(isSource: boolean): DocumentDefinition {\n    const docs: DocumentDefinition[] = this.getDocsWithoutPropertyDoc(isSource);\n    // TODO: check this non null operator\n    return docs.find((doc) => doc.type === DocumentType.XML)!;\n  }\n\n  getAllDocs(): DocumentDefinition[] {\n    return [this.sourcePropertyDoc, this.constantDoc]\n      .concat(this.sourceDocs)\n      .concat(this.targetPropertyDoc)\n      .concat(this.targetDocs);\n  }\n\n  documentsAreLoaded(): boolean {\n    for (const doc of this.getAllDocs()) {\n      if (!doc.initialized) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\nimport { MappedField, MappingModel } from './mapping.model';\n\nexport enum ErrorLevel {\n  DEBUG = 'DEBUG',\n  INFO = 'INFO',\n  WARN = 'WARN',\n  ERROR = 'ERROR',\n}\n\nexport enum ErrorScope {\n  APPLICATION = 'APPLICATION',\n  DATA_SOURCE = 'DATA_SOURCE',\n  LOOKUP_TABLE = 'LOOKUP_TABLE',\n  MAPPING = 'MAPPING',\n  FIELD = 'FIELD',\n  FORM = 'FORM',\n  CONSTANT = 'CONSTANT',\n  PROPERTY = 'PROPERTY',\n}\n\nexport enum ErrorType {\n  INTERNAL = 'INTERNAL',\n  USER = 'USER',\n  VALIDATION = 'VALIDATION',\n  PREVIEW = 'PREVIEW',\n  FORM = 'FORM',\n}\n\nexport class ErrorInfo {\n  private static errorIdentifierCounter = 0;\n  private _identifier: string;\n\n  message: string;\n  level: ErrorLevel;\n  scope: ErrorScope;\n  type: ErrorType;\n  mapping: MappingModel;\n  field: MappedField;\n  object: any;\n\n  constructor(init: Partial<ErrorInfo>) {\n    this._identifier = ErrorInfo.errorIdentifierCounter.toString();\n    ErrorInfo.errorIdentifierCounter++;\n    Object.assign(this, init);\n  }\n\n  get identifier() {\n    return this._identifier;\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\nexport class Examples {\n  static pom = `\n    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\n        <modelVersion>4.0.0</modelVersion>\n        <groupId>foo.bar</groupId>\n        <artifactId>test.model</artifactId>\n        <version>1.10.0</version>\n        <packaging>jar</packaging>\n        <name>Test :: Model</name>\n\n        <dependencies>\n            <dependency>\n                <groupId>com.fasterxml.jackson.core</groupId>\n                <artifactId>jackson-annotations</artifactId>\n                <version>2.8.5</version>\n            </dependency>\n            <dependency>\n                <groupId>com.fasterxml.jackson.core</groupId>\n                <artifactId>jackson-databind</artifactId>\n                <version>2.8.5</version>\n            </dependency>\n            <dependency>\n                <groupId>com.fasterxml.jackson.core</groupId>\n                <artifactId>jackson-core</artifactId>\n                <version>2.8.5</version>\n            </dependency>\n        </dependencies>\n    </project>\n  `;\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport { ErrorInfo, ErrorLevel, ErrorScope, ErrorType } from './error.model';\nimport { MappedField, MappingModel } from './mapping.model';\n\nimport { ConfigModel } from './config.model';\nimport { IExpressionNode } from '../contracts/expression';\nimport { Subject } from 'rxjs';\n\nexport class ExpressionUpdatedEvent {\n  constructor(public node?: ExpressionNode, public offset?: number) {}\n}\n\nexport abstract class ExpressionNode implements IExpressionNode {\n  protected static sequence = 0;\n  public readonly uuid: string;\n  public readonly str: string;\n\n  constructor(prefix: string) {\n    this.uuid = prefix + ExpressionNode.sequence++;\n  }\n\n  getUuid() {\n    return this.uuid;\n  }\n\n  abstract toText(): string;\n  abstract toHTML(): string;\n}\n\nexport class TextNode extends ExpressionNode {\n  static readonly PREFIX = 'expression-text-';\n\n  constructor(public str: string) {\n    super(TextNode.PREFIX);\n  }\n\n  toText(): string {\n    return this.str;\n  }\n\n  toHTML(): string {\n    return `<span id=\"${this.uuid}\">${this.str.replace(/ /g, '&nbsp;')}</span>`;\n  }\n}\n\nexport class FieldNode extends ExpressionNode {\n  static readonly PREFIX = 'expression-field-';\n\n  constructor(\n    private mapping: MappingModel,\n    public mappedField?: MappedField | null,\n    public metaStr?: string,\n    index: number = 0,\n    public collectionContextPath?: string\n  ) {\n    super(FieldNode.PREFIX);\n    if (!mappedField) {\n      if (metaStr) {\n        const fieldParts = metaStr.split(':');\n\n        // Relative paths will not have the full field path in the meta data.\n        if (fieldParts.length === 1) {\n          if (collectionContextPath) {\n            this.mappedField = mapping.getMappedFieldByPath(\n              collectionContextPath + fieldParts[0],\n              true\n            )!;\n          } else {\n            this.mappedField = mapping.getMappedFieldByPath(\n              fieldParts[0],\n              true\n            )!;\n          }\n        } else {\n          this.mappedField = mapping.getMappedFieldByPath(\n            fieldParts[1],\n            true,\n            fieldParts[0]\n          )!;\n        }\n        if (!this.mappedField) {\n          this.mappedField = mapping.getReferenceField(\n            fieldParts[0],\n            fieldParts[1]\n          );\n        }\n      } else {\n        this.mappedField = mapping.getMappedFieldForIndex(\n          (index + 1)?.toString(),\n          true\n        )!;\n      }\n      mappedField = this.mappedField;\n    }\n  }\n\n  toText(): string {\n    if (!this.mappedField || !this.mappedField.field) {\n      return '';\n    }\n    if (this.mappedField.field.enumeration) {\n      // Convert enumeration field/index pairs into a string literal.\n      const enumIdxVal = this.mappedField.field.enumIndexValue\n        ? this.mappedField.field.enumIndexValue\n        : 0;\n      return '\"' + this.mappedField.field.enumValues[enumIdxVal].name + '\"';\n    } else {\n      let textStr = '${';\n\n      // If the mapped field's parent is a complex reference field then only use the leaf.\n      if (\n        this.mappedField.field.parentField &&\n        this.mappedField.field.parentField ===\n          this.mapping.referenceFields[0]?.field\n      ) {\n        textStr += '/' + this.mappedField.field.name + '}';\n      } else {\n        textStr +=\n          this.mappedField.field.docDef.id +\n          ':' +\n          this.mappedField.field.path +\n          '}';\n      }\n      return textStr;\n    }\n  }\n\n  toHTML(): string {\n    if (this.mappedField && this.mappedField.field) {\n      let titleAddendum = '';\n      let mappedFieldName = this.mappedField.field.name;\n      if (this.mappedField.field.enumeration) {\n        const enumIdxVal = this.mappedField.field.enumIndexValue\n          ? this.mappedField.field.enumIndexValue\n          : 0;\n        mappedFieldName +=\n          '.' + this.mappedField.field.enumValues[enumIdxVal].name;\n        titleAddendum = ':  Click to select an enumeration value.';\n      }\n      return `<span style=\"font-weight:bold\" contenteditable=\"false\" id=\"${this.uuid}\" title=\"${this.mappedField.field.docDef.name}:${this.mappedField.field.path}${titleAddendum}\"\n        class=\"expressionFieldLabel label label-default\">${mappedFieldName}</span>`;\n    } else {\n      // TODO: check this non null operator\n      return `<span contenteditable=\"false\" id=\"${this.uuid}\"\n        title=\"Field index '${\n          this.mapping.getIndexForMappedField(this.mappedField!)! - 1\n        }' is not available\"\n        class=\"expressionFieldLabel label label-danger\">N/A</span>`;\n    }\n  }\n\n  hasComplexField(): boolean {\n    return (\n      this.mappedField?.field?.documentField.fieldType === 'COMPLEX' &&\n      (this.mappedField?.field?.documentField.status === 'SUPPORTED' ||\n        this.mappedField?.field?.documentField.status === 'CACHED')\n    );\n  }\n}\n\nexport class ExpressionModel {\n  expressionHTML = '';\n  expressionUpdatedSource = new Subject<ExpressionUpdatedEvent>();\n  expressionUpdated$ = this.expressionUpdatedSource.asObservable();\n\n  private _hasComplexField: boolean;\n  private _nodes: ExpressionNode[] = [];\n  private textCache = '';\n\n  constructor(private mapping: MappingModel, private cfg: ConfigModel) {}\n\n  generateInitialExpression() {\n    this.mapping\n      .getUserMappedFields(true)\n      .forEach((f) => this.appendFieldNode(f));\n  }\n\n  get hasComplexField(): boolean {\n    return this._hasComplexField;\n  }\n\n  set hasComplexField(value: boolean) {\n    this._hasComplexField = value;\n  }\n\n  get nodes(): ReadonlyArray<ExpressionNode> {\n    return this._nodes;\n  }\n\n  getLastNodeIndex() {\n    return this._nodes.length - 1;\n  }\n\n  getLastNode() {\n    return this._nodes[this.getLastNodeIndex()];\n  }\n\n  getNode(nodeId?: string): any {\n    if (!nodeId) {\n      return this.getLastNode();\n    }\n    return this._nodes.find((n) => n.getUuid() === nodeId);\n  }\n\n  setConfigModel(cfg: ConfigModel) {\n    this.cfg = cfg;\n  }\n\n  /**\n   * Clear all text from the specified TextNode offset range or from the '@' to\n   * the end of the text node if no node ID is specified.\n   *\n   * Return the new UUID position indicator string or null.\n   *\n   * @param nodeId\n   * @param startOffset\n   * @param endOffset\n   */\n  clearText(\n    nodeId?: string,\n    startOffset?: number,\n    endOffset?: number\n  ): TextNode | null {\n    let targetNode: TextNode | null = null;\n    if (!nodeId) {\n      const lastNode = this.getLastNode();\n      if (!(lastNode instanceof TextNode)) {\n        return null;\n      }\n      const keyPos = lastNode.str.indexOf('@');\n      if (keyPos !== -1) {\n        targetNode = lastNode;\n        targetNode.str = targetNode.str.substring(0, keyPos);\n      }\n    } else {\n      const node = this._nodes.find((n) => n.getUuid() === nodeId);\n      if (!(node instanceof TextNode) || !endOffset) {\n        return null;\n      }\n      targetNode = node;\n      // TODO: check this non null operator\n      const cleanStr = targetNode.str.replace(\n        targetNode.str.substring(startOffset!, endOffset),\n        ''\n      );\n      targetNode.str = cleanStr;\n    }\n    this.updateCache();\n    this.expressionUpdatedSource.next();\n    return targetNode;\n  }\n\n  /**\n   * Insert text into expression at specified position. If nodeId is not specified,\n   * it will be added to the end of expression. It parses the string\n   * and insert a set of TextNode & FieldNode if it contains field reference like ${0},\n   * otherwise just one TextNode.\n   * This emits ExpressionUpdatedEvent which contains the latest node and offset it\n   * worked on, so that the subscriber can determine where to put the caret in\n   * the expression input widget. If ExpressionUpdatedEvent is undefined, it means that\n   * it worked on the end of the expression.\n   * @param str string to insert\n   * @param nodeId target node to insert the string\n   * @param offset position offset in the target node to insert the string\n   */\n  insertText(str: string, nodeId?: string, offset?: number) {\n    this.insertNodes(this.createNodesFromText(str), nodeId, offset);\n  }\n\n  /**\n   * Insert an array of ExpressionNodes at the specified position. If insertPosition is\n   * not specified the nodes will be appended to the end of the expression.\n   * This emits an ExpressionUpdatedEvent which contains the latest node and offset it\n   * worked on, so that the subscriber can determine where to put the caret in\n   * the expression input widget. If ExpressionUpdatedEvent is undefined, it means that\n   * it worked on the end of the expression.\n   *\n   * @param newNodes an array of ExpressionNode to add\n   * @param insertPosition target node to insert the string\n   * @param offset position offset in the target node to insert the string\n   */\n  insertNodes(\n    newNodes: ExpressionNode[],\n    insertPosition?: string,\n    offset?: number\n  ) {\n    // No position was specified - append to the end\n    if (!insertPosition) {\n      const last = this.getLastNode();\n      if (!last) {\n        this._nodes.push(...newNodes);\n      } else if (last instanceof TextNode && newNodes[0] instanceof TextNode) {\n        (last as TextNode).str += (newNodes[0] as TextNode).str;\n        newNodes.splice(0, 1, last);\n        this._nodes.splice(this.getLastNodeIndex(), 1, ...newNodes);\n      } else if (\n        last instanceof FieldNode &&\n        newNodes[0] instanceof FieldNode\n      ) {\n        this._nodes.splice(\n          this.getLastNodeIndex(),\n          0,\n          new TextNode(' + '),\n          ...newNodes\n        );\n      } else {\n        this._nodes.push(...newNodes);\n      }\n      this.updateCache();\n      this.expressionUpdatedSource.next();\n      return;\n    }\n\n    // Requires position handling\n    const updatedEvent = new ExpressionUpdatedEvent();\n    const targetNode = this._nodes.find((n) => n.getUuid() === insertPosition);\n    // TODO: check this non null operator\n    const targetNodeIndex = this._nodes.indexOf(targetNode!);\n\n    if (targetNode instanceof TextNode) {\n      if (offset === undefined || offset === null || offset < 0) {\n        offset = targetNode.str.length;\n      }\n      const pre = targetNode.str.substring(0, offset);\n      const post = targetNode.str.substring(offset);\n      if (pre.length > 0) {\n        if (newNodes[0] instanceof TextNode) {\n          targetNode.str = pre + (newNodes[0] as TextNode).str;\n          newNodes.splice(0, 1, targetNode);\n        } else {\n          targetNode.str = pre;\n          newNodes.splice(0, 0, targetNode);\n        }\n      }\n      if (post.length > 0) {\n        const lastNewNodeIndex = newNodes.length - 1;\n        if (newNodes[lastNewNodeIndex] instanceof TextNode) {\n          let mergedTextNode: TextNode;\n          if (pre.length > 0) {\n            mergedTextNode = newNodes[lastNewNodeIndex] as TextNode;\n            mergedTextNode.str += post;\n          } else {\n            mergedTextNode = targetNode;\n            mergedTextNode.str =\n              (newNodes[lastNewNodeIndex] as TextNode).str + post;\n          }\n          newNodes.splice(lastNewNodeIndex, 1, mergedTextNode);\n        } else {\n          if (pre.length > 0) {\n            newNodes.push(new TextNode(post));\n          } else {\n            targetNode.str = post;\n            newNodes.push(targetNode);\n          }\n        }\n      }\n      this._nodes.splice(targetNodeIndex, 1, ...newNodes);\n      const lastAddedIndex = targetNodeIndex + newNodes.length - 1;\n      if (\n        this._nodes[lastAddedIndex] instanceof FieldNode &&\n        this.nodes[lastAddedIndex + 1] instanceof FieldNode\n      ) {\n        // insert a glue in between FieldNodes so that it won't break syntax and caret can go into\n        const space = new TextNode(' + ');\n        this._nodes.splice(lastAddedIndex + 1, 0, space);\n        updatedEvent.node = space;\n        updatedEvent.offset = 1;\n      } else if (this._nodes[lastAddedIndex] instanceof FieldNode) {\n        updatedEvent.node = this._nodes[lastAddedIndex + 1];\n        updatedEvent.offset = 0;\n      } else {\n        updatedEvent.node = this._nodes[lastAddedIndex];\n        updatedEvent.offset =\n          (this._nodes[lastAddedIndex] as TextNode).str.length - post.length;\n      }\n      this.updateCache();\n      this.expressionUpdatedSource.next(updatedEvent);\n      return;\n    }\n\n    // targetNode is a FieldNode - insert the text before it if offset is 0, otherwise after it\n    if (offset !== 0 && newNodes[0] instanceof FieldNode) {\n      // insert a glue in between FieldNodes so that it won't break syntax and caret can go into\n      newNodes.splice(0, 0, new TextNode(' + '));\n    }\n    const nextNodeIndex = offset === 0 ? targetNodeIndex : targetNodeIndex + 1;\n    const nextNode = this._nodes[nextNodeIndex];\n    if (\n      nextNode instanceof TextNode &&\n      newNodes[newNodes.length - 1] instanceof TextNode\n    ) {\n      updatedEvent.offset = (\n        newNodes[newNodes.length - 1] as TextNode\n      ).str.length;\n      nextNode.str =\n        (newNodes[newNodes.length - 1] as TextNode).str +\n        (nextNode as TextNode).str;\n      newNodes.pop();\n      this._nodes.splice(nextNodeIndex, 1, ...newNodes);\n      updatedEvent.node = nextNode;\n    } else if (\n      nextNode instanceof FieldNode &&\n      newNodes[newNodes.length - 1] instanceof FieldNode\n    ) {\n      // insert a glue in between FieldNodes so that it won't break syntax and caret can go into\n      const space = new TextNode(' + ');\n      this._nodes.splice(nextNodeIndex, 0, ...newNodes, space);\n      updatedEvent.node = space;\n      updatedEvent.offset = 1;\n    } else {\n      this._nodes.splice(nextNodeIndex, 0, ...newNodes);\n      if (nextNode instanceof TextNode) {\n        updatedEvent.node = nextNode;\n        updatedEvent.offset = 0;\n      } else {\n        updatedEvent.node = newNodes[newNodes.length - 1];\n        updatedEvent.offset = (\n          newNodes[newNodes.length - 1] as TextNode\n        ).str.length;\n      }\n    }\n    this.updateCache();\n    this.expressionUpdatedSource.next(updatedEvent);\n  }\n\n  removeToken(tokenPosition?: string, offset?: number, removeNext?: boolean) {\n    // No position was specified - remove from the end\n    if (!tokenPosition) {\n      const last = this.getLastNode();\n      if (!last) {\n        return;\n      }\n      if (last instanceof FieldNode) {\n        const removed = this._nodes.pop() as FieldNode;\n        if (\n          !this._nodes.find(\n            (n) =>\n              n instanceof FieldNode && n.mappedField === removed.mappedField\n          )\n        ) {\n          // TODO: check this non null operator\n          this.mapping.removeField(removed.mappedField!.field!);\n          this.cfg.mappingService.updateMappedField(this.mapping);\n        }\n      } else if (last instanceof TextNode) {\n        if (last.str.length > 0) {\n          last.str = last.str.substring(0, last.str.length - 1);\n        }\n        if (last.str.length === 0) {\n          this._nodes.pop();\n        }\n      }\n      this.updateCache();\n      this.expressionUpdatedSource.next();\n      return;\n    }\n\n    // Requires position handling\n    let updatedEvent: ExpressionUpdatedEvent | undefined =\n      new ExpressionUpdatedEvent();\n    let targetNode = this._nodes.find((n) => n.getUuid() === tokenPosition);\n    // TODO: check this non null operator\n    let targetNodeIndex = this._nodes.indexOf(targetNode!);\n    if (removeNext) {\n      targetNodeIndex++;\n      targetNode = this._nodes[targetNodeIndex];\n    }\n    if (!targetNode || offset === -1) {\n      if (targetNodeIndex < 1) {\n        return;\n      }\n      targetNode = this._nodes[--targetNodeIndex];\n      offset =\n        targetNode instanceof TextNode\n          ? (targetNode as TextNode).str.length\n          : 1;\n    }\n    if (targetNode instanceof FieldNode) {\n      const removed = this._nodes.splice(targetNodeIndex, 1);\n      const targetFieldNode: FieldNode = removed[0] as FieldNode;\n      if (\n        !this._nodes.find(\n          (n) =>\n            n instanceof FieldNode &&\n            n.mappedField === targetFieldNode.mappedField\n        )\n      ) {\n        // TODO: check this non null operator\n        this.mapping.removeField(targetFieldNode.mappedField!.field!);\n        this.cfg.mappingService.updateMappedField(this.mapping);\n      }\n      if (this._nodes.length > targetNodeIndex) {\n        if (\n          this._nodes[targetNodeIndex - 1] instanceof TextNode &&\n          this._nodes[targetNodeIndex] instanceof TextNode\n        ) {\n          const newOffset = (this._nodes[targetNodeIndex - 1] as TextNode).str\n            .length;\n          (this._nodes[targetNodeIndex - 1] as TextNode).str += (\n            this._nodes[targetNodeIndex] as TextNode\n          ).str;\n          this._nodes.splice(targetNodeIndex, 1);\n          updatedEvent.node = this._nodes[targetNodeIndex - 1];\n          updatedEvent.offset = newOffset;\n        } else if (\n          this._nodes[targetNodeIndex - 1] instanceof FieldNode &&\n          this._nodes[targetNodeIndex] instanceof FieldNode\n        ) {\n          const glue = new TextNode(' + ');\n          this._nodes.splice(targetNodeIndex, 0, glue);\n          updatedEvent.node = glue;\n          updatedEvent.offset = 3;\n        } else if (this._nodes[targetNodeIndex - 1] instanceof TextNode) {\n          updatedEvent.node = this._nodes[targetNodeIndex - 1];\n          updatedEvent.offset = (\n            this._nodes[targetNodeIndex - 1] as TextNode\n          ).str.length;\n        } else if (this._nodes[targetNodeIndex] instanceof TextNode) {\n          updatedEvent.node = this._nodes[targetNodeIndex];\n          updatedEvent.offset = 0;\n        }\n      } else {\n        // end of line\n        updatedEvent = undefined;\n      }\n    } else {\n      const targetString = (targetNode as TextNode).str;\n\n      // Remove empty string text node.\n      if (targetString.length === 1) {\n        this._nodes.splice(targetNodeIndex, 1);\n      } else {\n        (targetNode as TextNode).str =\n          offset === 0\n            ? targetString.substr(1)\n            : targetString.substring(0, offset) +\n              targetString.substring(offset! + 1);\n        updatedEvent.node = targetNode;\n        updatedEvent.offset = offset;\n      }\n    }\n    this.updateCache();\n    this.expressionUpdatedSource.next(updatedEvent);\n  }\n\n  /**\n   * Replace the content of the last text node with a substring terminating at the\n   * specified index.\n   *\n   * @param index\n   */\n  clearToEnd(index: number): void {\n    const last = this.getLastNode();\n    if (!(last instanceof TextNode)) {\n      return;\n    }\n    last.str = last.str.substring(0, index);\n  }\n\n  /**\n   * Reflect mapped source fields to the field references in the expression.\n   * Selected source fields are inserted into or appended to the expression,\n   * and unselected source fields are removed from expression.\n   *\n   * @param mapping Corresponding MappingModel object\n   * @param insertPosition\n   * @param offset\n   */\n  updateFieldReference(\n    mapping: MappingModel,\n    insertPosition?: string,\n    offset?: number\n  ) {\n    const mappedFields = mapping.getUserMappedFields(true);\n    const referenceFields = mapping.getReferenceMappedFields();\n    let fieldNodes = this._nodes.filter(\n      (n) => n instanceof FieldNode\n    ) as FieldNode[];\n\n    // Remove non-reference fields from the expression if unmapped.\n    for (const node of fieldNodes) {\n      // TODO: check this non null operator\n      if (\n        mappedFields.includes(node.mappedField!) ||\n        referenceFields.includes(node.mappedField!) ||\n        node.hasComplexField()\n      ) {\n        continue;\n      }\n      const index = this._nodes.indexOf(node);\n      this._nodes.splice(index, 1);\n      if (\n        this._nodes.length > index &&\n        this._nodes[index - 1] instanceof TextNode &&\n        this._nodes[index] instanceof TextNode\n      ) {\n        (this._nodes[index - 1] as TextNode).str += (\n          this._nodes[index] as TextNode\n        ).str;\n        this._nodes.splice(index, 1);\n      }\n    }\n\n    // Add any non-reference mapped fields into the expression - append if no insert\n    // position is specified.\n    fieldNodes = this._nodes.filter(\n      (n) => n instanceof FieldNode\n    ) as FieldNode[];\n    for (const mfield of mappedFields) {\n      if (\n        !fieldNodes.find((n) => n.mappedField === mfield) &&\n        !referenceFields.find((r) => r.field === mfield.field)\n      ) {\n        if (insertPosition) {\n          this.insertNodes(\n            [new FieldNode(this.mapping, mfield)],\n            insertPosition,\n            offset\n          );\n        } else {\n          this.appendFieldNode(mfield);\n        }\n      }\n    }\n    this.updateCache();\n    this.expressionUpdatedSource.next();\n  }\n\n  clear() {\n    this._nodes = [];\n    this.updateCache();\n    this.expressionUpdatedSource.next();\n  }\n\n  toText() {\n    if (this.textCache.length === 0) {\n      this.updateCache();\n    }\n    return this.textCache;\n  }\n\n  toHTML() {\n    if (this.expressionHTML.length === 0) {\n      this.updateCache();\n    }\n    return this.expressionHTML;\n  }\n\n  addConditionalExpressionNode(\n    mappedField: MappedField,\n    nodeId: string,\n    offset: number\n  ): void {\n    this.insertNodes(\n      [new FieldNode(this.mapping, mappedField)],\n      nodeId,\n      offset\n    );\n  }\n\n  private updateCache() {\n    let answer = '';\n    this._nodes.forEach((node) => (answer += node.toText()));\n    this.textCache = answer;\n    answer = '';\n    this._nodes.forEach((node) => (answer += node.toHTML()));\n    this.expressionHTML = answer; // trigger expr box render\n  }\n\n  /**\n   * Translate an expression string into an array of text nodes and field nodes.  Handle\n   * relative paths for collection-based field references.\n   *\n   * @param text\n   */\n  private createNodesFromText(text: string): ExpressionNode[] {\n    const answer = [];\n    let position = -1;\n    let collectionContextFieldNode = null;\n\n    while (text.search(/\\$\\{[a-zA-Z0-9.:/<>[\\]_-]+\\}/) !== -1) {\n      position = text.search(/\\$/);\n      if (position !== 0) {\n        answer.push(new TextNode(text.substring(0, position)));\n      }\n      const nodeMetaVal = text.substring(position + 2, text.indexOf('}'));\n      let fn = null;\n      if (isNaN(Number(nodeMetaVal))) {\n        fn = collectionContextFieldNode\n          ? new FieldNode(\n              this.mapping,\n              undefined,\n              nodeMetaVal,\n              undefined,\n              collectionContextFieldNode.mappedField?.field?.path!\n            )\n          : new FieldNode(this.mapping, undefined, nodeMetaVal);\n      } else {\n        const index = parseInt(nodeMetaVal, 10);\n        fn = new FieldNode(this.mapping, undefined, undefined, index);\n      }\n\n      if (!fn || !fn.mappedField) {\n        this.cfg.errorService.addError(\n          new ErrorInfo({\n            message: `Unable to map expression element '${nodeMetaVal}' to a field node.`,\n            level: ErrorLevel.ERROR,\n            scope: ErrorScope.MAPPING,\n            type: ErrorType.INTERNAL,\n            mapping: this.mapping,\n          })\n        );\n      } else {\n        if (fn.mappedField?.field?.isCollection) {\n          collectionContextFieldNode = fn;\n        }\n        answer.push(fn);\n      }\n      text = text.substring(text.indexOf('}') + 1);\n    }\n    if (text.length > 0) {\n      answer.push(new TextNode(text));\n    }\n    return answer;\n  }\n\n  private appendFieldNode(mfield: MappedField) {\n    const lastNode = this._nodes.pop();\n    if (lastNode instanceof FieldNode) {\n      this._nodes.push(lastNode, new TextNode(' + '));\n    } else if (lastNode instanceof TextNode) {\n      if (lastNode.str.length === 0) {\n        this._nodes.push(new TextNode(' + '));\n      } else {\n        this._nodes.push(lastNode);\n      }\n    }\n    this._nodes.push(new FieldNode(this.mapping, mfield));\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\nimport { FieldType } from '../contracts';\nimport { Multiplicity } from '../contracts/field-action';\n\nexport class FieldActionArgument {\n  name: string;\n  type = FieldType.STRING;\n  values: string[] | null = null;\n  serviceObject: any = {};\n}\n\nexport class FieldActionArgumentValue {\n  label: string;\n  name: string;\n  value: string;\n}\n\nexport class FieldActionDefinition {\n  name: string;\n  isCustom: boolean;\n  arguments: FieldActionArgument[] = [];\n  method: string;\n  sourceType = FieldType.NONE;\n  targetType = FieldType.NONE;\n  multiplicity = Multiplicity.ONE_TO_ONE;\n  serviceObject: any = {};\n\n  populateFieldAction(action: FieldAction): void {\n    action.name = this.name;\n    action.definition = this;\n\n    // Use the parsed values if present, otherwise set to '0'.\n    if (action.argumentValues == null || action.argumentValues.length === 0) {\n      action.argumentValues = [];\n      for (const arg of this.arguments) {\n        // Default the input field to 0 for numerics\n        if (\n          [\n            'LONG',\n            'INTEGER',\n            'FLOAT',\n            'DOUBLE',\n            'SHORT',\n            'BYTE',\n            'DECIMAL',\n            'NUMBER',\n          ].indexOf(arg.type.toUpperCase()) !== -1\n        ) {\n          action.setArgumentValue(arg.name!, '0'); // TODO: check this non null operator\n        } else {\n          action.setArgumentValue(arg.name!, ''); // TODO: check this non null operator\n        }\n      }\n    }\n  }\n\n  getArgumentForName(name: string): FieldActionArgument {\n    // TODO: check this non null operator\n    return this.arguments.find((argument) => argument.name === name)!;\n  }\n}\n\nexport class FieldAction {\n  name: string;\n  definition: FieldActionDefinition | null;\n  argumentValues: FieldActionArgumentValue[] = [];\n\n  static create(definition: FieldActionDefinition): FieldAction {\n    const instance = new FieldAction();\n    instance.definition = definition;\n    instance.name = definition?.name;\n    return instance;\n  }\n\n  getArgumentValue(argumentName: string): FieldActionArgumentValue {\n    for (const argValue of this.argumentValues) {\n      if (argValue.name === argumentName) {\n        return argValue;\n      }\n    }\n    const newArgValue: FieldActionArgumentValue =\n      new FieldActionArgumentValue();\n    newArgValue.name = argumentName;\n    newArgValue.value = '0';\n    this.argumentValues.push(newArgValue);\n    return newArgValue;\n  }\n\n  setArgumentValue(argumentName: string, value: string): void {\n    this.getArgumentValue(argumentName).value = value;\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport { ErrorInfo, ErrorLevel, ErrorScope, ErrorType } from '../error.model';\nimport { Input, Options } from 'ky';\n\nimport { ConfigModel } from '../config.model';\nimport { DocumentDefinition } from '../document-definition.model';\nimport { Field } from '../field.model';\nimport { IField } from '../../contracts/common';\n\n/**\n * Encapsulates Document inspection context.\n */\nexport abstract class DocumentInspectionModel {\n  request: DocumentInspectionRequestModel;\n\n  constructor(public cfg: ConfigModel, public doc: DocumentDefinition) {}\n\n  /**\n   * Validates if the online inspection is available for this type of Document.\n   */\n  abstract isOnlineInspectionCapable(): boolean;\n\n  /**\n   * Parse inspection response returned from backend.\n   *\n   * @param responseJson\n   */\n  abstract parseResponse(responseJson: any): void;\n\n  protected parseFieldFromDocument(\n    field: IField,\n    parentField: Field | null\n  ): Field | null {\n    if (field != null && field.status === 'NOT_FOUND') {\n      this.cfg.errorService.addError(\n        new ErrorInfo({\n          message: `Ignoring unknown field: ${field.name} (${field.path}), document: ${this.doc.name}`,\n          level: ErrorLevel.WARN,\n          scope: ErrorScope.APPLICATION,\n          type: ErrorType.USER,\n        })\n      );\n      return null;\n    } else if (field != null && field.status === 'EXCLUDED') {\n      return null;\n    }\n\n    const parsedField: Field = new Field();\n    parsedField.name = field.name!;\n    parsedField.type = field.fieldType!;\n    parsedField.path = field.path!;\n    parsedField.isPrimitive = field.fieldType !== 'COMPLEX';\n    parsedField.documentField = field;\n\n    if ('LIST' === field.collectionType || 'ARRAY' === field.collectionType) {\n      parsedField.isCollection = true;\n      if ('ARRAY' === field.collectionType) {\n        parsedField.isArray = true;\n      }\n    }\n\n    if (parentField != null) {\n      parsedField.parentField = parentField;\n      parentField.children.push(parsedField);\n    } else {\n      this.doc.fields.push(parsedField);\n    }\n\n    return parsedField;\n  }\n}\n\nexport abstract class DocumentInspectionRequestModel {\n  constructor(protected cfg: ConfigModel, protected doc: DocumentDefinition) {}\n  url: Input;\n  options: DocumentInspectionRequestOptions;\n}\n\nexport abstract class DocumentInspectionRequestOptions implements Options {\n  constructor(protected cfg: ConfigModel, protected doc: DocumentDefinition) {}\n  json: any;\n  headers: { [key: string]: string } = { 'Content-Type': 'application/json' };\n  searchParams: { [key: string]: string } = {};\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport {\n  DocumentInspectionModel,\n  DocumentInspectionRequestModel,\n  DocumentInspectionRequestOptions,\n} from './document-inspection.model';\nimport { ErrorInfo, ErrorLevel, ErrorScope, ErrorType } from '../error.model';\nimport { FieldType, IDocument } from '../../contracts/common';\nimport {\n  ICsvComplexType,\n  ICsvDocumentContainer,\n  ICsvField,\n  ICsvInspectionResponse,\n  ICsvInspectionResponseContainer,\n} from '../../contracts/documents/csv';\n\nimport { Field } from '../field.model';\n\nexport class CsvInspectionModel extends DocumentInspectionModel {\n  request = new CsvInspectionRequestModel(this.cfg, this.doc);\n\n  isOnlineInspectionCapable(): boolean {\n    if (this.cfg.initCfg.baseCSVInspectionServiceUrl == null) {\n      this.cfg.errorService.addError(\n        new ErrorInfo({\n          message: `CSV inspection service is not configured. Document will not be loaded: ${this.doc.name}`,\n          level: ErrorLevel.WARN,\n          scope: ErrorScope.APPLICATION,\n          type: ErrorType.INTERNAL,\n          object: this.doc,\n        })\n      );\n      return false;\n    }\n    return true;\n  }\n\n  parseResponse(responseJson: any): void {\n    if (typeof responseJson.CsvInspectionResponse !== 'undefined') {\n      this.extractCSVDocumentDefinitionFromInspectionResponse(\n        (responseJson as ICsvInspectionResponseContainer).CsvInspectionResponse\n      );\n    } else if (typeof responseJson.CsvDocument !== 'undefined') {\n      this.extractCSVDocumentDefinition(\n        (responseJson as ICsvDocumentContainer).CsvDocument\n      );\n    } else {\n      throw new Error(`Unknown CSV inspection result format: ${responseJson}`);\n    }\n  }\n\n  private extractCSVDocumentDefinitionFromInspectionResponse(\n    body: ICsvInspectionResponse\n  ): void {\n    if (body.errorMessage) {\n      this.doc.errorOccurred = true;\n      throw new Error(\n        `Could not load JSON document, error: ${body.errorMessage}`\n      );\n    }\n\n    this.extractCSVDocumentDefinition(body.csvDocument);\n  }\n\n  private extractCSVDocumentDefinition(csvDocument: IDocument): void {\n    if (!this.doc.description) {\n      this.doc.description = this.doc.id;\n    }\n    if (!this.doc.name) {\n      this.doc.name = this.doc.id;\n    }\n    if (this.doc.inspectionParameters) {\n      const params = new URLSearchParams(this.doc.inspectionParameters);\n      this.doc.uri = this.doc.uri + '?' + params;\n    }\n\n    for (const field of csvDocument.fields.field) {\n      this.parseCSVFieldFromDocument(field as ICsvField, null);\n    }\n  }\n\n  private parseCSVFieldFromDocument(\n    field: ICsvField,\n    parentField: Field | null\n  ): void {\n    const parsedField = this.parseFieldFromDocument(field, parentField);\n    if (parsedField == null) {\n      return;\n    }\n    parsedField.column = field.column;\n    if (field.fieldType !== FieldType.COMPLEX) {\n      return;\n    }\n    const csvComplexType = field as ICsvComplexType;\n    if (csvComplexType.csvFields?.csvField?.length) {\n      for (const childField of csvComplexType.csvFields.csvField) {\n        this.parseCSVFieldFromDocument(childField, parsedField);\n      }\n    }\n  }\n}\n\nexport class CsvInspectionRequestModel extends DocumentInspectionRequestModel {\n  url = this.cfg.initCfg.baseCSVInspectionServiceUrl + 'inspect';\n  options = new CsvInspectionRequestOptions(this.cfg, this.doc);\n}\n\nexport class CsvInspectionRequestOptions extends DocumentInspectionRequestOptions {\n  body = this.doc.inspectionSource;\n  searchParams: { [key: string]: string } = this.doc.inspectionParameters;\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport { CollectionType, FieldType } from '../../contracts/common';\nimport {\n  DocumentInspectionModel,\n  DocumentInspectionRequestModel,\n  DocumentInspectionRequestOptions,\n} from './document-inspection.model';\nimport { EnumValue, Field } from '../field.model';\nimport { ErrorInfo, ErrorLevel, ErrorScope, ErrorType } from '../error.model';\nimport {\n  IClassInspectionRequestContainer,\n  IClassInspectionResponseContainer,\n  IJavaClass,\n  IJavaClassContainer,\n  IJavaField,\n  JAVA_INSPECTION_REQUEST_JSON_TYPE,\n} from '../../contracts/documents/java';\n\nimport { ConfigModel } from '../config.model';\nimport { DocumentDefinition } from '../document-definition.model';\n\n/**\n * Encapsulates Java class inspection context.\n */\nexport class JavaInspectionModel extends DocumentInspectionModel {\n  request = new JavaInspectionRequestModel(this.cfg, this.doc);\n\n  isOnlineInspectionCapable(): boolean {\n    if (this.cfg.initCfg.baseJavaInspectionServiceUrl == null) {\n      this.cfg.errorService.addError(\n        new ErrorInfo({\n          message: `Java inspection service is not configured. Document will not be loaded: ${this.doc.name}`,\n          level: ErrorLevel.WARN,\n          scope: ErrorScope.APPLICATION,\n          type: ErrorType.INTERNAL,\n          object: this.doc,\n        })\n      );\n      return false;\n    }\n    return true;\n  }\n\n  parseResponse(responseJson: any): void {\n    let javaClass: IJavaClass;\n    if (responseJson.ClassInspectionResponse) {\n      if (responseJson.errorMessage) {\n        this.doc.errorOccurred = true;\n        throw new Error(\n          `Could not load JSON document, error: ${responseJson.errorMessage}`\n        );\n      }\n      javaClass = (responseJson as IClassInspectionResponseContainer)\n        .ClassInspectionResponse.javaClass;\n    } else {\n      javaClass = (responseJson as IJavaClassContainer).JavaClass;\n    }\n    const docIdentifier: string = this.doc.id;\n    if (!javaClass || javaClass.status === 'NOT_FOUND') {\n      this.doc.errorOccurred = true;\n      throw new Error(\n        `Could not load JAVA document. Document is not found: ${docIdentifier}`\n      );\n    }\n\n    if (!this.doc.description) {\n      this.doc.description = javaClass.className;\n    }\n    if (!this.doc.name) {\n      this.doc.name = javaClass.className!;\n      // Make doc name the class name rather than fully qualified name\n      if (this.doc.name && this.doc.name.indexOf('.') !== -1) {\n        this.doc.name = this.doc.name.substr(\n          this.doc.name.lastIndexOf('.') + 1\n        );\n      }\n    }\n    if (javaClass.uri && (!this.doc.uri || this.doc.uri.length === 0)) {\n      this.doc.uri = javaClass.uri;\n    }\n\n    let rootField = null;\n    if (\n      javaClass.collectionType &&\n      javaClass.collectionType !== CollectionType.NONE.valueOf()\n    ) {\n      this.parseJavaFieldFromDocument(javaClass, null);\n      rootField = this.doc.fields[0];\n    }\n    for (const field of javaClass.javaFields.javaField) {\n      this.parseJavaFieldFromDocument(field, rootField);\n    }\n  }\n\n  private parseJavaFieldFromDocument(\n    field: IJavaField,\n    parentField: Field | null\n  ): void {\n    const parsedField = this.parseFieldFromDocument(field, parentField);\n    if (parsedField == null) {\n      return;\n    }\n\n    if (field.className) {\n      parsedField.classIdentifier = field.className;\n    }\n\n    if (field.fieldType !== FieldType.COMPLEX) {\n      return;\n    }\n\n    const javaClass = field as IJavaClass;\n    parsedField.enumeration = javaClass.enumeration;\n    if (javaClass.enumeration && javaClass.javaEnumFields?.javaEnumField) {\n      for (const enumValue of javaClass.javaEnumFields.javaEnumField) {\n        const parsedEnumValue: EnumValue = new EnumValue();\n        parsedEnumValue.name = enumValue.name;\n        parsedEnumValue.ordinal = enumValue.ordinal;\n        parsedField.enumValues.push(parsedEnumValue);\n      }\n    }\n\n    if (javaClass.javaFields?.javaField?.length) {\n      for (const childField of javaClass.javaFields.javaField) {\n        this.parseJavaFieldFromDocument(childField, parsedField);\n      }\n    }\n  }\n}\n\nexport class JavaInspectionRequestModel extends DocumentInspectionRequestModel {\n  url = this.cfg.initCfg.baseJavaInspectionServiceUrl + 'class';\n  options = new JavaInspectionRequestOptions(this.cfg, this.doc);\n}\n\nexport class JavaInspectionRequestOptions extends DocumentInspectionRequestOptions {\n  constructor(protected cfg: ConfigModel, protected doc: DocumentDefinition) {\n    super(cfg, doc);\n    const request: IClassInspectionRequestContainer = {\n      ClassInspectionRequest: {\n        jsonType: JAVA_INSPECTION_REQUEST_JSON_TYPE,\n        className: this.doc.inspectionSource,\n        disablePrivateOnlyFields: this.cfg.initCfg.disablePrivateOnlyFields,\n        disableProtectedOnlyFields: this.cfg.initCfg.disableProtectedOnlyFields,\n        disablePublicOnlyFields: this.cfg.initCfg.disablePublicOnlyFields,\n        disablePublicGetterSetterFields:\n          this.cfg.initCfg.disablePublicGetterSetterFields,\n      },\n    };\n    this.json = request;\n    if (\n      this.doc.initModel.collectionType &&\n      (this.doc.initModel.collectionType as CollectionType) !==\n        CollectionType.NONE\n    ) {\n      request.ClassInspectionRequest.collectionType =\n        this.doc.initModel.collectionType;\n      if (this.doc.initModel.collectionClassName) {\n        request.ClassInspectionRequest.collectionClassName =\n          this.doc.initModel.collectionClassName;\n      }\n    }\n    if (\n      this.cfg.initCfg.fieldNameExclusions &&\n      this.cfg.initCfg.fieldNameExclusions.length\n    ) {\n      request.ClassInspectionRequest.fieldNameExclusions = {\n        string: this.cfg.initCfg.fieldNameExclusions,\n      };\n    }\n    if (\n      this.cfg.initCfg.classNameExclusions &&\n      this.cfg.initCfg.classNameExclusions.length\n    ) {\n      request.ClassInspectionRequest.classNameExclusions = {\n        string: this.cfg.initCfg.classNameExclusions,\n      };\n    }\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport {\n  DocumentInspectionModel,\n  DocumentInspectionRequestModel,\n  DocumentInspectionRequestOptions,\n} from './document-inspection.model';\nimport { EnumValue, Field } from '../field.model';\nimport { ErrorInfo, ErrorLevel, ErrorScope, ErrorType } from '../error.model';\nimport {\n  IJsonComplexType,\n  IJsonDocument,\n  IJsonDocumentContainer,\n  IJsonField,\n  IJsonInspectionResponse,\n  IJsonInspectionResponseContainer,\n  JSON_INSPECTION_REQUEST_JSON_TYPE,\n} from '../../contracts/documents/json';\nimport { FieldType } from '../../contracts/common';\n\n/**\n * Encapsulates JSON inspection context.\n */\nexport class JsonInspectionModel extends DocumentInspectionModel {\n  request = new JsonInspectionRequestModel(this.cfg, this.doc);\n\n  isOnlineInspectionCapable(): boolean {\n    if (this.cfg.initCfg.baseJSONInspectionServiceUrl == null) {\n      this.cfg.errorService.addError(\n        new ErrorInfo({\n          message: `JSON inspection service is not configured. Document will not be loaded: ${this.doc.name}`,\n          level: ErrorLevel.WARN,\n          scope: ErrorScope.APPLICATION,\n          type: ErrorType.INTERNAL,\n          object: this.doc,\n        })\n      );\n      return false;\n    }\n    return true;\n  }\n\n  parseResponse(responseJson: any): void {\n    if (typeof responseJson.JsonInspectionResponse !== 'undefined') {\n      this.extractJSONDocumentDefinitionFromInspectionResponse(\n        (responseJson as IJsonInspectionResponseContainer)\n          .JsonInspectionResponse\n      );\n    } else if (typeof responseJson.JsonDocument !== 'undefined') {\n      this.extractJSONDocumentDefinition(\n        (responseJson as IJsonDocumentContainer).JsonDocument\n      );\n    } else {\n      throw new Error(`Unknown JSON inspection result format: ${responseJson}`);\n    }\n  }\n\n  private extractJSONDocumentDefinitionFromInspectionResponse(\n    body: IJsonInspectionResponse\n  ): void {\n    if (body.errorMessage) {\n      this.doc.errorOccurred = true;\n      throw new Error(\n        `Could not load JSON document, error: ${body.errorMessage}`\n      );\n    }\n\n    this.extractJSONDocumentDefinition(body.jsonDocument);\n  }\n\n  private extractJSONDocumentDefinition(jsonDocument: IJsonDocument): void {\n    if (!this.doc.description) {\n      this.doc.description = this.doc.id;\n    }\n    if (!this.doc.name) {\n      this.doc.name = this.doc.id;\n    }\n\n    for (const field of jsonDocument.fields.field) {\n      this.parseJSONFieldFromDocument(field as IJsonField, null);\n    }\n  }\n\n  private parseJSONFieldFromDocument(\n    field: IJsonField,\n    parentField: Field | null\n  ): void {\n    const parsedField = this.parseFieldFromDocument(field, parentField);\n    if (parsedField == null) {\n      return;\n    }\n    if (field.fieldType !== FieldType.COMPLEX) {\n      return;\n    }\n    const complex = field as IJsonComplexType;\n    parsedField.enumeration = complex.enumeration;\n    /** FIXME enumIndexValue doesn't exist on JsonField/JsonComplexType\n    parsedField.enumIndexValue = complex.enumIndexValue\n      ? complex.enumIndexValue\n      : 0;\n    */\n    if (parsedField.enumeration && complex.jsonEnumFields?.jsonEnumField) {\n      for (const enumValue of complex.jsonEnumFields.jsonEnumField) {\n        const parsedEnumValue: EnumValue = new EnumValue();\n        parsedEnumValue.name = enumValue.name!;\n        parsedEnumValue.ordinal = enumValue.ordinal;\n        parsedField.enumValues.push(parsedEnumValue);\n      }\n    }\n    if (complex.jsonFields?.jsonField.length) {\n      for (const childField of complex.jsonFields.jsonField) {\n        this.parseJSONFieldFromDocument(childField, parsedField);\n      }\n    }\n  }\n}\n\nexport class JsonInspectionRequestModel extends DocumentInspectionRequestModel {\n  url = this.cfg.initCfg.baseJSONInspectionServiceUrl + 'inspect';\n  options = new JsonInspectionRequestOptions(this.cfg, this.doc);\n}\n\nexport class JsonInspectionRequestOptions extends DocumentInspectionRequestOptions {\n  json = {\n    JsonInspectionRequest: {\n      jsonType: JSON_INSPECTION_REQUEST_JSON_TYPE,\n      type: this.doc.inspectionType,\n      jsonData: this.doc.inspectionSource,\n    },\n  };\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport {\n  DocumentInspectionModel,\n  DocumentInspectionRequestModel,\n  DocumentInspectionRequestOptions,\n} from './document-inspection.model';\nimport { EnumValue, Field } from '../field.model';\nimport { ErrorInfo, ErrorLevel, ErrorScope, ErrorType } from '../error.model';\nimport { FieldType, IField } from '../../contracts/common';\nimport {\n  IXmlComplexType,\n  IXmlDocument,\n  IXmlDocumentContainer,\n  IXmlField,\n  IXmlInspectionResponse,\n  IXmlInspectionResponseContainer,\n  XML_INSPECTION_REQUEST_JSON_TYPE,\n} from '../../contracts/documents/xml';\nimport { NamespaceModel } from '../document-definition.model';\n\nexport class XmlInspectionModel extends DocumentInspectionModel {\n  request = new XmlInspectionRequestModel(this.cfg, this.doc);\n\n  isOnlineInspectionCapable(): boolean {\n    if (this.cfg.initCfg.baseXMLInspectionServiceUrl == null) {\n      this.cfg.errorService.addError(\n        new ErrorInfo({\n          message: `XML inspection service is not configured. Document will not be loaded: ${this.doc.name}`,\n          level: ErrorLevel.WARN,\n          scope: ErrorScope.APPLICATION,\n          type: ErrorType.INTERNAL,\n          object: this.doc,\n        })\n      );\n      return false;\n    }\n    return true;\n  }\n\n  parseResponse(responseJson: any): void {\n    if (typeof responseJson.XmlInspectionResponse !== 'undefined') {\n      this.extractXMLDocumentDefinitionFromInspectionResponse(\n        (responseJson as IXmlInspectionResponseContainer).XmlInspectionResponse\n      );\n    } else if (typeof responseJson.XmlDocument !== 'undefined') {\n      this.extractXMLDocumentDefinition(\n        (responseJson as IXmlDocumentContainer).XmlDocument\n      );\n    } else {\n      throw new Error(`Unknown XML inspection result format: ${responseJson}`);\n    }\n  }\n\n  private extractXMLDocumentDefinitionFromInspectionResponse(\n    body: IXmlInspectionResponse\n  ): void {\n    if (body.errorMessage) {\n      this.doc.errorOccurred = true;\n      throw new Error(\n        `Could not load XML document, error: ${body.errorMessage}`\n      );\n    }\n\n    this.extractXMLDocumentDefinition(body.xmlDocument);\n  }\n\n  private extractXMLDocumentDefinition(xmlDocument: IXmlDocument): void {\n    if (!this.doc.description) {\n      this.doc.description = this.doc.id;\n    }\n    if (!this.doc.name) {\n      this.doc.name = this.doc.id;\n    }\n\n    if (xmlDocument?.xmlNamespaces?.xmlNamespace?.length) {\n      for (const serviceNS of xmlDocument.xmlNamespaces.xmlNamespace) {\n        const ns: NamespaceModel = new NamespaceModel();\n        ns.alias = serviceNS.alias;\n        ns.uri = serviceNS.uri;\n        ns.locationUri = serviceNS.locationUri;\n        ns.isTarget = serviceNS.targetNamespace;\n        this.doc.namespaces.push(ns);\n      }\n    }\n\n    for (const field of xmlDocument.fields.field) {\n      if (!this.doc.selectedRoot || this.isSelectedRootElement(field)) {\n        this.parseXMLFieldFromDocument(field, null);\n        break;\n      }\n    }\n  }\n\n  private isSelectedRootElement(field: IField): boolean {\n    if (!this.doc.selectedRoot && !field?.name) {\n      return false;\n    }\n    return (\n      this.doc.selectedRoot ===\n      (field.name!.indexOf(':') !== -1 ? field.name!.split(':')[1] : field.name)\n    );\n  }\n\n  private parseXMLFieldFromDocument(\n    field: IXmlField,\n    parentField: Field | null\n  ): void {\n    const parsedField = this.parseFieldFromDocument(field, parentField);\n    if (parsedField == null) {\n      return;\n    }\n\n    if (field.name!.indexOf(':') !== -1) {\n      parsedField.namespaceAlias = field.name!.split(':')[0];\n      parsedField.name = field.name!.split(':')[1];\n    }\n\n    parsedField.isAttribute = parsedField.path.indexOf('@') !== -1;\n    if (field.fieldType !== FieldType.COMPLEX) {\n      return;\n    }\n    const complex = field as IXmlComplexType;\n\n    parsedField.enumeration = complex.enumeration;\n\n    if (parsedField.enumeration && complex.xmlEnumFields?.xmlEnumField) {\n      for (const enumValue of complex.xmlEnumFields.xmlEnumField) {\n        const parsedEnumValue: EnumValue = new EnumValue();\n        parsedEnumValue.name = enumValue.name!;\n        parsedEnumValue.ordinal = enumValue.ordinal;\n        parsedField.enumValues.push(parsedEnumValue);\n      }\n    }\n    if (complex.xmlFields?.xmlField.length) {\n      for (const childField of complex.xmlFields.xmlField) {\n        this.parseXMLFieldFromDocument(childField, parsedField);\n      }\n    }\n  }\n}\n\nexport class XmlInspectionRequestModel extends DocumentInspectionRequestModel {\n  url = this.cfg.initCfg.baseXMLInspectionServiceUrl + 'inspect';\n  options = new XmlInspectionRequestOptions(this.cfg, this.doc);\n}\n\nexport class XmlInspectionRequestOptions extends DocumentInspectionRequestOptions {\n  json = {\n    XmlInspectionRequest: {\n      jsonType: XML_INSPECTION_REQUEST_JSON_TYPE,\n      type: this.doc.inspectionType,\n      xmlData: this.doc.inspectionSource,\n    },\n  };\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\nimport { FieldType } from '../contracts';\n\nexport class LookupTableEntry {\n  sourceValue: string;\n  sourceType = FieldType.STRING;\n  targetValue: string;\n  targetType = FieldType.STRING;\n}\n\nexport class LookupTable {\n  name: string;\n  lookupEntry: LookupTableEntry[] = [];\n  sourceIdentifier: string;\n  targetIdentifier: string;\n\n  constructor() {\n    this.name =\n      new Date().getTime() +\n      '-' +\n      Math.floor(Math.random() * 1000000).toString();\n  }\n\n  getInputOutputKey(): string {\n    return this.sourceIdentifier + ':' + this.targetIdentifier;\n  }\n\n  getEntryForSource(\n    sourceValue: string,\n    autocreate: boolean\n  ): LookupTableEntry | null {\n    for (const entry of this.lookupEntry) {\n      if (entry.sourceValue === sourceValue) {\n        return entry;\n      }\n    }\n    if (autocreate) {\n      const entry: LookupTableEntry = new LookupTableEntry();\n      entry.sourceValue = sourceValue;\n      this.lookupEntry.push(entry);\n      return entry;\n    }\n    return null;\n  }\n\n  toString() {\n    let result: string =\n      'Lookup Table, name: ' +\n      this.name +\n      ', entries: ' +\n      this.lookupEntry.length;\n    result += '\\nsourceIdentifier: ' + this.sourceIdentifier;\n    result += '\\n\\targetIdentifier: ' + this.targetIdentifier;\n    let counter = 0;\n    for (const entry of this.lookupEntry) {\n      result +=\n        '\\n\\tEntry #' +\n        counter +\n        ': ' +\n        entry.sourceValue +\n        ' => ' +\n        entry.targetValue;\n      counter += 1;\n    }\n    return result;\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport { ExpressionModel } from './expression.model';\nimport { FieldAction } from './field-action.model';\n\nexport enum TransitionMode {\n  ONE_TO_ONE = 'ONE_TO_ONE',\n  ONE_TO_MANY = 'ONE_TO_MANY',\n  ENUM = 'ENUM',\n  MANY_TO_ONE = 'MANY_TO_ONE',\n  FOR_EACH = 'FOR_EACH',\n  EXPRESSION = 'EXPRESSION',\n}\n\nexport enum TransitionDelimiter {\n  NONE,\n  AMPERSAND,\n  AT_SIGN,\n  BACKSLASH,\n  COLON,\n  COMMA,\n  DASH,\n  EQUAL,\n  HASH,\n  PERIOD,\n  PIPE,\n  SEMICOLON,\n  SLASH,\n  SPACE,\n  UNDERSCORE,\n  USER_DEFINED,\n}\n\nexport class TransitionDelimiterModel {\n  delimiter: TransitionDelimiter = TransitionDelimiter.SPACE;\n  serializedValue: string | null = null;\n  prettyName: string | null = null;\n  actualDelimiter = '';\n\n  constructor(\n    delimiter: TransitionDelimiter,\n    serializedValue: string | null,\n    prettyName: string,\n    actualDelimiter: string\n  ) {\n    this.delimiter = delimiter;\n    this.serializedValue = serializedValue;\n    this.prettyName = prettyName;\n    this.actualDelimiter = actualDelimiter;\n  }\n}\n\nexport class TransitionModel {\n  static delimiterModels: TransitionDelimiterModel[] = [];\n\n  mode: TransitionMode = TransitionMode.ONE_TO_ONE;\n  delimiter: TransitionDelimiter = TransitionDelimiter.SPACE;\n  userDelimiter = '';\n  lookupTableName: string | null = null;\n  expression!: ExpressionModel;\n  enableExpression = false;\n  transitionFieldAction: FieldAction | null = null;\n\n  constructor() {\n    TransitionModel.initialize();\n  }\n\n  static initialize() {\n    if (TransitionModel.delimiterModels.length === 0) {\n      const models: TransitionDelimiterModel[] = [];\n      models.push(\n        new TransitionDelimiterModel(\n          TransitionDelimiter.NONE,\n          null,\n          '[None]',\n          ''\n        )\n      );\n      models.push(\n        new TransitionDelimiterModel(\n          TransitionDelimiter.AMPERSAND,\n          'Ampersand',\n          'Ampersand [&]',\n          '&'\n        )\n      );\n      models.push(\n        new TransitionDelimiterModel(\n          TransitionDelimiter.AT_SIGN,\n          'AtSign',\n          'At Sign [@]',\n          '@'\n        )\n      );\n      models.push(\n        new TransitionDelimiterModel(\n          TransitionDelimiter.BACKSLASH,\n          'Backslash',\n          'Backslash [\\\\]',\n          '\\\\'\n        )\n      );\n      models.push(\n        new TransitionDelimiterModel(\n          TransitionDelimiter.COLON,\n          'Colon',\n          'Colon [:]',\n          ':'\n        )\n      );\n      models.push(\n        new TransitionDelimiterModel(\n          TransitionDelimiter.COMMA,\n          'Comma',\n          'Comma [,]',\n          ','\n        )\n      );\n      models.push(\n        new TransitionDelimiterModel(\n          TransitionDelimiter.DASH,\n          'Dash',\n          'Dash [-]',\n          '-'\n        )\n      );\n      models.push(\n        new TransitionDelimiterModel(\n          TransitionDelimiter.EQUAL,\n          'Equal',\n          'Equal [=]',\n          '='\n        )\n      );\n      models.push(\n        new TransitionDelimiterModel(\n          TransitionDelimiter.HASH,\n          'Hash',\n          'Hash [#]',\n          '#'\n        )\n      );\n      models.push(\n        new TransitionDelimiterModel(\n          TransitionDelimiter.PERIOD,\n          'Period',\n          'Period [.]',\n          '.'\n        )\n      );\n      models.push(\n        new TransitionDelimiterModel(\n          TransitionDelimiter.PIPE,\n          'Pipe',\n          'Pipe [|]',\n          '|'\n        )\n      );\n      models.push(\n        new TransitionDelimiterModel(\n          TransitionDelimiter.SEMICOLON,\n          'Semicolon',\n          'Semicolon [;]',\n          ';'\n        )\n      );\n      models.push(\n        new TransitionDelimiterModel(\n          TransitionDelimiter.SLASH,\n          'Slash',\n          'Slash [/]',\n          '/'\n        )\n      );\n      models.push(\n        new TransitionDelimiterModel(\n          TransitionDelimiter.SPACE,\n          'Space',\n          'Space [ ]',\n          ' '\n        )\n      );\n      models.push(\n        new TransitionDelimiterModel(\n          TransitionDelimiter.UNDERSCORE,\n          'Underscore',\n          'Underscore [_]',\n          '_'\n        )\n      );\n      models.push(\n        new TransitionDelimiterModel(\n          TransitionDelimiter.USER_DEFINED,\n          'User defined',\n          'User defined',\n          '\\0'\n        )\n      );\n      TransitionModel.delimiterModels = models;\n    }\n  }\n\n  static delimiterToModel(delimiter: string): TransitionDelimiterModel {\n    return TransitionModel.delimiterModels.filter(\n      (model) => model.actualDelimiter === delimiter\n    )[0];\n  }\n\n  /**\n   * Translate a mapping mode number into a string.\n   * @param mode\n   */\n  static getMappingModeName(mode: TransitionMode): string {\n    let actionName: string;\n\n    switch (mode) {\n      case TransitionMode.ONE_TO_ONE: {\n        actionName = 'One to One';\n        break;\n      }\n      case TransitionMode.MANY_TO_ONE: {\n        actionName = 'Many to One';\n        break;\n      }\n      case TransitionMode.ONE_TO_MANY: {\n        actionName = 'One to Many';\n        break;\n      }\n      case TransitionMode.ENUM: {\n        actionName = 'ENUM';\n        break;\n      }\n      case TransitionMode.FOR_EACH: {\n        actionName = 'For Each';\n        break;\n      }\n      case TransitionMode.EXPRESSION: {\n        actionName = 'Expression';\n        break;\n      }\n      default: {\n        actionName = '';\n        break;\n      }\n    }\n    return actionName;\n  }\n\n  getPrettyName() {\n    let transitionFieldActionName = '';\n    if (this.transitionFieldAction) {\n      transitionFieldActionName = ' (' + this.transitionFieldAction.name + ')';\n    }\n    if (\n      this.mode === TransitionMode.ONE_TO_MANY ||\n      this.mode === TransitionMode.MANY_TO_ONE\n    ) {\n      return (\n        TransitionModel.getMappingModeName(this.mode) +\n        transitionFieldActionName\n      );\n    } else if (this.mode === TransitionMode.ENUM) {\n      return 'Enum (table: ' + this.lookupTableName + ')';\n    } else if (this.mode === TransitionMode.EXPRESSION) {\n      return 'Expression (' + this.expression?.toText() + ')';\n    }\n    return TransitionModel.getMappingModeName(this.mode);\n  }\n\n  isOneToManyMode(): boolean {\n    return this.mode === TransitionMode.ONE_TO_MANY;\n  }\n\n  isOneToOneMode(): boolean {\n    return this.mode === TransitionMode.ONE_TO_ONE;\n  }\n\n  isManyToOneMode(): boolean {\n    return this.mode === TransitionMode.MANY_TO_ONE;\n  }\n\n  isForEachMode(): boolean {\n    return this.mode === TransitionMode.FOR_EACH;\n  }\n\n  isEnumerationMode(): boolean {\n    return this.mode === TransitionMode.ENUM;\n  }\n\n  isExpressionMode(): boolean {\n    return this.mode === TransitionMode.EXPRESSION;\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\nimport { CommonUtil } from '../utils/common-util';\nimport { DocumentDefinition } from './document-definition.model';\nimport { Field } from './field.model';\nimport { LookupTable } from './lookup-table.model';\nimport { MappingModel } from './mapping.model';\nimport { TransitionMode } from './transition.model';\n\nexport class MappingDefinition {\n  name: string | null = null;\n  mappings: MappingModel[] = [];\n  activeMapping: MappingModel | null = null;\n  parsedDocs: DocumentDefinition[] = [];\n  templateText: string | null = null;\n\n  private tables: LookupTable[] = [];\n  private tablesBySourceTargetKey: { [key: string]: LookupTable } = {};\n  private tablesByName: { [key: string]: LookupTable } = {};\n\n  constructor() {\n    // Mapping definition ID must be 0 until https://github.com/atlasmap/atlasmap/issues/1577\n    // this.name = 'UI.' + Math.floor((Math.random() * 1000000) + 1).toString();\n    this.name = 'UI.0';\n  }\n\n  templateExists(): boolean {\n    return this.templateText != null && this.templateText !== '';\n  }\n\n  addTable(table: LookupTable): void {\n    this.tablesBySourceTargetKey[table.getInputOutputKey()] = table;\n    this.tablesByName[table.name] = table;\n    this.tables.push(table);\n  }\n\n  getTableByName(name: string): LookupTable {\n    return this.tablesByName[name];\n  }\n\n  getTableBySourceTarget(\n    sourceIdentifier: string,\n    targetIdentifier: string\n  ): LookupTable {\n    const key: string = sourceIdentifier + ':' + targetIdentifier;\n    return this.tablesBySourceTargetKey[key];\n  }\n\n  getTables(): LookupTable[] {\n    const tables: LookupTable[] = [];\n    for (const key in this.tablesByName) {\n      if (!this.tablesByName.hasOwnProperty(key)) {\n        continue;\n      }\n      const table: LookupTable = this.tablesByName[key];\n      tables.push(table);\n    }\n    return tables;\n  }\n\n  removeTableByName(name: string) {\n    if (name) {\n      const table = this.tablesByName[name];\n      const iokey = table.getInputOutputKey();\n      if (this.tablesByName[name]) {\n        delete this.tables[this.tables.indexOf(table)];\n        delete this.tablesByName[name];\n        delete this.tablesBySourceTargetKey[iokey];\n      }\n    }\n  }\n\n  getAllMappings(includeActiveMapping: boolean): MappingModel[] {\n    const mappings: MappingModel[] = [...this.mappings];\n    if (includeActiveMapping) {\n      if (this.activeMapping == null) {\n        return mappings;\n      }\n      for (const mapping of mappings) {\n        if (mapping === this.activeMapping) {\n          return mappings;\n        }\n      }\n      mappings.push(this.activeMapping);\n    }\n    return mappings;\n  }\n\n  findMappingsForField(field: Field): MappingModel[] {\n    const mappingsForField: MappingModel[] = [];\n    for (const m of this.mappings) {\n      if (m.isFieldMapped(field)) {\n        mappingsForField.push(m);\n      }\n    }\n    return mappingsForField;\n  }\n\n  removeMapping(m: MappingModel): boolean {\n    if (m.transition.mode === TransitionMode.ENUM) {\n      this.removeTableByName(m.transition.lookupTableName!);\n    }\n    return CommonUtil.removeItemFromArray(m, this.mappings);\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport { FieldType, IField } from '../contracts/common';\n\nimport { CommonUtil } from '../utils/common-util';\nimport { ConfigModel } from './config.model';\nimport { Field } from './field.model';\nimport { FieldAction } from './field-action.model';\nimport { PaddingField } from './document-definition.model';\nimport { TransitionModel } from './transition.model';\n\nexport class MappedField {\n  /**\n   * The field properties read from mapping definition. This is a temporary object\n   * when it's deserialized from mapping definition and once {@link field} is populated\n   * this should not be used.\n   * @todo Identify document field at once when it deserializes and remove this temporary\n   * object.\n   */\n  mappingField: IField;\n  /** The field object created from document field */\n  field: Field | null;\n  /** The field actions read from mapping and enriched through {@link FieldActionService} */\n  actions: FieldAction[] = [];\n\n  static sortMappedFieldsByPath(mappedFields: MappedField[]): MappedField[] {\n    if (mappedFields == null || mappedFields.length === 0) {\n      return [];\n    }\n    const fieldsByPath: { [key: string]: MappedField } = {};\n    const fieldPaths: string[] = [];\n    for (const mappedField of mappedFields) {\n      if (mappedField == null || mappedField.field == null) {\n        continue;\n      }\n      const path: string = mappedField.field.path;\n      fieldsByPath[path] = mappedField;\n      fieldPaths.push(path);\n    }\n    fieldPaths.sort();\n    const result: MappedField[] = [];\n    for (const name of fieldPaths) {\n      result.push(fieldsByPath[name]);\n    }\n    return result;\n  }\n\n  isPadField(): boolean {\n    return this.field instanceof PaddingField;\n  }\n\n  isSource(): boolean {\n    return this.field ? this.field.isSource() : false;\n  }\n\n  removeAction(action: FieldAction): void {\n    CommonUtil.removeItemFromArray(action, this.actions);\n  }\n}\n\nexport class MappingModel {\n  cfg: ConfigModel;\n  uuid: string;\n\n  sourceFields: MappedField[] = [];\n  targetFields: MappedField[] = [];\n  referenceFields: MappedField[] = [];\n  transition: TransitionModel = new TransitionModel();\n\n  constructor() {\n    this.uuid = 'mapping.' + Math.floor(Math.random() * 1000000 + 1).toString();\n    this.cfg = ConfigModel.getConfig();\n  }\n\n  getFirstCollectionField(isSource: boolean): Field | null {\n    for (const f of isSource ? this.sourceFields : this.targetFields) {\n      if (f.field && f.field.isInCollection()) {\n        return f.field;\n      }\n    }\n    return null;\n  }\n\n  isLookupMode(): boolean {\n    for (const f of this.sourceFields.concat(this.targetFields)) {\n      if (f.field && f.field.enumeration) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Add the specified field to this field mapping.\n   *\n   * @param field - field to add to the mapping\n   * @param first - if true add the field to the beginning of the array, last otherwise.\n   */\n  addField(field: Field, first: boolean): MappedField {\n    const mappedFields = this.getMappedFields(field.isSource());\n    if (mappedFields.length === 1) {\n      const mappedField: MappedField = mappedFields[0];\n      if (!mappedField.field) {\n        mappedField.field = field;\n        return mappedField;\n      }\n    }\n    const mappedField: MappedField = new MappedField();\n    mappedField.field = field;\n    if (first) {\n      mappedFields.unshift(mappedField);\n    } else {\n      mappedFields.push(mappedField);\n    }\n    return mappedField;\n  }\n\n  /**\n   * Remove the specified field from this field mapping.\n   *\n   * @param field\n   */\n  removeField(field: Field) {\n    const mappedFields = this.getMappedFields(field.isSource());\n    CommonUtil.removeItemFromArray(\n      mappedFields.find((mf) => mf.field === field),\n      mappedFields\n    );\n  }\n\n  /**\n   * Return the number of user-defined (non-padding) fields in this mapping.\n   *\n   * @param field\n   */\n  getUserFieldCount(field: Field): number {\n    const mappedFields = this.getMappedFields(field.isSource());\n    let userFieldCount = 0;\n\n    for (const mappedField of mappedFields) {\n      if (!mappedField.isPadField()) {\n        userFieldCount++;\n      }\n    }\n    return userFieldCount;\n  }\n\n  hasMappedField(isSource: boolean) {\n    return isSource\n      ? this.sourceFields.length > 0\n      : this.targetFields.length > 0;\n  }\n\n  isEmpty() {\n    return this.sourceFields.length === 0 && this.targetFields.length === 0;\n  }\n\n  isFullyMapped(): boolean {\n    return this.sourceFields.length > 0 && this.targetFields.length > 0;\n  }\n\n  addMappedField(mappedField: MappedField, isSource: boolean): void {\n    this.getMappedFields(isSource).push(mappedField);\n  }\n\n  removeMappedField(mappedField: MappedField): void {\n    if (!mappedField || !mappedField.field) {\n      return;\n    }\n    if (mappedField.field.isCollection) {\n      this.removeReferenceField(mappedField);\n    }\n    CommonUtil.removeItemFromArray(\n      mappedField,\n      this.getMappedFields(mappedField.field!.isSource())\n    );\n    this.cfg.mappingService.notifyMappingUpdated();\n  }\n\n  getMappedFieldForField(field: Field): MappedField | null {\n    if (!field || !field.isSource) {\n      return null;\n    }\n\n    for (const mappedField of this.getMappedFields(field.isSource())) {\n      if (mappedField.field === field) {\n        return mappedField;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Return the MappedField associated with the specified field path and panel. The\n   * document ID is optional identifier parameters used to distinguish the fields\n   * with the same path in a different document. The first match will be returned\n   * if not specified.\n   *\n   * @param fieldPath\n   * @param isSource\n   * @param identifier\n   */\n  getMappedFieldByPath(\n    fieldPath: string,\n    isSource: boolean,\n    docId?: string\n  ): MappedField | null {\n    if (!fieldPath) {\n      return null;\n    }\n    const mappedFields = this.getMappedFields(isSource);\n    for (let i = 0; i < mappedFields.length; i++) {\n      if (mappedFields[i].field?.path === fieldPath) {\n        if (!docId) {\n          return mappedFields[i];\n        }\n        if (docId && mappedFields[i].field?.docDef.id === docId) {\n          return mappedFields[i];\n        }\n      }\n    }\n    return null;\n  }\n\n  getMappedFieldForIndex(index: string, isSource: boolean): MappedField | null {\n    if (!index || index.length === 0) {\n      return null;\n    }\n    const mappedFields = this.getMappedFields(isSource);\n    if (+index - 1 > mappedFields.length - 1) {\n      return null;\n    }\n    return mappedFields[+index - 1];\n  }\n\n  getIndexForMappedField(mappedField: MappedField): number | null {\n    if (!mappedField || !mappedField.field) {\n      return null;\n    }\n    return (\n      this.getMappedFields(mappedField.field.isSource()).indexOf(mappedField) +\n      1\n    );\n  }\n\n  getField(docId: string, fieldPath: string): Field | null {\n    let docDef = this.cfg.getDocForIdentifier(docId, true);\n    if (!docDef) {\n      docDef = this.cfg.getDocForIdentifier(docId, false);\n    }\n    let field: Field | null = null;\n    if (docDef) {\n      field = Field.getField(fieldPath, docDef.getAllFields());\n    }\n    return field;\n  }\n\n  /**\n   * Create a reference field in the reference fields array for this mapping.\n   *\n   * @param field\n   */\n  createReferenceField(field: Field): MappedField | null {\n    let mappedField: MappedField | null = null;\n\n    if (!field) {\n      return null;\n    }\n    if (\n      !field.documentField?.status ||\n      field.documentField?.status === 'SUPPORTED' ||\n      field.documentField?.status === 'CACHED'\n    ) {\n      mappedField = new MappedField();\n      mappedField.field = field;\n      this.referenceFields.push(mappedField);\n    }\n    return mappedField;\n  }\n\n  /**\n   * Remove the specified reference field from the reference fields array.\n   *\n   * @param field\n   */\n  removeReferenceField(mappedField: MappedField) {\n    if (!mappedField) {\n      return;\n    }\n    CommonUtil.removeItemFromArray(mappedField, this.referenceFields);\n  }\n\n  /**\n   * Return true if a reference field exists in this mapping with the specified\n   * document ID and field path, false otherwise.\n   *\n   * @param docId\n   * @param fieldPath\n   */\n  referenceFieldExists(docId: string, fieldPath: string): boolean {\n    if (!docId || !fieldPath) {\n      return false;\n    }\n    const referenceFields = this.getReferenceMappedFields();\n    for (let referenceField of referenceFields) {\n      if (\n        referenceField.field &&\n        referenceField.field.docDef.id === docId &&\n        referenceField.field.path === fieldPath\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * A reference field is a complex field which is referenced in a conditional\n   * expression but does not exist as an explicit part of the mapping.  It is\n   * typically used as a parameter to conditional functions/ constructs. If the\n   * field already exists return it otherwise create it.\n   *\n   * @param docId\n   * @param fieldPath\n   */\n  getReferenceField(docId: string, fieldPath: string): MappedField | null {\n    if (!docId || !fieldPath) {\n      return null;\n    }\n    const referenceFields = this.getReferenceMappedFields();\n    for (let referenceField of referenceFields) {\n      if (\n        referenceField.field &&\n        referenceField.field.docDef.id === docId &&\n        referenceField.field.path === fieldPath\n      ) {\n        return referenceField;\n      }\n    }\n    const field = this.getField(docId, fieldPath);\n    if (field?.type === FieldType.COMPLEX) {\n      this.transition.expression.hasComplexField = true;\n      return this.createReferenceField(field);\n    }\n    return null;\n  }\n\n  /**\n   * Return an array of user mapped fields for the specified panel in this\n   * field pair instance.  No data-mapper generated padding fields will be\n   * included.\n   *\n   * @param isSource - true source panel, false target panel\n   */\n  getUserMappedFields(isSource: boolean): MappedField[] {\n    const workingFields = isSource ? this.sourceFields : this.targetFields;\n    const resultFields: MappedField[] = [new MappedField()];\n\n    for (const mappedField of workingFields) {\n      if (!mappedField.isPadField()) {\n        resultFields.push(mappedField);\n      }\n    }\n    resultFields.shift();\n    return resultFields;\n  }\n\n  getReferenceMappedFields(): MappedField[] {\n    return this.referenceFields;\n  }\n\n  getMappedFields(isSource: boolean): MappedField[] {\n    return isSource ? this.sourceFields : this.targetFields;\n  }\n\n  getLastMappedField(isSource: boolean): MappedField | null {\n    const fields: MappedField[] = this.getMappedFields(isSource);\n    if (fields != null && fields.length > 0) {\n      return fields[fields.length - 1];\n    }\n    return null;\n  }\n\n  getFields(isSource: boolean): Field[] {\n    const fields: Field[] = [];\n    for (const mappedField of this.getMappedFields(isSource)) {\n      if (mappedField.field != null) {\n        fields.push(mappedField.field);\n      }\n    }\n    return fields;\n  }\n\n  getFieldNames(isSource: boolean): string[] {\n    const fields: Field[] = this.getFields(isSource);\n    Field.alphabetizeFields(fields);\n    const names: string[] = [];\n    for (const field of fields) {\n      names.push(field.name);\n    }\n    return names;\n  }\n\n  getFieldPaths(isSource: boolean): string[] {\n    const fields: Field[] = this.getFields(isSource);\n    Field.alphabetizeFields(fields);\n    const paths: string[] = [];\n    for (const field of fields) {\n      paths.push(field.path);\n    }\n    return paths;\n  }\n\n  hasFieldActions(): boolean {\n    for (const mappedField of this.getAllMappedFields()) {\n      if (mappedField.actions.length > 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  getAllFields(): Field[] {\n    return this.getFields(true).concat(this.getFields(false));\n  }\n\n  getAllMappedFields(): MappedField[] {\n    return this.getMappedFields(true).concat(this.getMappedFields(false));\n  }\n\n  isFieldMapped(field: Field): boolean {\n    return this.getMappedFieldForField(field) != null;\n  }\n\n  hasTransformation(): boolean {\n    const mappedFields: MappedField[] = this.getAllMappedFields();\n    for (const mappedField of mappedFields) {\n      if (mappedField.actions.length > 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Walk all target field mappings and return one of corresponding source field name\n   * if the specified field is already the target of a previous mapping, null otherwise.\n   *\n   * @param field\n   */\n  public getMappedTarget(field: Field): string | null {\n    // TODO: check this non null operator\n    const mappings: MappingModel[] = this.cfg.mappings!.mappings;\n\n    if (field.isSource()) {\n      return null;\n    }\n    for (const m of mappings) {\n      if (m.targetFields.length === 0) {\n        continue;\n      }\n\n      for (const mappedOutputField of m.targetFields) {\n        // TODO: check this non null operator\n        if (\n          mappedOutputField.field?.docDef === field.docDef &&\n          mappedOutputField.field!.path === field.path\n        ) {\n          if (m.isFieldMapped(field)) {\n            return m.sourceFields[0]?.field!.name;\n          }\n        }\n      }\n    }\n    return null;\n  }\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport {\n  CollectionType,\n  DocumentType,\n  InspectionType,\n} from '../contracts/common';\nimport {\n  ConfigModel,\n  DocumentInitializationModel,\n} from '../models/config.model';\n\nimport { CommonUtil } from './common-util';\nimport { CsvInspectionModel } from '../models/inspect/csv-inspection.model';\nimport { DocumentDefinition } from '../models/document-definition.model';\nimport { DocumentInspectionModel } from '../models/inspect/document-inspection.model';\nimport { JavaInspectionModel } from '../models/inspect/java-inspection.model';\nimport { JsonInspectionModel } from '../models/inspect/json-inspection.model';\nimport { XmlInspectionModel } from '../models/inspect/xml-inspection.model';\n\nexport class DocumentInspectionUtil {\n  /**\n   * Create one of the subclass of {@link DocumentInspectionModel} which\n   * corresponds to the existing {@link DocumentDefinition} passed in as an argument.\n   * @see fromNonJavaProperties()\n   * @see fromJavaProperties()\n   *\n   * @param cfg\n   * @param doc\n   * @returns\n   */\n  static fromDocumentDefinition(\n    cfg: ConfigModel,\n    doc: DocumentDefinition\n  ): DocumentInspectionModel {\n    switch (doc.type) {\n      case DocumentType.JAVA:\n        return new JavaInspectionModel(cfg, doc);\n      case DocumentType.JSON:\n        return new JsonInspectionModel(cfg, doc);\n      case DocumentType.XSD:\n      case DocumentType.XML:\n        return new XmlInspectionModel(cfg, doc);\n      case DocumentType.CSV:\n        return new CsvInspectionModel(cfg, doc);\n      default:\n        throw new Error(\n          `Document type '${doc.type}' is not supported for inspection`\n        );\n    }\n  }\n\n  /**\n   * Create {@link JavaInspectionModel} from arguments and add corresponding\n   * {@link DocumentDefinition} into {@link ConfigModel}.\n   * @see fromDocumentDefinition()\n   * @see fromNonJavaProperties()\n   * @todo https://github.com/atlasmap/atlasmap/issues/2919\n   * Assign GUID to Java Document ID as well, and use simple class name for default Document name\n   *\n   * @param cfg\n   * @param className\n   * @param isSource\n   * @param collectionType\n   * @param collectionClassName\n   * @returns\n   */\n  static fromJavaProperties(\n    cfg: ConfigModel,\n    className: string,\n    isSource: boolean,\n    collectionType = CollectionType.NONE,\n    collectionClassName?: string\n  ): JavaInspectionModel {\n    const model: DocumentInitializationModel =\n      new DocumentInitializationModel();\n    model.id = className;\n    const simpleName = className.split('.').pop();\n    model.name = simpleName ? simpleName : '';\n    model.type = DocumentType.JAVA;\n    model.inspectionType = InspectionType.JAVA_CLASS;\n    model.inspectionSource = className;\n    model.inspectionParameters = { '': '' };\n    model.isSource = isSource;\n    model.collectionType = collectionType;\n    model.collectionClassName = collectionClassName;\n    model.description = 'Java document class ' + className;\n    if (collectionType && collectionType !== CollectionType.NONE) {\n      model.description += ' collection type: ' + collectionType;\n      if (collectionClassName) {\n        model.description += ' collection class name: ' + collectionClassName;\n      }\n    }\n    DocumentInspectionUtil.removeDocumentIfAlreadyExists(\n      cfg,\n      model.id,\n      isSource\n    );\n    const doc = cfg.addDocument(model);\n    return new JavaInspectionModel(cfg, doc);\n  }\n\n  /**\n   * Create one of the subclass of {@link DocumentInspectionModel}\n   * other than Java from arguments and add corresponding\n   * {@link DocumentDefinition} into {@link ConfigModel}..\n   * @see fromDocumentDefinition()\n   * @see fromJavaProperties()\n   *\n   * @param cfg\n   * @param id\n   * @param name\n   * @param documentType\n   * @param inspectionType\n   * @param inspectionSource\n   * @param isSource\n   * @param inspectionParameters\n   * @returns\n   */\n  static fromNonJavaProperties(\n    cfg: ConfigModel,\n    id: string,\n    name: string,\n    documentType: DocumentType,\n    inspectionType: InspectionType,\n    inspectionSource: string,\n    isSource: boolean,\n    inspectionParameters?: { [key: string]: string }\n  ): DocumentInspectionModel {\n    const model: DocumentInitializationModel =\n      new DocumentInitializationModel();\n    model.name = name;\n    model.id = id;\n    model.type = documentType;\n    model.inspectionType = inspectionType;\n    model.inspectionSource = inspectionSource;\n    if (inspectionParameters) {\n      model.inspectionParameters = inspectionParameters;\n    } else {\n      model.inspectionParameters = { '': '' };\n    }\n    model.isSource = isSource;\n    model.description = isSource ? 'Source document ' : 'Target document ';\n    model.description += name + ' type: ' + documentType;\n    DocumentInspectionUtil.removeDocumentIfAlreadyExists(\n      cfg,\n      model.id,\n      isSource\n    );\n    const doc = cfg.addDocument(model);\n    return this.fromDocumentDefinition(cfg, doc);\n  }\n\n  private static removeDocumentIfAlreadyExists(\n    cfg: ConfigModel,\n    id: string,\n    isSource: boolean\n  ) {\n    // Clear out the existing document if importing the same name.\n    const existing = cfg.getDocForIdentifier(id, isSource);\n    if (existing) {\n      if (isSource) {\n        CommonUtil.removeItemFromArray(existing, cfg.sourceDocs);\n      } else {\n        CommonUtil.removeItemFromArray(existing, cfg.targetDocs);\n      }\n    }\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n/*\n    Generate a global unique identifier.\n    Ref: https://stackoverflow.com/questions/26501688/a-typescript-guid-class\n*/\nexport class Guid {\n  static newGuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(\n      /[xy]/g,\n      function (c) {\n        var r = (Math.random() * 16) | 0,\n          v = c === 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n      }\n    );\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport { ErrorInfo, ErrorScope, ErrorType } from '../models/error.model';\nimport { LookupTable, LookupTableEntry } from '../models/lookup-table.model';\n\nimport { ConfigModel } from '../models/config.model';\nimport { Field } from '../models/field.model';\nimport { MappingDefinition } from '../models/mapping-definition.model';\nimport { MappingModel } from '../models/mapping.model';\nimport { TransitionMode } from '../models/transition.model';\n\nconst EnumerationUnspecified = '[ None ]';\n\n/**\n * Lookup table structure.\n */\nexport class LookupTableData {\n  sourceEnumValue: string;\n  targetEnumValues: string[];\n  selectedTargetEnumValue: string;\n}\n\n/**\n * Static lookup table utility methods.\n */\nexport class LookupTableUtil {\n  static populateMappingLookupTable(\n    mappingDefinition: MappingDefinition,\n    m: MappingModel\n  ): void {\n    if (\n      !(\n        m.transition.mode === TransitionMode.ENUM &&\n        !m.transition.lookupTableName &&\n        m.getFields(true).length === 1 &&\n        m.getFields(false).length === 1\n      )\n    ) {\n      return;\n    }\n    let inputIdentifier: string | undefined;\n    let outputIdentifier: string | undefined;\n\n    const inputField: Field = m.getFields(true)[0];\n    if (inputField) {\n      inputIdentifier = inputField.name + '-' + inputField.docDef.id;\n    }\n    const outputField: Field = m.getFields(true)[0];\n    if (outputField) {\n      outputIdentifier = outputField.name + '-' + outputField.docDef.id;\n    }\n    if (inputIdentifier && outputIdentifier) {\n      let table: LookupTable = mappingDefinition.getTableBySourceTarget(\n        inputIdentifier,\n        outputIdentifier\n      );\n      if (!table) {\n        table = new LookupTable();\n        table.sourceIdentifier = inputIdentifier;\n        table.targetIdentifier = outputIdentifier;\n        mappingDefinition.addTable(table);\n        m.transition.lookupTableName = table.name;\n      } else {\n        m.transition.lookupTableName = table.name;\n      }\n    }\n  }\n\n  static updateLookupTables(mappingDefinition: MappingDefinition) {\n    for (const t of mappingDefinition.getTables()) {\n      if (t.sourceIdentifier && t.targetIdentifier) {\n        continue;\n      }\n      const m: MappingModel = LookupTableUtil.getFirstMappingForLookupTable(\n        mappingDefinition,\n        t.name\n      );\n      if (m && m.transition.lookupTableName) {\n        if (!t.sourceIdentifier) {\n          const inputField: Field = m.getFields(true)[0];\n          if (inputField) {\n            t.sourceIdentifier = inputField.classIdentifier;\n          }\n        }\n        if (!t.targetIdentifier) {\n          const outputField: Field = m.getFields(false)[0];\n          if (outputField) {\n            t.targetIdentifier = outputField.classIdentifier;\n          }\n        }\n      }\n    }\n    for (const m of mappingDefinition.mappings) {\n      LookupTableUtil.populateMappingLookupTable(mappingDefinition, m);\n    }\n  }\n\n  private static getFirstMappingForLookupTable(\n    mappingDefinition: MappingDefinition,\n    lookupTableName: string\n  ): MappingModel {\n    // TODO: check this non null operator\n    return mappingDefinition.mappings.find(\n      (m) => m.transition.lookupTableName === lookupTableName\n    )!;\n  }\n\n  private static errorNoTable(cfg: ConfigModel, mapping: MappingModel) {\n    cfg.errorService.addError(\n      new ErrorInfo({\n        message:\n          'Could not find enumeration lookup table ' +\n          mapping.transition?.lookupTableName +\n          ' for mapping.',\n        scope: ErrorScope.MAPPING,\n        type: ErrorType.INTERNAL,\n        mapping: mapping,\n      })\n    );\n  }\n\n  static getEnumerationValues(\n    cfg: ConfigModel,\n    mapping: MappingModel\n  ): LookupTableData[] {\n    if (!cfg || !cfg.mappings || !mapping) {\n      return [];\n    }\n    const targetField: Field = mapping.getFields(false)[0];\n    const targetValues: string[] = [];\n    targetValues.push('[ None ]');\n    for (const e of targetField.enumValues) {\n      targetValues.push(e.name);\n    }\n\n    const table = cfg.mappings.getTableByName(\n      mapping.transition?.lookupTableName!\n    );\n    if (!table) {\n      LookupTableUtil.errorNoTable(cfg, mapping);\n      return [];\n    }\n\n    const enumVals: LookupTableData[] = [];\n    const sourceField: Field = mapping.getFields(true)[0];\n    for (const sourceEnum of sourceField.enumValues) {\n      const tableData: LookupTableData = new LookupTableData();\n      tableData.sourceEnumValue = sourceEnum.name;\n      tableData.targetEnumValues = targetValues;\n      const selected: LookupTableEntry | null = table.getEntryForSource(\n        tableData.sourceEnumValue,\n        false\n      );\n      tableData.selectedTargetEnumValue =\n        selected == null ? EnumerationUnspecified : selected.targetValue;\n      enumVals.push(tableData);\n    }\n    return enumVals;\n  }\n\n  static updateEnumerationValues(\n    cfg: ConfigModel,\n    mapping: MappingModel,\n    enumerationValues: LookupTableData[]\n  ) {\n    if (!cfg || !cfg.mappings || !mapping) {\n      return;\n    }\n    const table = cfg.mappings.getTableByName(\n      mapping.transition?.lookupTableName!\n    );\n    if (!table) {\n      LookupTableUtil.errorNoTable(cfg, mapping);\n      return;\n    }\n    table.lookupEntry = [];\n    for (const enumValue of enumerationValues) {\n      if (enumValue.selectedTargetEnumValue === EnumerationUnspecified) {\n        continue;\n      }\n      const lte: LookupTableEntry = new LookupTableEntry();\n      lte.sourceValue = enumValue.sourceEnumValue;\n      lte.targetValue = enumValue.selectedTargetEnumValue;\n      table.lookupEntry.push(lte);\n    }\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport { ADMDigest } from '../contracts/adm-digest';\nimport { CommonUtil } from './common-util';\nimport { ConfigModel } from '../models/config.model';\n\nexport class MappingDigestUtil {\n  static generateMappingDigest(cfg: ConfigModel, mappingJson: any): ADMDigest {\n    let mappingDigest: ADMDigest = {\n      exportMappings: { value: '' },\n      exportMeta: [],\n      exportBlockData: [],\n    };\n\n    // Retrieve the JSON mappings buffer from the server.\n    const jsonBuffer = JSON.stringify(mappingJson);\n    if (jsonBuffer) {\n      mappingDigest.exportMappings.value = CommonUtil.sanitizeJSON(jsonBuffer);\n    }\n\n    for (const doc of cfg.getAllDocs()) {\n      if (!doc.isPropertyOrConstant) {\n        mappingDigest.exportMeta.push({\n          name: doc.name,\n          dataSourceType: doc.type,\n          id: doc.id,\n          inspectionType: doc.inspectionType,\n          inspectionParameters: doc.inspectionParameters,\n          isSource: doc.isSource,\n        });\n        mappingDigest.exportBlockData.push({ value: doc.inspectionSource });\n      }\n    }\n    return mappingDigest;\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport {\n  CONSTANT_FIELD_JSON_TYPE,\n  IPropertyField,\n  PROPERTY_FIELD_JSON_TYPE,\n} from '../contracts/mapping';\nimport {\n  DocumentDefinition,\n  PaddingField,\n} from '../models/document-definition.model';\nimport {\n  ErrorInfo,\n  ErrorLevel,\n  ErrorScope,\n  ErrorType,\n} from '../models/error.model';\nimport { MappedField, MappingModel } from '../models/mapping.model';\nimport { ConfigModel } from '../models/config.model';\nimport { Field } from '../models/field.model';\nimport { IField } from '../contracts/common';\n\n/**\n * Static routines for handling mappings.\n */\nexport class MappingUtil {\n  static updateMappingsFromDocuments(cfg: ConfigModel): void {\n    // TODO: check this non null operator\n    for (const mapping of cfg.mappings!.mappings) {\n      MappingUtil.updateMappedFieldsFromDocuments(mapping, cfg, true);\n      MappingUtil.updateMappedFieldsFromDocuments(mapping, cfg, false);\n    }\n    for (const doc of cfg.getAllDocs()) {\n      if (doc.id == null) {\n        doc.id =\n          'DOC.' +\n          doc.name +\n          '.' +\n          Math.floor(Math.random() * 1000000 + 1).toString();\n      }\n    }\n  }\n\n  static updateMappedFieldsFromDocuments(\n    mapping: MappingModel,\n    cfg: ConfigModel,\n    isSource: boolean\n  ): void {\n    let mappedFields: MappedField[] = mapping.getMappedFields(isSource);\n    let mappedFieldIndex = -1;\n\n    for (const mappedField of mappedFields) {\n      let doc: DocumentDefinition | null = null;\n      mappedFieldIndex += 1;\n\n      if (\n        mappedField.field instanceof PaddingField ||\n        mappedField.mappingField === undefined\n      ) {\n        continue;\n      }\n      if (MappingUtil.isPropertyField(mappedField.mappingField)) {\n        doc = isSource ? cfg.sourcePropertyDoc : cfg.targetPropertyDoc;\n        // Preserve property Document ID from parsed data\n        if (mappedField.mappingField.docId) {\n          doc.id = mappedField.mappingField.docId;\n        }\n      } else if (MappingUtil.isConstantField(mappedField.mappingField)) {\n        doc = cfg.constantDoc;\n        // Preserve constant Document ID from parsed data\n        if (mappedField.mappingField.docId) {\n          doc.id = mappedField.mappingField.docId;\n        }\n      } else {\n        if (mappedField.mappingField.docId == null) {\n          cfg.errorService.addError(\n            new ErrorInfo({\n              message: `Could not find doc ID for mapped field ${mappedField.mappingField.name}`,\n              level: ErrorLevel.ERROR,\n              scope: ErrorScope.APPLICATION,\n              type: ErrorType.INTERNAL,\n            })\n          );\n          continue;\n        }\n        doc = cfg.getDocForIdentifier(\n          mappedField.mappingField.docId!,\n          isSource\n        );\n        if (doc == null) {\n          if (mappedField.mappingField.name != null) {\n            cfg.errorService.addError(\n              new ErrorInfo({\n                message: `Could not find document for mapped field '${mappedField.mappingField.name}' \\\nwith ID ${mappedField.mappingField.docId}`,\n                level: ErrorLevel.ERROR,\n                scope: ErrorScope.APPLICATION,\n                type: ErrorType.INTERNAL,\n              })\n            );\n          }\n          continue;\n        }\n\n        doc.id = mappedField.mappingField.docId;\n      }\n\n      if (!mappedField.mappingField.path) {\n        continue;\n      }\n      mappedField.field = doc.getField(mappedField.mappingField.path);\n\n      if (mappedField.field == null) {\n        // Check for collection instance.\n        if (mappedField.mappingField.path.indexOf('<0>') >= 0) {\n          mappedField.field = doc.getField(\n            mappedField.mappingField.path!.replace('<0>', '<>')\n          );\n        } else if (\n          MappingUtil.isConstantField(mappedField.mappingField) &&\n          mappedField.mappingField.value &&\n          mappedField.mappingField.fieldType\n        ) {\n          let constantField = cfg.constantDoc.getField(\n            mappedField.mappingField.value\n          );\n          if (!constantField) {\n            constantField = new Field();\n          }\n          constantField.value = mappedField.mappingField.value;\n          constantField.type = mappedField.mappingField.fieldType;\n          constantField.displayName = constantField.value;\n          constantField.name = constantField.value;\n          constantField.path = constantField.value;\n          constantField.userCreated = true;\n          mappedField.field = constantField;\n          doc.addField(constantField);\n        } else if (\n          MappingUtil.isPropertyField(mappedField.mappingField) &&\n          mappedField.mappingField.fieldType &&\n          mappedField.mappingField.name &&\n          mappedField.mappingField.path\n        ) {\n          const propMappingField = mappedField.mappingField as IPropertyField;\n          let propertyField = doc.getField(propMappingField.path!);\n\n          if (!propertyField) {\n            propertyField = new Field();\n          }\n          let fieldName = propMappingField.name;\n          propertyField.type = propMappingField.fieldType!;\n          if (propMappingField.scope) {\n            propertyField.scope = propMappingField.scope;\n          }\n          propertyField.displayName = fieldName!;\n          propertyField.name = fieldName!;\n          propertyField.path = propMappingField.path!;\n          propertyField.userCreated = true;\n          mappedField.field = propertyField;\n          doc.addField(propertyField);\n        } else {\n          cfg.errorService.addError(\n            new ErrorInfo({\n              message: `Could not find field from document '${doc.name}' for mapped field '${mappedField.mappingField.name}'`,\n              level: ErrorLevel.ERROR,\n              scope: ErrorScope.APPLICATION,\n              type: ErrorType.INTERNAL,\n              object: { mappedField: mappedField, doc: doc },\n            })\n          );\n          return;\n        }\n      }\n\n      const zeroBasedIndex = +mappedField.mappingField.index!; // TODO: check this non null operator\n      mappedFields = mapping.getMappedFields(isSource);\n      if (zeroBasedIndex <= mappedFieldIndex) {\n        mappedFields[mappedFieldIndex] = mappedField;\n      } else {\n        cfg.mappingService.addPlaceholders(\n          zeroBasedIndex - mappedFieldIndex,\n          mapping,\n          mappedFieldIndex,\n          isSource\n        );\n      }\n    }\n  }\n\n  /**\n   * Check all mappings in the current context and remove if it refers to un-existing fields.\n   *\n   * @param cfg ConfigModel\n   */\n  static removeStaleMappings(cfg: ConfigModel): void {\n    let index = 0;\n    let sourceFieldPaths: string[] = [];\n    for (const doc of cfg.getDocs(true)) {\n      sourceFieldPaths = sourceFieldPaths.concat(\n        Field.getFieldPaths(doc.getAllFields())\n      );\n    }\n    let targetSourcePaths: string[] = [];\n    for (const doc of cfg.getDocs(false)) {\n      targetSourcePaths = targetSourcePaths.concat(\n        Field.getFieldPaths(doc.getAllFields())\n      );\n    }\n    // TODO: check these non null operator\n    while (index < cfg.mappings!.mappings.length) {\n      const mapping: MappingModel = cfg.mappings!.mappings[index];\n      const mappingIsStale: boolean = this.isMappingStale(\n        mapping,\n        sourceFieldPaths,\n        targetSourcePaths\n      );\n      if (mappingIsStale) {\n        cfg.mappings!.mappings.splice(index, 1);\n      } else {\n        index++;\n      }\n    }\n  }\n\n  private static isMappingStale(\n    mapping: MappingModel,\n    sourceFieldPaths: string[],\n    targetSourcePaths: string[]\n  ): boolean {\n    for (const field of mapping.getFields(true)) {\n      if (\n        !(field instanceof PaddingField) &&\n        sourceFieldPaths.indexOf(field.path) === -1\n      ) {\n        return true;\n      }\n    }\n    for (const field of mapping.getFields(false)) {\n      if (\n        !(field instanceof PaddingField) &&\n        targetSourcePaths.indexOf(field.path) === -1\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  static updateDocumentNamespacesFromMappings(cfg: ConfigModel): void {\n    const docs: DocumentDefinition[] = cfg.getDocs(false);\n\n    // TODO: check this non null operator\n    for (const parsedDoc of cfg.mappings!.parsedDocs) {\n      if (!parsedDoc) {\n        continue;\n      }\n      if (parsedDoc.isSource) {\n        continue;\n      }\n      if (parsedDoc.namespaces.length === 0) {\n        continue;\n      }\n\n      const doc = this.getDocById(parsedDoc.id, docs);\n      if (doc == null) {\n        cfg.errorService.addError(\n          new ErrorInfo({\n            message: `Could not find document with identifier '${parsedDoc.id}' for namespace override.`,\n            level: ErrorLevel.ERROR,\n            scope: ErrorScope.APPLICATION,\n            type: ErrorType.INTERNAL,\n            object: {\n              identifier: parsedDoc.id,\n              parsedDoc: parsedDoc,\n              docs: docs,\n            },\n          })\n        );\n        continue;\n      }\n\n      doc.namespaces = [...parsedDoc.namespaces];\n    }\n  }\n\n  private static getDocById(\n    documentId: string,\n    docs: DocumentDefinition[]\n  ): DocumentDefinition | null {\n    if (documentId == null || docs == null || !docs.length) {\n      return null;\n    }\n    for (const doc of docs) {\n      if (doc.id === documentId) {\n        return doc;\n      }\n    }\n    return null;\n  }\n\n  static activeMapping(cfg: ConfigModel): boolean {\n    return !!cfg?.mappings?.activeMapping;\n  }\n\n  /**\n   * Return true if the specified mapped field array has any established field actions,\n   * false otherwise.\n   *\n   * @param fields\n   */\n  static hasFieldAction(fields: MappedField[]): boolean {\n    for (let field of fields) {\n      if (field.actions.length > 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  static hasMappedCollection(\n    mapping: MappingModel,\n    isSource: boolean\n  ): boolean | null {\n    const mappedFields = mapping.getMappedFields(isSource);\n    return (\n      mapping.isFullyMapped() &&\n      mappedFields[0].field &&\n      mappedFields[0].field.isInCollection()\n    );\n  }\n\n  static isPropertyField(field: IField) {\n    return field?.jsonType === PROPERTY_FIELD_JSON_TYPE;\n  }\n\n  static isConstantField(field: IField) {\n    return field?.jsonType === CONSTANT_FIELD_JSON_TYPE;\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\nimport {\n  ATLAS_MAPPING_JSON_TYPE,\n  COLLECTION_JSON_TYPE,\n  CONSTANT_FIELD_JSON_TYPE,\n  FIELD_GROUP_JSON_TYPE,\n  IAtlasMappingContainer,\n  ICollection,\n  IConstant,\n  IFieldGroup,\n  IJsonDataSource,\n  ILookupEntry,\n  ILookupTable,\n  IMapping,\n  IProperty,\n  IPropertyField,\n  MAPPING_JSON_TYPE,\n  MappingType,\n  PROPERTY_FIELD_JSON_TYPE,\n} from '../contracts/mapping';\nimport {\n  DATA_SOURCE_JSON_TYPE,\n  DataSourceType,\n  DocumentType,\n  FIELD_PATH_SEPARATOR,\n  FieldType,\n  IDataSource,\n  IField,\n  IFieldAction,\n} from '../contracts/common';\nimport {\n  DocumentDefinition,\n  NamespaceModel,\n} from '../models/document-definition.model';\nimport {\n  ErrorInfo,\n  ErrorLevel,\n  ErrorScope,\n  ErrorType,\n} from '../models/error.model';\nimport {\n  FieldAction,\n  FieldActionArgument,\n  FieldActionArgumentValue,\n} from '../models/field-action.model';\nimport {\n  IXmlDataSource,\n  IXmlField,\n  IXmlNamespace,\n  XML_DATA_SOURCE_JSON_TYPE,\n  XML_ENUM_FIELD_JSON_TYPE,\n  XML_MODEL_PACKAGE_PREFIX,\n} from '../contracts/documents/xml';\nimport {\n  JSON_DATA_SOURCE_JSON_TYPE,\n  JSON_ENUM_FIELD_JSON_TYPE,\n} from '../contracts/documents/json';\nimport { LookupTable, LookupTableEntry } from '../models/lookup-table.model';\nimport { MappedField, MappingModel } from '../models/mapping.model';\nimport { TransitionMode, TransitionModel } from '../models/transition.model';\n\nimport { ConfigModel } from '../models/config.model';\nimport { ExpressionModel } from '../models/expression.model';\nimport { Field } from '../models/field.model';\nimport { IAudits } from '../contracts/mapping-preview';\nimport { ICsvField } from '../contracts/documents/csv';\nimport { IJavaField } from '../contracts/documents/java';\nimport { JAVA_ENUM_FIELD_JSON_TYPE } from '../contracts/documents/java';\nimport { MappingDefinition } from '../models/mapping-definition.model';\nimport { MappingUtil } from './mapping-util';\nimport { Multiplicity } from '../contracts/field-action';\n\nexport class MappingSerializer {\n  static serializeMappings(\n    cfg: ConfigModel,\n    ignoreValue: boolean = true\n  ): IAtlasMappingContainer {\n    // TODO: check this non null operator\n    const mappingDefinition: MappingDefinition = cfg.mappings!;\n    let jsonMappings: IMapping[] = [];\n    for (const mapping of mappingDefinition.mappings.filter((m) =>\n      m.isFullyMapped()\n    )) {\n      try {\n        const serializedFieldMapping = MappingSerializer.serializeFieldMapping(\n          cfg,\n          mapping,\n          mapping.uuid,\n          ignoreValue\n        );\n        if (serializedFieldMapping) {\n          jsonMappings = jsonMappings.concat(serializedFieldMapping);\n        }\n      } catch (e) {\n        const input: any = {\n          mapping: mapping,\n          'mapping def': mappingDefinition,\n        };\n        cfg.errorService.addError(\n          new ErrorInfo({\n            message:\n              'Caught exception while attempting to serialize mapping, skipping. ',\n            level: ErrorLevel.ERROR,\n            scope: ErrorScope.APPLICATION,\n            type: ErrorType.INTERNAL,\n            object: { input: input, error: e },\n          })\n        );\n      }\n    }\n\n    const serializedLookupTables = MappingSerializer.serializeLookupTables(\n      cfg.mappings!\n    );\n    const constantDescriptions: IConstant[] =\n      MappingSerializer.serializeConstants(cfg.constantDoc);\n    const sourcePropertyDescriptions: IProperty[] =\n      MappingSerializer.serializeProperties(cfg.sourcePropertyDoc);\n    const targetPropertyDescriptions: IProperty[] =\n      MappingSerializer.serializeProperties(cfg.targetPropertyDoc);\n    const serializedDataSources: IDataSource[] =\n      MappingSerializer.serializeDocuments(\n        cfg.sourceDocs.concat(cfg.targetDocs),\n        mappingDefinition\n      );\n\n    const payload: IAtlasMappingContainer = {\n      AtlasMapping: {\n        jsonType: ATLAS_MAPPING_JSON_TYPE,\n        dataSource: serializedDataSources,\n        mappings: { mapping: jsonMappings },\n        name: cfg.mappings!.name ? cfg.mappings!.name : undefined,\n        lookupTables: { lookupTable: serializedLookupTables },\n        constants: { constant: constantDescriptions },\n        properties: {\n          property: sourcePropertyDescriptions.concat(\n            targetPropertyDescriptions\n          ),\n        },\n      },\n    };\n    return payload;\n  }\n\n  static serializeFieldMapping(\n    cfg: ConfigModel,\n    mapping: MappingModel,\n    id: string,\n    ignoreValue: boolean = true\n  ): IMapping {\n    const serializedInputFields = MappingSerializer.serializeFields(\n      mapping,\n      true,\n      cfg,\n      ignoreValue\n    );\n    const serializedOutputFields = MappingSerializer.serializeFields(\n      mapping,\n      false,\n      cfg,\n      ignoreValue\n    );\n    let jsonMapping: IMapping;\n    const mappingExpression = cfg.expressionService.getMappingExpressionStr(\n      false,\n      mapping\n    );\n\n    if (\n      mapping.transition.isManyToOneMode() ||\n      mapping.transition.isForEachMode() ||\n      mapping.transition.isExpressionMode()\n    ) {\n      const actions = [];\n      if (mapping.transition.transitionFieldAction) {\n        actions[0] = this.serializeAction(\n          mapping.transition.transitionFieldAction,\n          cfg\n        );\n      }\n      const field = serializedInputFields;\n      const inputFieldGroup: IFieldGroup = {\n        jsonType: FIELD_GROUP_JSON_TYPE,\n        actions,\n        field,\n      };\n      if (mappingExpression.length > 0) {\n        jsonMapping = {\n          jsonType: MAPPING_JSON_TYPE,\n          id: id,\n          expression: mappingExpression,\n          inputFieldGroup,\n          outputField: serializedOutputFields,\n        };\n      } else {\n        jsonMapping = {\n          jsonType: MAPPING_JSON_TYPE,\n          id: id,\n          inputFieldGroup,\n          outputField: serializedOutputFields,\n        };\n      }\n    } else {\n      if (\n        mapping.transition.isOneToManyMode() &&\n        mapping.transition.transitionFieldAction\n      ) {\n        const mappingAction = this.serializeAction(\n          mapping.transition.transitionFieldAction,\n          cfg\n        );\n        if (!serializedInputFields[0].actions) {\n          serializedInputFields[0].actions = [];\n        }\n        if (mappingAction) {\n          serializedInputFields[0].actions.unshift(mappingAction);\n        }\n      }\n      if (mappingExpression.length > 0) {\n        if (serializedInputFields[0].jsonType?.includes('FieldGroup')) {\n          let serializedInputFieldGroup =\n            serializedInputFields[0] as IFieldGroup;\n          for (let i = 1; i < serializedInputFields.length; i++) {\n            if (serializedInputFields[i].jsonType?.includes('FieldGroup')) {\n              const serializedFieldGroup0 =\n                serializedInputFields[0] as IFieldGroup;\n              const serializedFieldGroupi = serializedInputFields[\n                i\n              ] as IFieldGroup;\n              if (\n                serializedFieldGroupi.field &&\n                serializedFieldGroup0.field &&\n                serializedFieldGroupi.field[0].path ===\n                  serializedFieldGroup0.field[0].path\n              ) {\n                serializedInputFieldGroup.field?.push(\n                  serializedFieldGroupi.field[0]\n                );\n              }\n            }\n            // TODO - Support input fields from different complex parent fields\n            // in the same complex conditional expression.\n          }\n\n          jsonMapping = {\n            jsonType: MAPPING_JSON_TYPE,\n            id: id,\n            expression: mappingExpression,\n            inputFieldGroup: serializedInputFieldGroup,\n            outputField: serializedOutputFields,\n          };\n        } else {\n          jsonMapping = {\n            jsonType: MAPPING_JSON_TYPE,\n            id: id,\n            expression: mappingExpression,\n            inputField: serializedInputFields,\n            outputField: serializedOutputFields,\n          };\n        }\n      } else {\n        jsonMapping = {\n          jsonType: MAPPING_JSON_TYPE,\n          id: id,\n          inputField: serializedInputFields,\n          outputField: serializedOutputFields,\n        };\n      }\n    }\n\n    if (mapping.transition.isEnumerationMode()) {\n      jsonMapping.mappingType = MappingType.LOOKUP; /* @deprecated */\n      if (mapping.transition.lookupTableName) {\n        jsonMapping.lookupTableName = mapping.transition.lookupTableName;\n      }\n    }\n    return jsonMapping;\n  }\n\n  static deserializeMappingServiceJSON(\n    json: IAtlasMappingContainer,\n    cfg: ConfigModel\n  ): void {\n    // Process constants and properties before mappings.\n    for (const field of MappingSerializer.deserializeConstants(json)) {\n      cfg.constantDoc.addField(field);\n    }\n    for (const field of MappingSerializer.deserializeProperties(\n      cfg,\n      json,\n      true\n    )) {\n      cfg.sourcePropertyDoc.addField(field);\n    }\n    for (const field of MappingSerializer.deserializeProperties(\n      cfg,\n      json,\n      false\n    )) {\n      cfg.targetPropertyDoc.addField(field);\n    }\n    if (!cfg.mappings) {\n      cfg.mappings = new MappingDefinition();\n    }\n    cfg.mappings.name = this.deserializeAtlasMappingName(json);\n    cfg.mappings.parsedDocs = cfg.mappings.parsedDocs.concat(\n      MappingSerializer.deserializeDocs(json, cfg.mappings)!\n    ); // TODO: check this non null operator\n    cfg.mappings.mappings = cfg.mappings.mappings.concat(\n      MappingSerializer.deserializeMappings(json, cfg)\n    );\n    for (const lookupTable of MappingSerializer.deserializeLookupTables(json)) {\n      cfg.mappings.addTable(lookupTable);\n    }\n  }\n\n  /**\n   * Return the AtlasMap mappings file name from the specified JSON buffer or an empty string.\n   *\n   * @param json\n   */\n  static deserializeAtlasMappingName(json: IAtlasMappingContainer): string {\n    if (json?.AtlasMapping?.name) {\n      return json.AtlasMapping.name;\n    } else {\n      return '';\n    }\n  }\n\n  static addInputFieldGroupFields(\n    inputField: IField[],\n    mapping: MappingModel,\n    cfg: ConfigModel\n  ) {\n    for (const field of inputField) {\n      if (field.fieldType === 'COMPLEX') {\n        MappingSerializer.addInputFieldGroupFields(\n          (field as IFieldGroup).field!,\n          mapping,\n          cfg\n        );\n      } else {\n        MappingSerializer.deserializeMappedField(mapping, field, true, cfg);\n      }\n    }\n  }\n\n  static deserializeFieldMapping(\n    mappingJson: IMapping,\n    cfg: ConfigModel\n  ): MappingModel {\n    const mapping = new MappingModel();\n    mapping.uuid = mappingJson.id;\n    mapping.sourceFields = [];\n    mapping.targetFields = [];\n    mapping.referenceFields = [];\n    mapping.transition.mode = TransitionMode.ONE_TO_ONE;\n    const isLookupMapping =\n      mappingJson.mappingType === 'LOOKUP' ||\n      mappingJson.lookupTableName != null;\n\n    if (\n      mappingJson.mappingType &&\n      mappingJson.mappingType !== MappingType.NONE\n    ) {\n      this.deserializeFieldMappingFromType(mapping, mappingJson, cfg);\n      return mapping;\n    }\n\n    if (mappingJson.inputFieldGroup) {\n      MappingSerializer.deserializeInputFieldGroup(mappingJson, mapping, cfg);\n    } else {\n      const inputField = mappingJson.inputField;\n\n      if (inputField) {\n        for (const field of inputField) {\n          MappingSerializer.deserializeMappedField(mapping, field, true, cfg);\n        }\n      }\n      if (\n        mappingJson.outputField?.length &&\n        mappingJson.outputField.length > 1\n      ) {\n        mapping.transition.mode = TransitionMode.ONE_TO_MANY;\n      }\n      if (cfg.mappings) {\n        MappingUtil.updateMappedFieldsFromDocuments(mapping, cfg, true);\n      }\n    }\n\n    if (mappingJson.expression && mappingJson.expression.length > 0) {\n      mapping.transition.enableExpression = true;\n      mapping.transition.mode = TransitionMode.EXPRESSION;\n      mapping.transition.expression = new ExpressionModel(mapping, cfg);\n      mapping.transition.expression.insertText(mappingJson.expression);\n    }\n\n    for (const field of mappingJson.outputField) {\n      MappingSerializer.deserializeMappedField(mapping, field, false, cfg);\n    }\n    MappingUtil.updateMappedFieldsFromDocuments(mapping, cfg, false);\n\n    if (isLookupMapping) {\n      mapping.transition.lookupTableName = mappingJson.lookupTableName!;\n      mapping.transition.mode = TransitionMode.ENUM;\n    }\n\n    return mapping;\n  }\n\n  private static deserializeInputFieldGroup(\n    mappingJson: IMapping,\n    mapping: MappingModel,\n    cfg: ConfigModel\n  ) {\n    if (!mappingJson.inputFieldGroup) {\n      return;\n    }\n\n    if (\n      mappingJson.expression &&\n      mappingJson.inputFieldGroup!.fieldType === FieldType.COMPLEX\n    ) {\n      mapping.transition.expression.hasComplexField = true;\n    }\n    mapping.transition.mode = TransitionMode.MANY_TO_ONE;\n\n    MappingSerializer.addInputFieldGroupFields(\n      mappingJson.inputFieldGroup.field!,\n      mapping,\n      cfg\n    );\n    MappingUtil.updateMappedFieldsFromDocuments(mapping, cfg, true);\n\n    if (\n      mappingJson.inputFieldGroup.actions &&\n      mappingJson.inputFieldGroup.actions[0]?.delimiter\n    ) {\n      mapping.transition.delimiter = TransitionModel.delimiterToModel(\n        mappingJson.inputFieldGroup.actions[0]?.delimiter\n      )?.delimiter;\n      // Check for an InputFieldGroup containing a many-to-one action\n      const firstAction = mappingJson.inputFieldGroup.actions[0];\n      if (firstAction) {\n        // @deprecated Support legacy ADM files that have transformation-action-based expressions.\n        if (firstAction.Expression || firstAction['@type'] === 'Expression') {\n          mapping.transition.enableExpression = true;\n          mapping.transition.mode = TransitionMode.EXPRESSION;\n          mapping.transition.expression = new ExpressionModel(mapping, cfg);\n          const expr = firstAction.Expression\n            ? firstAction.Expression.expression\n            : firstAction['expression'];\n          mapping.transition.expression.insertText(expr);\n        } else {\n          mapping.transition.mode = TransitionMode.MANY_TO_ONE;\n          const parsedAction = this.parseAction(firstAction);\n          // TODO: check this non null operator\n          parsedAction.definition =\n            cfg.fieldActionService.getActionDefinitionForName(\n              parsedAction.name,\n              Multiplicity.MANY_TO_ONE\n            )!;\n          mapping.transition.transitionFieldAction = parsedAction;\n        }\n      }\n    }\n  }\n\n  static deserializeAudits(audits: IAudits, errorType: ErrorType): ErrorInfo[] {\n    const errors: ErrorInfo[] = [];\n    if (!audits?.audit) {\n      return errors;\n    }\n    for (const audit of audits.audit) {\n      const msg = audit.status + '[' + audit.path + ']: ' + audit.message;\n      errors.push(\n        new ErrorInfo({\n          message: msg,\n          level: ErrorLevel[audit.status],\n          scope: ErrorScope.MAPPING,\n          type: errorType,\n          object: audit.value,\n        })\n      );\n    }\n    return errors;\n  }\n\n  private static createInputFieldGroup(\n    field: IField[],\n    isComplex: boolean,\n    docId?: string,\n    path?: string\n  ): IFieldGroup {\n    const inputFieldGroup: IFieldGroup = {\n      jsonType: FIELD_GROUP_JSON_TYPE,\n      actions: [],\n      docId: docId,\n      path: path,\n      field,\n    };\n    if (isComplex) {\n      inputFieldGroup.fieldType = FieldType.COMPLEX;\n    }\n    return inputFieldGroup;\n  }\n\n  private static serializeDocuments(\n    docs: DocumentDefinition[],\n    mappingDefinition: MappingDefinition\n  ): IDataSource[] {\n    const serializedDocs: IDataSource[] = [];\n    for (const doc of docs) {\n      let serializedDoc: IDataSource = {\n        jsonType: DATA_SOURCE_JSON_TYPE,\n        id: doc.id,\n        name: doc.name,\n        description: doc.description,\n        uri: doc.uri,\n        dataSourceType: doc.isSource\n          ? DataSourceType.SOURCE\n          : DataSourceType.TARGET,\n      };\n      if (doc.characterEncoding != null) {\n        serializedDoc.characterEncoding = doc.characterEncoding;\n      }\n      if (doc.locale != null) {\n        serializedDoc.locale = doc.locale;\n      }\n      if (doc.type === DocumentType.XML || doc.type === DocumentType.XSD) {\n        const xmlDoc = serializedDoc as IXmlDataSource;\n        xmlDoc.jsonType = XML_DATA_SOURCE_JSON_TYPE;\n        const namespaces: IXmlNamespace[] = [];\n        for (const ns of doc.namespaces) {\n          namespaces.push({\n            alias: ns.alias,\n            uri: ns.uri,\n            locationUri: ns.locationUri,\n            targetNamespace: ns.isTarget,\n          });\n        }\n        if (!doc.isSource && mappingDefinition.templateText) {\n          xmlDoc.template = mappingDefinition.templateText;\n        }\n        xmlDoc.xmlNamespaces = { xmlNamespace: namespaces };\n      } else if (doc.type === DocumentType.JSON) {\n        const jsonDoc = serializedDoc as IJsonDataSource;\n        if (!doc.isSource && mappingDefinition.templateText) {\n          jsonDoc.template = mappingDefinition.templateText;\n        }\n        jsonDoc.jsonType = JSON_DATA_SOURCE_JSON_TYPE;\n      }\n\n      serializedDocs.push(serializedDoc);\n    }\n    return serializedDocs;\n  }\n\n  private static serializeConstants(docDef: DocumentDefinition): IConstant[] {\n    const constantDescriptions: IConstant[] = [];\n    for (const field of docDef.fields) {\n      // Use the constant value for the name.\n      constantDescriptions.push({\n        name: field.name,\n        value: field.value,\n        fieldType: field.type,\n      });\n    }\n    return constantDescriptions;\n  }\n\n  private static serializeProperties(docDef: DocumentDefinition): IProperty[] {\n    const propertyDescriptions: IProperty[] = [];\n    for (const field of docDef.fields) {\n      propertyDescriptions.push({\n        name: field.name,\n        fieldType: field.type,\n        scope: field.scope,\n        dataSourceType: docDef.isSource\n          ? DataSourceType.SOURCE\n          : DataSourceType.TARGET,\n      });\n    }\n    return propertyDescriptions;\n  }\n\n  private static serializeLookupTables(\n    mappingDefinition: MappingDefinition\n  ): ILookupTable[] {\n    const serializedTables: ILookupTable[] = [];\n    const tables = mappingDefinition.getTables();\n    if (!tables || !tables.length) {\n      return serializedTables;\n    }\n\n    for (const table of tables) {\n      const lookupEntries: ILookupEntry[] = [];\n      for (const entry of table.lookupEntry) {\n        const serializedEntry: ILookupEntry = {\n          sourceValue: entry.sourceValue,\n          sourceType: entry.sourceType,\n          targetValue: entry.targetValue,\n          targetType: entry.targetType,\n        };\n        lookupEntries.push(serializedEntry);\n      }\n\n      const serializedTable: ILookupTable = {\n        lookupEntry: lookupEntries,\n        name: table.name,\n      };\n      serializedTables.push(serializedTable);\n    }\n    return serializedTables;\n  }\n\n  /**\n   * Generate serialized meta-data representing a direct-reference instance collection preview.\n   *\n   * @param cfg\n   * @param mapping\n   * @param field\n   * @param serializedField\n   * @param fieldsJson\n   */\n  private static processCollectionPreview(\n    field: Field,\n    serializedField: IField,\n    fieldsJson: IField[]\n  ) {\n    serializedField.path = field.path.replace('<>', '<0>');\n    const collectionInstanceInputFieldGroup =\n      MappingSerializer.createInputFieldGroup(\n        [serializedField],\n        true,\n        field.docDef.id,\n        field.path\n      );\n    fieldsJson.push(collectionInstanceInputFieldGroup);\n  }\n\n  /**\n   * Serialize field action arguments.\n   *\n   * @param action\n   * @param cfg\n   */\n  private static processActionArguments(\n    action: FieldAction,\n    cfg: ConfigModel\n  ): { [key: string]: string } {\n    const actionArguments: { [key: string]: any } = {};\n    if (action === null) {\n      return actionArguments;\n    }\n    for (const argValue of action.argumentValues) {\n      if (\n        action.definition?.isCustom &&\n        ['methodName', 'className', 'name'].includes(argValue.name)\n      ) {\n        continue;\n      }\n      actionArguments[argValue.name] = argValue.value;\n      const argumentConfig: FieldActionArgument =\n        action.definition!.getArgumentForName(argValue.name);\n      if (argumentConfig == null) {\n        cfg.errorService.addError(\n          new ErrorInfo({\n            message: `Cannot find action argument ${argValue.name}: ${argValue.value}`,\n            level: ErrorLevel.ERROR,\n            scope: ErrorScope.APPLICATION,\n            type: ErrorType.INTERNAL,\n            object: action,\n          })\n        );\n        continue;\n      }\n      if (argumentConfig.type === 'INTEGER') {\n        actionArguments[argValue.name] = parseInt(argValue.value, 10);\n      }\n    }\n    return actionArguments;\n  }\n\n  private static serializeFields(\n    mapping: MappingModel,\n    isSource: boolean,\n    cfg: ConfigModel,\n    ignoreValue: boolean = false\n  ): IField[] {\n    let collectionInputFieldGroup = null;\n    let collectionInstanceInputFieldGroup = null;\n    const fields: MappedField[] = mapping.getMappedFields(isSource);\n    const fieldsJson: IField[] = [];\n\n    for (const mappedField of fields) {\n      if (!mappedField.field || mappedField.isPadField()) {\n        continue;\n      }\n\n      const field: Field = mappedField.field;\n      const serializedField: IField = {\n        jsonType: field.documentField.jsonType,\n        name: field.name,\n        path: field.path,\n        fieldType: field.type,\n        docId: field.docDef.id,\n      };\n\n      // The 'attribute' field only applies to XML.\n      if (field.documentField.jsonType?.includes(XML_MODEL_PACKAGE_PREFIX)) {\n        (serializedField as IXmlField).attribute = field.isAttribute;\n      }\n\n      // Only capture a value for preview mode and constants.\n      if (!ignoreValue || field.isConstant()) {\n        if (field.value) {\n          serializedField.value = field.value;\n        } else {\n          serializedField.value = '';\n        }\n      }\n\n      if (\n        field.docDef.type === DocumentType.XML ||\n        field.docDef.type === DocumentType.XSD\n      ) {\n        (serializedField as IXmlField).userCreated = field.userCreated;\n      } else if (\n        field.docDef.type === DocumentType.JAVA &&\n        !field.isPrimitive\n      ) {\n        (serializedField as IJavaField).className = field.classIdentifier;\n      }\n\n      if (field.isProperty()) {\n        serializedField.jsonType = PROPERTY_FIELD_JSON_TYPE;\n        serializedField.name = field.name;\n        (serializedField as IPropertyField).scope = field.scope;\n        serializedField.path = cfg.documentService.getPropertyPath(\n          field.scope,\n          field.name\n        );\n      } else if (field.isConstant()) {\n        serializedField.jsonType = CONSTANT_FIELD_JSON_TYPE;\n        serializedField.name = field.name;\n      } else if (field.enumeration) {\n        if (field.docDef.type === DocumentType.JSON) {\n          serializedField.jsonType = JSON_ENUM_FIELD_JSON_TYPE;\n        } else if (\n          field.docDef.type === DocumentType.XML ||\n          field.docDef.type === DocumentType.XSD\n        ) {\n          serializedField.jsonType = XML_ENUM_FIELD_JSON_TYPE;\n        } else {\n          serializedField.jsonType = JAVA_ENUM_FIELD_JSON_TYPE;\n        }\n      }\n\n      let includeIndexes: boolean =\n        mapping.getMappedFields(isSource).length > 1;\n      includeIndexes =\n        includeIndexes || (mapping.transition.isExpressionMode() && isSource);\n      if (includeIndexes) {\n        // TODO: check this non null operator\n        serializedField.index =\n          mapping.getIndexForMappedField(mappedField)! - 1;\n      }\n      if (field.docDef.type === DocumentType.CSV) {\n        (serializedField as ICsvField).column = field.column;\n      }\n\n      this.serializeActions(cfg, mappedField, serializedField);\n\n      // Check for collection field references.\n      if (isSource && field.isInCollection()) {\n        const collectionParentField = field.getCollectionParentField();\n\n        if (\n          !mapping.referenceFieldExists(\n            collectionParentField.docDef.id,\n            collectionParentField.path\n          )\n        ) {\n          if (!ignoreValue) {\n            MappingSerializer.processCollectionPreview(\n              field,\n              serializedField,\n              fieldsJson\n            );\n          } else {\n            fieldsJson.push(serializedField);\n            collectionInputFieldGroup = null;\n          }\n        } else {\n          // Establish/add to the inner reference field group.\n          if (collectionInstanceInputFieldGroup === null) {\n            collectionInstanceInputFieldGroup =\n              MappingSerializer.createInputFieldGroup(\n                [serializedField],\n                true,\n                collectionParentField.docDef.id,\n                collectionParentField.path\n              );\n          } else {\n            (collectionInstanceInputFieldGroup as IFieldGroup)!.field!.push(\n              serializedField\n            );\n            continue;\n          }\n          collectionInstanceInputFieldGroup.fieldType =\n            collectionParentField.documentField.fieldType;\n\n          // Preview-mode uses element/ item instance <0>.\n          if (!ignoreValue) {\n            collectionInstanceInputFieldGroup.path =\n              collectionParentField.path.replace('<>', '<0>');\n\n            // Establish one outer input field group for the preview collection.\n            if (collectionInputFieldGroup === null) {\n              collectionInputFieldGroup =\n                MappingSerializer.createInputFieldGroup(\n                  [collectionInstanceInputFieldGroup],\n                  true,\n                  collectionParentField.docDef.id,\n                  collectionParentField.path\n                );\n              collectionInstanceInputFieldGroup.fieldType =\n                collectionParentField.documentField.fieldType;\n              fieldsJson.push(collectionInputFieldGroup);\n            }\n          } else {\n            fieldsJson.push(collectionInstanceInputFieldGroup);\n          }\n        }\n\n        // Non-aggregate field reference.\n      } else {\n        fieldsJson.push(serializedField);\n        collectionInputFieldGroup = null;\n      }\n    }\n    return fieldsJson;\n  }\n\n  /**\n   * Walk the list of actions associated with the specified mapped field and serialize them into JSON.\n   *\n   * @param cfg\n   * @param mappedField\n   * @param serializedField\n   */\n  private static serializeActions(\n    cfg: ConfigModel,\n    mappedField: MappedField,\n    serializedField: IField\n  ): void {\n    if (mappedField.actions.length) {\n      const actions: IFieldAction[] = [];\n\n      for (const action of mappedField.actions) {\n        const actionJson = this.serializeAction(action, cfg);\n        if (actionJson) {\n          actions.push(actionJson);\n        }\n      }\n      if (actions.length > 0) {\n        serializedField.actions = actions;\n      }\n    }\n  }\n\n  private static serializeAction(\n    action: FieldAction,\n    cfg: ConfigModel\n  ): { [key: string]: any } {\n    let actionJson = MappingSerializer.processActionArguments(action, cfg);\n    actionJson['@type'] = action.definition!.name;\n    return actionJson;\n  }\n\n  private static deserializeDocs(\n    json: IAtlasMappingContainer,\n    mappingDefinition: MappingDefinition\n  ): DocumentDefinition[] | null {\n    const docs: DocumentDefinition[] = [];\n    if (!json || !json.AtlasMapping || !json.AtlasMapping.dataSource) {\n      return null;\n    }\n    for (const docRef of json.AtlasMapping.dataSource) {\n      const doc: DocumentDefinition = new DocumentDefinition();\n      doc.isSource = docRef.dataSourceType === 'SOURCE';\n      doc.uri = docRef.uri;\n      doc.id = docRef.id;\n      doc.name = docRef.name ? docRef.name : '';\n      doc.description = docRef.description;\n      const xmlDocRef = docRef as IXmlDataSource;\n      if (xmlDocRef.xmlNamespaces && xmlDocRef.xmlNamespaces.xmlNamespace) {\n        for (const svcNS of xmlDocRef.xmlNamespaces.xmlNamespace) {\n          const ns: NamespaceModel = new NamespaceModel();\n          ns.alias = svcNS.alias;\n          ns.uri = svcNS.uri;\n          ns.locationUri = svcNS.locationUri;\n          ns.isTarget = svcNS.targetNamespace ? svcNS.targetNamespace : false;\n          ns.createdByUser = true;\n          doc.namespaces.push(ns);\n        }\n      }\n      if (xmlDocRef.template) {\n        mappingDefinition.templateText = xmlDocRef.template;\n      }\n      docs.push(doc);\n    }\n    return docs;\n  }\n\n  private static deserializeMappings(\n    json: IAtlasMappingContainer,\n    cfg: ConfigModel\n  ): MappingModel[] {\n    const mappings: MappingModel[] = [];\n\n    if (!json.AtlasMapping.mappings?.mapping) {\n      return mappings;\n    }\n    for (const fieldMapping of json.AtlasMapping.mappings.mapping) {\n      // for backward compatibility\n      const isCollectionMapping =\n        fieldMapping.jsonType === COLLECTION_JSON_TYPE;\n      if (isCollectionMapping) {\n        const collection = fieldMapping as ICollection;\n        for (const innerFieldMapping of collection.mappings.mapping) {\n          mappings.push(\n            MappingSerializer.deserializeFieldMapping(\n              innerFieldMapping as IMapping,\n              cfg\n            )\n          );\n        }\n      } else {\n        mappings.push(\n          MappingSerializer.deserializeFieldMapping(\n            fieldMapping as IMapping,\n            cfg\n          )\n        );\n      }\n    }\n    return mappings;\n  }\n\n  /**\n   * @deprecated Deserialize a field mapping based on its mapping type.  This is deprecated in favor of\n   * concatenate/ split actions.\n   *\n   * @param mapping\n   * @param fieldMapping\n   * @param docRefs\n   * @param cfg\n   * @param ignoreValue\n   */\n  private static deserializeFieldMappingFromType(\n    mapping: MappingModel,\n    fieldMapping: IMapping,\n    cfg: ConfigModel\n  ): void {\n    if (fieldMapping.mappingType === 'SEPARATE') {\n      mapping.transition.mode = TransitionMode.ONE_TO_MANY;\n      mapping.transition.transitionFieldAction = FieldAction.create(\n        cfg.fieldActionService.getActionDefinitionForName(\n          'Split',\n          Multiplicity.ONE_TO_MANY\n        )!\n      ); // TODO: check this non null operator\n      mapping.transition.transitionFieldAction.setArgumentValue(\n        'delimiter',\n        fieldMapping.delimiter!\n      );\n    } else if (fieldMapping.mappingType === 'LOOKUP') {\n      mapping.transition.mode = TransitionMode.ENUM;\n      mapping.transition.lookupTableName = fieldMapping.lookupTableName!;\n    } else if (fieldMapping.mappingType === 'COMBINE') {\n      mapping.transition.mode = TransitionMode.MANY_TO_ONE;\n      mapping.transition.transitionFieldAction = FieldAction.create(\n        cfg.fieldActionService.getActionDefinitionForName(\n          'Concatenate',\n          Multiplicity.MANY_TO_ONE\n        )!\n      ); // TODO: check this non null operator\n      mapping.transition.transitionFieldAction.setArgumentValue(\n        'delimiter',\n        fieldMapping.delimiter!\n      );\n    } else {\n      mapping.transition.mode = TransitionMode.ONE_TO_ONE;\n    }\n\n    for (const field of fieldMapping.inputField!) {\n      MappingSerializer.deserializeMappedField(mapping, field, true, cfg);\n    }\n    for (const field of fieldMapping.outputField) {\n      MappingSerializer.deserializeMappedField(mapping, field, false, cfg);\n    }\n    MappingUtil.updateMappedFieldsFromDocuments(mapping, cfg, true);\n  }\n\n  private static deserializeConstants(\n    jsonMapping: IAtlasMappingContainer\n  ): Field[] {\n    const fields: Field[] = [];\n    if (!jsonMapping?.AtlasMapping?.constants?.constant) {\n      return fields;\n    }\n    for (const constant of jsonMapping.AtlasMapping.constants.constant) {\n      const field: Field = new Field();\n      field.name = constant.name;\n      field.path = FIELD_PATH_SEPARATOR + field.name;\n      field.value = constant.value;\n      field.type = constant.fieldType;\n      field.userCreated = true;\n      field.isAttribute = false;\n      fields.push(field);\n    }\n    return fields;\n  }\n\n  private static deserializeProperties(\n    cfg: ConfigModel,\n    jsonMapping: IAtlasMappingContainer,\n    isSource: boolean\n  ): Field[] {\n    const fields: Field[] = [];\n    if (!jsonMapping?.AtlasMapping?.properties?.property) {\n      return fields;\n    }\n\n    // Source and target properties are mixed in the 'property' JSON array.\n    for (const property of jsonMapping.AtlasMapping.properties.property) {\n      if (\n        (isSource && property.dataSourceType === DataSourceType.TARGET) ||\n        (!isSource && property.dataSourceType !== DataSourceType.TARGET)\n      ) {\n        continue;\n      }\n      const field: Field = new Field();\n      field.name = property.name;\n      field.type = property.fieldType;\n      field.scope = property.scope;\n      field.path = cfg.documentService.getPropertyPath(field.scope, field.name);\n      field.userCreated = true;\n      field.isAttribute = false;\n      fields.push(field);\n    }\n    return fields;\n  }\n\n  private static deserializeLookupTables(\n    jsonMapping: IAtlasMappingContainer\n  ): LookupTable[] {\n    const tables: LookupTable[] = [];\n    if (\n      !jsonMapping ||\n      !jsonMapping.AtlasMapping ||\n      !jsonMapping.AtlasMapping.lookupTables ||\n      !jsonMapping.AtlasMapping.lookupTables.lookupTable\n    ) {\n      return tables;\n    }\n    for (const table of jsonMapping.AtlasMapping.lookupTables.lookupTable) {\n      const parsedTable: LookupTable = new LookupTable();\n      parsedTable.name = table.name;\n      for (const entry of table.lookupEntry) {\n        const parsedEntry: LookupTableEntry = new LookupTableEntry();\n        parsedEntry.sourceValue = entry.sourceValue;\n        parsedEntry.sourceType = entry.sourceType;\n        parsedEntry.targetValue = entry.targetValue;\n        parsedEntry.targetType = entry.targetType;\n        parsedTable.lookupEntry.push(parsedEntry);\n      }\n      tables.push(parsedTable);\n    }\n    return tables;\n  }\n\n  /**\n   * Walk the list of field actions found in the parsed data and restore them to the live mapping.\n   *\n   * @param field\n   * @param mappedField\n   * @param mapping\n   * @param cfg\n   * @param isSource\n   */\n  private static deserializeFieldActions(\n    field: IField,\n    mappedField: MappedField,\n    mapping: MappingModel,\n    cfg: ConfigModel,\n    isSource: boolean\n  ): void {\n    if (!field.actions) {\n      return;\n    }\n\n    for (const action of field.actions) {\n      const parsedAction = this.parseAction(action);\n      if (action.name === 'CustomAction') {\n        parsedAction.definition =\n          cfg.fieldActionService.getActionDefinitionForName(\n            action.argumentValues[0].value,\n            Multiplicity.ONE_TO_ONE\n          );\n      } else {\n        parsedAction.definition =\n          cfg.fieldActionService.getActionDefinitionForName(parsedAction.name)!;\n      }\n      if (parsedAction.definition == null) {\n        cfg.errorService.addError(\n          new ErrorInfo({\n            message: `Could not find field action definition for action '${action.name}'`,\n            level: ErrorLevel.ERROR,\n            scope: ErrorScope.APPLICATION,\n            type: ErrorType.INTERNAL,\n          })\n        );\n        continue;\n      }\n      parsedAction.definition.populateFieldAction(parsedAction);\n\n      /** @deprecated Support old-style transformation-action-based expressions. */\n      if (isSource && (action.Expression || action['@type'] === 'Expression')) {\n        mapping.transition.enableExpression = true;\n        mapping.transition.expression = new ExpressionModel(mapping, cfg);\n        const expr = action.Expression\n          ? action.Expression.expression\n          : action['expression'];\n        mapping.transition.expression.insertText(expr);\n      } else if (\n        isSource &&\n        parsedAction.definition &&\n        [Multiplicity.ONE_TO_MANY, Multiplicity.MANY_TO_ONE].includes(\n          parsedAction.definition.multiplicity\n        )\n      ) {\n        if (mapping.transition.transitionFieldAction) {\n          cfg.logger!\n            .warn(`Duplicated multiplicity transformations were detected: \\\n              ${mapping.transition.transitionFieldAction.name} is being overwritten by ${parsedAction.name} ...`);\n        }\n        mapping.transition.transitionFieldAction = parsedAction;\n      } else {\n        mappedField.actions.push(parsedAction);\n      }\n    }\n  }\n\n  private static deserializeMappedField(\n    mapping: MappingModel,\n    field: IField,\n    isSource: boolean,\n    cfg: ConfigModel\n  ): MappedField | null {\n    if (MappingUtil.isConstantField(field)) {\n      if (field.docId) {\n        cfg.constantDoc.id = field.docId;\n      } else {\n        field.docId = cfg.constantDoc.id;\n      }\n    } else if (MappingUtil.isPropertyField(field)) {\n      const doc = isSource ? cfg.sourcePropertyDoc : cfg.targetPropertyDoc;\n      if (field.docId) {\n        doc.id = field.docId;\n      } else {\n        field.docId = doc.id;\n      }\n      field.path = cfg.documentService.getPropertyPath(\n        (field as IPropertyField).scope,\n        field.name!\n      );\n    } else if (!field.docId) {\n      cfg.errorService.addError(\n        new ErrorInfo({\n          message: 'Parsed mapping field does not have document id, dropping.',\n          level: ErrorLevel.ERROR,\n          scope: ErrorScope.APPLICATION,\n          type: ErrorType.INTERNAL,\n          object: field,\n        })\n      );\n      return null;\n    }\n    const mappedField: MappedField = new MappedField();\n    mappedField.mappingField = field;\n    mapping.addMappedField(mappedField, isSource);\n    if (field.actions) {\n      this.deserializeFieldActions(field, mappedField, mapping, cfg, isSource);\n    }\n    return mappedField;\n  }\n\n  private static parseAction(action: IFieldAction): FieldAction {\n    if (action['@type']) {\n      return MappingSerializer.parseNewAction(action);\n    } else {\n      // TODO: check this non null operator\n      return MappingSerializer.parseOldAction(action)!;\n    }\n  }\n\n  /**\n   * @deprecated actionName: {param:...} style has been deprecated. Use {`@type`: actionName} style action description.\n   */\n  private static parseOldAction(action: IFieldAction): FieldAction | null {\n    for (const actionName of Object.keys(action)) {\n      if (!action.hasOwnProperty(actionName)) {\n        return null;\n      }\n      const parsedAction: FieldAction = new FieldAction();\n      parsedAction.name = actionName;\n      const actionParams: any = action[actionName];\n      if (actionParams) {\n        for (const paramName of Object.keys(actionParams)) {\n          if (!actionParams.hasOwnProperty(paramName)) {\n            return null;\n          }\n          const parsedArgumentValue: FieldActionArgumentValue =\n            new FieldActionArgumentValue();\n          parsedArgumentValue.name = paramName;\n          let value = actionParams[paramName];\n          value = value == null ? null : value.toString();\n          parsedArgumentValue.value = value;\n          parsedAction.argumentValues.push(parsedArgumentValue);\n        }\n      }\n      return parsedAction;\n    }\n    return null;\n  }\n\n  private static parseNewAction(action: IFieldAction): FieldAction {\n    const parsedAction: FieldAction = new FieldAction();\n    parsedAction.name = action['@type']!;\n    for (const [key, value] of Object.entries(action)) {\n      if ('@type' === key) {\n        continue;\n      }\n      const parsedArgumentValue: FieldActionArgumentValue =\n        new FieldActionArgumentValue();\n      parsedArgumentValue.name = key;\n      const valueString = value == null ? null : (value as any).toString();\n      parsedArgumentValue.value = valueString;\n      parsedAction.argumentValues.push(parsedArgumentValue);\n    }\n    return parsedAction;\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport {\n  CollectionType,\n  DocumentType,\n  FIELD_PATH_SEPARATOR,\n  FieldType,\n  InspectionType,\n} from '../contracts/common';\nimport {\n  ErrorInfo,\n  ErrorLevel,\n  ErrorScope,\n  ErrorType,\n} from '../models/error.model';\nimport {\n  HTTP_STATUS_NO_CONTENT,\n  constantTypes,\n  propertyTypes,\n} from '../common/config.types';\nimport { Observable, Subscription } from 'rxjs';\n\nimport { CommonUtil } from '../utils/common-util';\nimport { ConfigModel } from '../models/config.model';\nimport { DocumentDefinition } from '../models/document-definition.model';\nimport { DocumentInspectionModel } from '../models/inspect/document-inspection.model';\nimport { DocumentInspectionUtil } from '../utils/document-inspection-util';\nimport { Field } from '../models/field.model';\nimport { Guid } from '../utils';\nimport ky from 'ky';\n\n/**\n * Manages Document object lifecycle. Import a Document source\n * such as JSON/XML schema/instance, request an inspection to the backend,\n * then enable it for mapping by consuming inspection result in UI.\n */\nexport class DocumentManagementService {\n  cfg!: ConfigModel;\n\n  private mappingUpdatedSubscription!: Subscription;\n  private MAX_SEARCH_MATCH = 10000;\n\n  constructor(private api: typeof ky) {}\n\n  initialize(): void {\n    this.mappingUpdatedSubscription =\n      this.cfg.mappingService.mappingUpdated$.subscribe(() => {\n        for (const d of this.cfg.getAllDocs()) {\n          if (d.initialized) {\n            d.updateFromMappings(this.cfg.mappings!); // TODO: check this non null operator\n          }\n        }\n      });\n  }\n\n  uninitialize(): void {\n    this.mappingUpdatedSubscription.unsubscribe();\n  }\n\n  /**\n   * Request Document inspection for each {@link DocumentDefinition} object\n   * stored in {@link ConfigModel} and populate it back with the inspection result.\n   *\n   * @returns\n   */\n  inspectDocuments(): Observable<DocumentDefinition> {\n    return new Observable<DocumentDefinition>((observer) => {\n      for (const docDef of this.cfg.getAllDocs()) {\n        if (\n          docDef === this.cfg.sourcePropertyDoc ||\n          docDef === this.cfg.targetPropertyDoc ||\n          docDef === this.cfg.constantDoc\n        ) {\n          docDef.initialized = true;\n          continue;\n        }\n\n        const inspectionModel = DocumentInspectionUtil.fromDocumentDefinition(\n          this.cfg,\n          docDef\n        );\n\n        // TODO: check this non null operator\n        this.inspectDocument(inspectionModel)\n          .then(() => {\n            observer.next(docDef);\n          })\n          .catch((error: any) => {\n            observer.error(error);\n          });\n      }\n    });\n  }\n\n  private inspectDocument(\n    inspectionModel: DocumentInspectionModel\n  ): Promise<DocumentDefinition> {\n    return new Promise<DocumentDefinition>((resolve, reject) => {\n      const docDef = inspectionModel.doc;\n      if (docDef.inspectionResult) {\n        const responseJson: any = JSON.parse(docDef.inspectionResult);\n        inspectionModel.parseResponse(responseJson);\n        docDef.initializeFromFields();\n        docDef.initialized = true;\n        resolve(docDef);\n        return;\n      }\n\n      if (!inspectionModel.isOnlineInspectionCapable()) {\n        docDef.initialized = true;\n        docDef.errorOccurred = true;\n        reject(docDef);\n        return;\n      }\n\n      const request = inspectionModel.request;\n      this.cfg.logger!.debug(\n        `Document Inspection Request: ${JSON.stringify(request.options.json)}`\n      );\n      this.api\n        .post(request.url, request.options)\n        .json()\n        .then((responseJson: any) => {\n          this.cfg.logger!.debug(\n            `Document Inspection Response: ${JSON.stringify(responseJson)}`\n          );\n          inspectionModel.parseResponse(responseJson);\n          docDef.initializeFromFields();\n          docDef.initialized = true;\n          resolve(docDef);\n        })\n        .catch((error: any) => {\n          this.cfg.errorService.addBackendError(\n            `Failed to inspect Document: ${docDef.name}(${docDef.id})`,\n            error\n          );\n          reject(error);\n        });\n    });\n  }\n\n  getLibraryClassNames(): Promise<string[]> {\n    return new Promise<string[]>((resolve, reject) => {\n      if (typeof this.cfg.initCfg.baseMappingServiceUrl === 'undefined') {\n        resolve([]);\n        return;\n      }\n      const url: string =\n        this.cfg.initCfg.baseMappingServiceUrl + 'library/list';\n      this.cfg.logger!.debug('Library Class List Service Request: ' + url);\n      this.api\n        .get(url)\n        .json()\n        .then((body: any) => {\n          this.cfg.logger!.debug(\n            `Library Class List Service Response: ${JSON.stringify(body)}`\n          );\n          const classNames: string[] = body.ArrayList;\n          resolve(classNames);\n        })\n        .catch((error: any) => {\n          if (error.status !== HTTP_STATUS_NO_CONTENT) {\n            this.cfg.errorService.addBackendError(\n              'Error occurred while accessing the user uploaded JARs from the runtime service.',\n              error\n            );\n            reject(error);\n          } else {\n            resolve([]);\n          }\n        });\n    });\n  }\n\n  /**\n   * Import user uploaded Document source such as JSON/XML schema/instance, assign\n   * a unique Document ID with using GUID and delegate to {@link addNonJavaDocument}\n   * to make it available  as a Document for mappings.\n   * @see addNonJavaDocument\n   *\n   * @param selectedFile - user selected file\n   * @param isSource - true is source panel, false is target\n   * @param isSchema- user specified instance/ schema (true === schema)\n   * @param inspectionParameters - CSV parameters\n   *\n   */\n  importNonJavaDocument(\n    selectedFile: File,\n    isSource: boolean,\n    isSchema: boolean,\n    inspectionParameters?: { [key: string]: string }\n  ): Promise<boolean> {\n    return new Promise<boolean>(async (resolve) => {\n      let fileText = '';\n      const reader = new FileReader();\n\n      this.cfg.errorService.clearValidationErrors();\n\n      const userFileComps = selectedFile.name.split('.');\n      const userFile = userFileComps.slice(0, -1).join('.');\n      const userFileSuffix: string =\n        userFileComps[userFileComps.length - 1].toUpperCase();\n\n      // Wait for the async read of the selected ascii document to be completed.\n      try {\n        fileText = await CommonUtil.readFile(selectedFile, reader);\n      } catch (error) {\n        this.cfg.errorService.addError(\n          new ErrorInfo({\n            message: 'Unable to import the specified schema document.',\n            level: ErrorLevel.ERROR,\n            scope: ErrorScope.APPLICATION,\n            type: ErrorType.USER,\n            object: error,\n          })\n        );\n        resolve(false);\n        return;\n      }\n\n      let docType = undefined;\n      try {\n        docType = userFileSuffix as DocumentType;\n        if (!docType) {\n          throw new Error(docType);\n        }\n      } catch (error) {\n        this.handleError(\n          'Unrecognized document suffix (' + userFileSuffix + ')'\n        );\n        resolve(false);\n        return;\n      }\n      this.addNonJavaDocument(\n        fileText,\n        userFile + '-' + Guid.newGuid(),\n        userFile,\n        docType,\n        isSchema ? InspectionType.SCHEMA : InspectionType.INSTANCE,\n        isSource,\n        inspectionParameters\n      ).then((value) => {\n        if (!value) {\n          resolve(false);\n          return;\n        }\n        this.cfg.errorService.addError(\n          new ErrorInfo({\n            message: `${selectedFile.name} ${userFileSuffix} import complete.`,\n            level: ErrorLevel.INFO,\n            scope: ErrorScope.APPLICATION,\n            type: ErrorType.USER,\n          })\n        );\n        resolve(true);\n      });\n    });\n  }\n\n  /**\n   * Import a Java class as a Document source and delegate to {@link addJavaDocument}\n   * to make it available  as a Document for mappings.\n   * JAR file(s) have to be imported and be available in the backend classpath\n   * before doing this.\n   * @see addJavaDocument\n   * @todo https://github.com/atlasmap/atlasmap/issues/2919\n   * A unique Document ID should be assigned with using GUID.\n   *\n   * @param className\n   * @param isSource\n   * @param collectionType\n   * @param collectionClassName\n   */\n  importJavaDocument(\n    className: string,\n    isSource: boolean,\n    collectionType = CollectionType.NONE,\n    collectionClassName?: string\n  ): Promise<boolean> {\n    this.cfg.errorService.clearValidationErrors();\n    return this.addJavaDocument(\n      className,\n      isSource,\n      collectionType,\n      collectionClassName\n    );\n  }\n  /**\n   * Add non-Java Document object into the {@link ConfigModel} store and\n   * delegate to {@link doAddDocument}.\n   * @see doAddDocument\n   *\n   * @param docBody\n   * @param docId\n   * @param docName\n   * @param docType\n   * @param inspectionType\n   * @param isSource\n   * @param parameters\n   */\n  addNonJavaDocument(\n    docBody: any,\n    docId: string,\n    docName: string,\n    docType: DocumentType,\n    inspectionType: InspectionType,\n    isSource: boolean,\n    parameters?: { [key: string]: string }\n  ): Promise<boolean> {\n    const inspectionModel = DocumentInspectionUtil.fromNonJavaProperties(\n      this.cfg,\n      docId,\n      docName,\n      docType,\n      inspectionType,\n      docBody,\n      isSource,\n      parameters\n    );\n    return this.doAddDocument(inspectionModel);\n  }\n\n  /**\n   * Add Java Document object into the {@link ConfigModel} store and\n   * delegate to {@link doAddDocument}.\n   * @see doAddDocument\n   *\n   * @param className\n   * @param isSource\n   * @param collectionType {@link CollectionType}\n   * @param collectionClassName\n   */\n  addJavaDocument(\n    className: string,\n    isSource: boolean,\n    collectionType: CollectionType = CollectionType.NONE,\n    collectionClassName?: string\n  ): Promise<boolean> {\n    const inspectionModel = DocumentInspectionUtil.fromJavaProperties(\n      this.cfg,\n      className,\n      isSource,\n      collectionType,\n      collectionClassName\n    );\n    return this.doAddDocument(inspectionModel);\n  }\n\n  /**\n   * An utility method to look at the {@link DocumentType} passed in as an argument\n   * and see if it's a Java or non-Java Document, then delegate to\n   * {@link addJavaDocument} or {@link addNonJavaDocument}.\n   *\n   * @todo https://github.com/atlasmap/atlasmap/issues/2918\n   * {@link CollectionType} and collectionClassName has to be persisted into digest\n   * so it could be restored here\n   */\n  addDocument(\n    docBody: any,\n    docId: string,\n    docName: string,\n    docType: DocumentType,\n    inspectionType: InspectionType,\n    isSource: boolean,\n    parameters?: { [key: string]: string }\n  ): Promise<boolean> {\n    if (docType === DocumentType.JAVA) {\n      return this.addJavaDocument(docId, isSource);\n    }\n    return this.addNonJavaDocument(\n      docBody,\n      docId,\n      docName,\n      docType,\n      inspectionType,\n      isSource,\n      parameters\n    );\n  }\n\n  /**\n   * Add or replace the {@link DocumentDefinition} object stored in {@link ConfigModel}\n   * and delegate to {@link inspectDocument} to perform an inspection.\n   * Then it gets available for mapping in the canvas.\n   *\n   * @param inspectionModel {@link DocumentInspectionModel}\n   * @returns\n   */\n  private doAddDocument(\n    inspectionModel: DocumentInspectionModel\n  ): Promise<boolean> {\n    return new Promise<boolean>(async (resolve) => {\n      let docdef = inspectionModel.doc;\n      const isSource = docdef.isSource;\n\n      this.inspectDocument(inspectionModel)\n        .then(async (doc: DocumentDefinition) => {\n          if (doc.fields.length === 0) {\n            if (isSource) {\n              CommonUtil.removeItemFromArray(docdef, this.cfg.sourceDocs);\n            } else {\n              CommonUtil.removeItemFromArray(docdef, this.cfg.targetDocs);\n            }\n          }\n          docdef.updateFromMappings(this.cfg.mappings!);\n          resolve(true);\n        })\n        .catch(() => {\n          resolve(false);\n        });\n    });\n  }\n\n  private handleError(message: string, error?: any): void {\n    this.cfg.errorService.addError(\n      new ErrorInfo({\n        message: message,\n        level: ErrorLevel.ERROR,\n        scope: ErrorScope.APPLICATION,\n        type: ErrorType.INTERNAL,\n        object: error,\n      })\n    );\n  }\n\n  /**\n   * Filter Document fields that is shwon in a Source/Target Document tree.\n   * @todo Consolidate with expression field search and Document Details field\n   * search - https://github.com/atlasmap/atlasmap/issues/603\n   * @param searchFilter\n   * @param isSource\n   */\n  filterDocumentFields(searchFilter: string | undefined, isSource: boolean) {\n    const cfg = ConfigModel.getConfig();\n\n    let searchResultsExist = false;\n    const searchIsEmpty: boolean =\n      undefined === searchFilter || '' === searchFilter;\n    const defaultVisibility: boolean = searchIsEmpty;\n    for (const docDef of cfg.getDocs(isSource)) {\n      docDef.visibleInCurrentDocumentSearch = defaultVisibility;\n      for (const field of docDef.getAllFields()) {\n        field.visibleInCurrentDocumentSearch = defaultVisibility;\n      }\n      if (!searchIsEmpty) {\n        let searchFieldCount = 0;\n        for (const field of docDef.getAllFields()) {\n          // Skip this field if it's already determined to be visible.\n          if (field.visibleInCurrentDocumentSearch && !field.collapsed) {\n            continue;\n          }\n          field.visibleInCurrentDocumentSearch = field.name\n            .toLowerCase()\n            .includes(searchFilter!.toLowerCase());\n          searchResultsExist =\n            searchResultsExist || field.visibleInCurrentDocumentSearch;\n\n          // The current field matches the user-specified filter.\n          if (field.visibleInCurrentDocumentSearch) {\n            docDef.visibleInCurrentDocumentSearch = true;\n            let parentField = field.parentField;\n\n            // Direct lineage is then visible.\n            while (\n              parentField != null &&\n              !parentField.visibleInCurrentDocumentSearch\n            ) {\n              parentField.visibleInCurrentDocumentSearch = true;\n              parentField.collapsed = false;\n              parentField = parentField.parentField;\n              searchFieldCount++;\n            }\n\n            // All fields below the matching field are also visible.\n            try {\n              this.markChildrenVisible(field);\n            } catch (error) {\n              cfg.errorService.addError(\n                new ErrorInfo({\n                  message: error.message,\n                  level: ErrorLevel.INFO,\n                  scope: ErrorScope.APPLICATION,\n                  type: ErrorType.USER,\n                })\n              );\n              break;\n            }\n\n            // The total number of matches is limited to allow the UI to perform.\n            if (searchFieldCount++ >= this.MAX_SEARCH_MATCH) {\n              cfg.errorService.addError(\n                new ErrorInfo({\n                  message:\n                    'The maximum number of fields matching the specified search filter has beeen exceeded  ' +\n                    'Try using a longer field filter.',\n                  level: ErrorLevel.INFO,\n                  scope: ErrorScope.APPLICATION,\n                  type: ErrorType.USER,\n                })\n              );\n              break;\n            }\n          }\n        }\n      }\n    }\n    cfg.mappingService.notifyLineRefresh();\n  }\n\n  private markChildrenVisible(field: Field): void {\n    field.visibleInCurrentDocumentSearch = true;\n    field.collapsed = false;\n    // if (this.searchFieldCount++ >= this.maxSearchMatch) {\n    //   throw new Error('The maximum number of fields matching the specified search filter has beeen exceeded  ' +\n    //     'Try using a longer field filter.');\n    // }\n    for (const childField of field.children) {\n      this.markChildrenVisible(childField);\n    }\n  }\n\n  /**\n   * Create a constant field.\n   * @param constName\n   * @param constValue\n   * @param constType\n   * @param addToActiveMapping\n   */\n  createConstant(\n    constName: string,\n    constValue: string,\n    constType: string,\n    addToActiveMapping?: boolean\n  ): void {\n    let field = this.cfg.constantDoc.getField(FIELD_PATH_SEPARATOR + constName);\n    if (!field) {\n      field = new Field();\n    }\n    field.name = constName;\n    field.path = FIELD_PATH_SEPARATOR + constName;\n    field.value = constValue;\n    field.type = FieldType[constType as keyof typeof FieldType];\n    field.docDef = this.cfg.constantDoc;\n    field.userCreated = true;\n    this.cfg.constantDoc.addField(field);\n    if (addToActiveMapping) {\n      this.cfg.mappingService.addFieldToActiveMapping(field);\n    }\n    this.cfg.mappingService.notifyMappingUpdated();\n  }\n\n  /**\n   * Delete a constant field.\n   * @param constName\n   */\n  deleteConstant(constName: string): void {\n    const field = this.cfg.constantDoc.getField(\n      FIELD_PATH_SEPARATOR + constName\n    );\n    if (!field) {\n      return;\n    }\n    this.cfg.mappingService.removeFieldFromAllMappings(field);\n    this.cfg.constantDoc.removeField(field);\n    const activeMapping = this.cfg.mappings?.activeMapping;\n    const expression = activeMapping?.transition?.expression;\n    if (activeMapping && expression) {\n      expression.updateFieldReference(activeMapping);\n    }\n    this.cfg.mappingService.notifyMappingUpdated();\n  }\n\n  /**\n   * Edit a constant field. Look for an existing constant field with the specified name\n   * and update the properties. If {@link origName} is specified and different from\n   * {@link constName}, the name of the constant field will be changed.\n   * @param constName\n   * @param constValue\n   * @param constType\n   * @param origName\n   */\n  editConstant(\n    constName: string,\n    constValue: string,\n    constType: string,\n    origName?: string\n  ): void {\n    let constFieldName = origName ? origName : constName;\n    let field = this.cfg.constantDoc.getField(\n      FIELD_PATH_SEPARATOR + constFieldName\n    );\n    if (!field) {\n      return;\n    }\n    if (constType.length > 0) {\n      field.type = FieldType[constType as keyof typeof FieldType];\n    }\n    if (constValue.length > 0) {\n      field.value = constValue;\n    }\n    if (origName && origName !== constName) {\n      field.name = constName;\n      field.path = FIELD_PATH_SEPARATOR + constName;\n      this.cfg.constantDoc.updateField(field, FIELD_PATH_SEPARATOR + constName);\n    }\n    this.cfg.mappingService.notifyMappingUpdated();\n  }\n\n  /**\n   * Get a {@link FieldType} of the constant field.\n   * @param constName\n   */\n  getConstantType(constName: string): FieldType {\n    const cfg = ConfigModel.getConfig();\n    const field = cfg.constantDoc.getField(FIELD_PATH_SEPARATOR + constName);\n    if (!field) {\n      return FieldType.NONE;\n    }\n    return field.type;\n  }\n\n  /**\n   * Get an index of the constant field type.\n   * @param constName\n   */\n  getConstantTypeIndex(constName: string): number {\n    const cfg = ConfigModel.getConfig();\n    const field = cfg.constantDoc.getField(FIELD_PATH_SEPARATOR + constName);\n    if (!field) {\n      return 0;\n    }\n    for (let i = 0; i < constantTypes.length; i++) {\n      if (constantTypes[i].includes(field.type)) {\n        return i;\n      }\n    }\n    return 0;\n  }\n\n  /**\n   * Create a property field.\n   * @param propName\n   * @param propType\n   * @param propScope\n   * @param isSource\n   * @param addToActiveMapping\n   */\n  createProperty(\n    propName: string,\n    propType: string,\n    propScope: string,\n    isSource: boolean,\n    addToActiveMapping?: boolean\n  ): void {\n    const cfg = ConfigModel.getConfig();\n    const path = this.getPropertyPath(propScope, propName);\n    let field = isSource\n      ? cfg.sourcePropertyDoc.getField(path)\n      : cfg.targetPropertyDoc.getField(path);\n    if (!field) {\n      field = new Field();\n    }\n    field.name = propName;\n    field.type = FieldType[propType as keyof typeof FieldType];\n    field.scope = propScope;\n    field.path = path;\n    field.userCreated = true;\n\n    if (isSource) {\n      field.docDef = cfg.sourcePropertyDoc;\n      cfg.sourcePropertyDoc.addField(field);\n    } else {\n      field.docDef = cfg.targetPropertyDoc;\n      cfg.targetPropertyDoc.addField(field);\n    }\n    if (addToActiveMapping) {\n      this.cfg.mappingService.addFieldToActiveMapping(field);\n    }\n    cfg.mappingService.notifyMappingUpdated();\n  }\n\n  /**\n   * Delete a property field.\n   * @param propName\n   * @param propScope\n   * @param isSource\n   */\n  deleteProperty(propName: string, propScope: string, isSource: boolean): void {\n    const path = this.getPropertyPath(propScope, propName);\n    const field = isSource\n      ? this.cfg.sourcePropertyDoc.getField(path)\n      : this.cfg.targetPropertyDoc.getField(path);\n    if (!field) {\n      return;\n    }\n    this.cfg.mappingService.removeFieldFromAllMappings(field);\n    if (isSource) {\n      this.cfg.sourcePropertyDoc.removeField(field);\n    } else {\n      this.cfg.targetPropertyDoc.removeField(field);\n    }\n    const activeMapping = this.cfg.mappings?.activeMapping;\n    const expression = activeMapping?.transition?.expression;\n    if (activeMapping && expression) {\n      expression.updateFieldReference(activeMapping);\n    }\n    this.cfg.mappingService.notifyMappingUpdated();\n  }\n\n  /**\n   * Edit a property field. When editing a property, the propName/propScope\n   * is needed to fetch the existing field.  The newName and newScope may or\n   * may not be specified.\n   *\n   * @param propName\n   * @param propType\n   * @param propScope\n   * @param isSource\n   * @param newName\n   * @param newScope\n   */\n  editProperty(\n    propName: string,\n    propType: string,\n    propScope: string,\n    isSource: boolean,\n    newName?: string,\n    newScope?: string\n  ): void {\n    let oldPath = this.getPropertyPath(propScope, propName);\n    let field = isSource\n      ? this.cfg.sourcePropertyDoc.getField(oldPath)\n      : this.cfg.targetPropertyDoc.getField(oldPath);\n    if (!field) {\n      return;\n    }\n    if (newName) {\n      field.name = newName;\n    }\n    if (newScope) {\n      field.scope = newScope;\n    }\n    field.type = FieldType[propType as keyof typeof FieldType];\n    field.path = this.getPropertyPath(field.scope, field.name!);\n\n    if (isSource) {\n      this.cfg.sourcePropertyDoc.updateField(field, oldPath);\n    } else {\n      this.cfg.targetPropertyDoc.updateField(field, oldPath);\n    }\n    this.cfg.mappingService.notifyMappingUpdated();\n  }\n\n  /**\n   * Get a {@link FieldType} of the property field.\n   * @param propName\n   * @param propScope\n   * @param isSource\n   */\n  getPropertyType(\n    propName: string,\n    propScope: string,\n    isSource: boolean\n  ): FieldType {\n    const field = isSource\n      ? this.cfg.sourcePropertyDoc.getField(\n          this.getPropertyPath(propScope, propName)\n        )\n      : this.cfg.targetPropertyDoc.getField(\n          this.getPropertyPath(propScope, propName)\n        );\n    if (!field) {\n      return FieldType.NONE;\n    }\n    return field.type;\n  }\n\n  /**\n   * Get an index of the property field type.\n   * @param propName\n   * @param propScope\n   * @param isSource\n   */\n  getPropertyTypeIndex(\n    propName: string,\n    propScope: string,\n    isSource: boolean\n  ): number {\n    const field = isSource\n      ? this.cfg.sourcePropertyDoc.getField(\n          this.getPropertyPath(propScope, propName)\n        )\n      : this.cfg.targetPropertyDoc.getField(\n          this.getPropertyPath(propScope, propName)\n        );\n    if (!field) {\n      return 0;\n    }\n    for (let i = 0; i < propertyTypes.length; i++) {\n      if (propertyTypes[i].includes(field.type)) {\n        return i;\n      }\n    }\n    return 0;\n  }\n\n  getPropertyPath(scope: string | undefined | null, name: string) {\n    let answer = FIELD_PATH_SEPARATOR;\n    if (scope && scope.length > 0) {\n      answer += scope + FIELD_PATH_SEPARATOR;\n    }\n    answer += name;\n    return answer;\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\nimport {\n  ErrorInfo,\n  ErrorLevel,\n  ErrorScope,\n  ErrorType,\n} from '../models/error.model';\nimport { Subject, Subscription } from 'rxjs';\nimport { MappingModel } from '../models/mapping.model';\n\n/**\n * ErrorHandlerService handles global errors, mapping validation errors, preview errors,\n * mapped field level errors as well as instant form validation errors in a modal windows.\n * Global errors, mapping validation errors, preview errors and mapped field level errors\n * are stored in a same array at this moment. We might want to split them when we show\n * them grouped by {@link ErrorType}.\n * Errors with {@link ErrorScope.MAPPING} and {@link ErrorScope.FIELD} are cleared\n * everytime active mapping is switched. {@link ErrorScope.FIELD} errors are mostly\n * instant and cleared more frequently.\n * Form validation errors are supposed to be instant. Channel should be created by\n * {@link createFormErrorChannel()} when modal window is initialized, and should be\n * completed when modal window is closed.\n */\nexport class ErrorHandlerService {\n  private errors: ErrorInfo[] = [];\n  private formErrors: ErrorInfo[] = [];\n  private errorUpdatedSource = new Subject<ErrorInfo[]>();\n  private formErrorUpdatedSource: Subject<ErrorInfo[]> | undefined;\n\n  /**\n   * FIlter an array of {@link ErrorInfo} with specified condition.\n   * @param errors An array of {@link ErrorInfo} to filter\n   * @param mapping {@link MappingModel} to filter {@link ErrorScope.MAPPING} errors\n   * @param level {@link ErrorLevel} to filter with\n   */\n  static filterWith(\n    errors: ErrorInfo[],\n    mapping?: MappingModel,\n    level?: ErrorLevel\n  ): ErrorInfo[] {\n    if (!errors || errors.length === 0) {\n      return [];\n    }\n    return errors.filter(\n      (e) =>\n        (!e.mapping || (mapping && e.mapping === mapping)) &&\n        (!level || !e.level || e.level === level)\n    );\n  }\n\n  /**\n   * Add one or more {@link ErrorInfo} object(s) into error store.\n   * @param errors one or more {@link ErrorInfo} object(s)\n   */\n  addError(...errors: ErrorInfo[]): void {\n    errors.forEach((error) => {\n      if (error.object && error.object.message) {\n        // TODO show error.object in more polished way... maybe with better error console\n        error.message += '\\n' + error.object.message;\n      }\n      const store =\n        ErrorScope.FORM === error.scope ? this.formErrors : this.errors;\n      if (store.find((e) => e.message === error.message)) {\n        return;\n      }\n      store.unshift(error);\n    });\n    this.emitUpdatedEvent();\n  }\n\n  /**\n   * An utility method to add backend error. It's a network error if {@link error.status} is 0.\n   *\n   * @param message error message to put if it's not a network error\n   * @param error raw error object\n   */\n  addBackendError(message: string, error?: any): void {\n    if (error?.status === 0) {\n      this.addError(\n        new ErrorInfo({\n          message:\n            'Fatal network error: Unable to connect to the AtlasMap design runtime service.',\n          level: ErrorLevel.ERROR,\n          scope: ErrorScope.APPLICATION,\n          type: ErrorType.INTERNAL,\n          object: error,\n        })\n      );\n    } else {\n      this.addError(\n        new ErrorInfo({\n          message: message,\n          level: ErrorLevel.ERROR,\n          scope: ErrorScope.APPLICATION,\n          type: ErrorType.INTERNAL,\n          object: error,\n        })\n      );\n    }\n  }\n\n  /**\n   * Return all errors in the store.\n   * @return An array of {@link ErrorInfo}\n   */\n  getErrors(): ErrorInfo[] {\n    return Object.assign([], this.errors);\n  }\n\n  /**\n   * Remove one {@link ErrorInfo} by specifying ID.\n   * @param identifier Error ID\n   */\n  removeError(identifier: string, scope?: ErrorScope): void {\n    if (\n      scope === ErrorScope.FORM &&\n      this.formErrorUpdatedSource &&\n      !this.formErrorUpdatedSource.closed\n    ) {\n      this.formErrors = this.excludeByIdentifier(this.formErrors, identifier);\n    } else {\n      this.errors = this.excludeByIdentifier(this.errors, identifier);\n    }\n    this.emitUpdatedEvent();\n  }\n\n  /**\n   * Clear all global/mapping errors as well as form validation erros and its Subject\n   * if it exists.\n   */\n  resetAll(): void {\n    this.clearAllErrors();\n    this.formErrors = [];\n    if (this.formErrorUpdatedSource && !this.formErrorUpdatedSource.closed) {\n      this.formErrorUpdatedSource.complete();\n    }\n  }\n\n  /**\n   * Remova all errors except form validation errors.\n   */\n  clearAllErrors() {\n    this.errors = [];\n    this.emitUpdatedEvent();\n  }\n\n  /**\n   * Remove all preview errors.\n   */\n  clearPreviewErrors(): void {\n    this.errors = this.errors.filter((e) => e.type !== ErrorType.PREVIEW);\n    this.emitUpdatedEvent();\n  }\n\n  /**\n   * Remove all mapping validation errors.\n   */\n  clearValidationErrors(mapping?: MappingModel): void {\n    this.errors = this.errors.filter(\n      (e) =>\n        e.type !== ErrorType.VALIDATION &&\n        (!mapping || !e.mapping || e.mapping !== mapping)\n    );\n    this.emitUpdatedEvent();\n  }\n\n  /**\n   * Remove all field scoped errors.\n   */\n  clearFieldErrors() {\n    this.errors = this.errors.filter((e) => e.scope !== ErrorScope.FIELD);\n    this.emitUpdatedEvent();\n  }\n\n  /**\n   * Remove all form validation errors.\n   */\n  clearFormErrors() {\n    this.formErrors = [];\n    this.emitUpdatedEvent(ErrorScope.FORM);\n  }\n\n  /**\n   * Subscribe an error updated event. Observer will be notified\n   * when an error is added or removed.\n   * @param observer Observer\n   */\n  subscribe(observer: (errors: ErrorInfo[]) => void): Subscription {\n    return this.errorUpdatedSource.subscribe(observer);\n  }\n\n  /**\n   * Create a Subject for form validation error. This ErrorHandlerService assumes only\n   * one form validation happens at once, as it's used in modal window. Revisit this if there\n   * needs to be more than one channel and manage a list of {@link Subject}.\n   */\n  createFormErrorChannel(): Subject<ErrorInfo[]> {\n    if (this.formErrorUpdatedSource && !this.formErrorUpdatedSource.closed) {\n      this.formErrorUpdatedSource.complete();\n    }\n    this.formErrors = [];\n    this.formErrorUpdatedSource = new Subject();\n    this.formErrorUpdatedSource.subscribe({\n      complete: () => (this.formErrors = []),\n    });\n    return this.formErrorUpdatedSource;\n  }\n\n  /**\n   * Validate the specified field value in a form, generating a form validation error if not defined.\n   * @param value - A form field to validate\n   * @param fieldDescription - used in error diagnostic\n   */\n  isRequiredFieldValid(\n    value: string | null,\n    fieldDescription: string\n  ): boolean {\n    if (value == null || '' === value) {\n      const errorMessage: string = fieldDescription + ' is required.';\n      this.addError(\n        new ErrorInfo({\n          message: errorMessage,\n          level: ErrorLevel.ERROR,\n          scope: ErrorScope.FORM,\n        })\n      );\n      this.emitUpdatedEvent(ErrorScope.FORM);\n      return false;\n    }\n    return true;\n  }\n\n  private emitUpdatedEvent(scope?: ErrorScope) {\n    if (ErrorScope.FORM === scope) {\n      if (this.formErrorUpdatedSource && !this.formErrorUpdatedSource.closed) {\n        this.formErrorUpdatedSource.next(this.formErrors);\n      }\n    } else {\n      this.errorUpdatedSource.next(this.errors);\n    }\n  }\n\n  private excludeByIdentifier(\n    errors: ErrorInfo[],\n    identifier: string\n  ): ErrorInfo[] {\n    return errors.filter((e) => e.identifier !== identifier);\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport {\n  ErrorInfo,\n  ErrorLevel,\n  ErrorScope,\n  ErrorType,\n} from '../models/error.model';\nimport {\n  FieldActionArgument,\n  FieldActionDefinition,\n} from '../models/field-action.model';\nimport {\n  IActionDetail,\n  IActionDetailsContainer,\n  Multiplicity,\n} from '../contracts/field-action';\n\nimport { ConfigModel } from '../models/config.model';\nimport { Field } from '../models/field.model';\nimport { FieldType } from '../contracts/common';\nimport { MappingModel } from '../models/mapping.model';\nimport ky from 'ky';\n\nexport class FieldActionService {\n  cfg: ConfigModel = ConfigModel.getConfig();\n  actions: { [key in Multiplicity]: FieldActionDefinition[] } = {\n    [Multiplicity.ONE_TO_ONE]: [],\n    [Multiplicity.ONE_TO_MANY]: [],\n    [Multiplicity.MANY_TO_ONE]: [],\n    [Multiplicity.ZERO_TO_ONE]: [],\n    [Multiplicity.MANY_TO_MANY]: [],\n  };\n\n  isInitialized = false;\n  private headers = {\n    'Content-Type': 'application/json; application/octet-stream',\n    Accept: 'application/json; application/octet-stream',\n  };\n\n  constructor(private api: typeof ky) {}\n\n  async fetchFieldActions(): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      if (this.cfg.preloadedFieldActionMetadata) {\n        this.clearActionDefinitions();\n        if (this.cfg.preloadedFieldActionMetadata.ActionDetails) {\n          for (const actionDetail of this.cfg.preloadedFieldActionMetadata\n            .ActionDetails.actionDetail) {\n            const fieldActionDefinition =\n              this.extractFieldActionDefinition(actionDetail);\n            if (!fieldActionDefinition.multiplicity) {\n              this.cfg.logger!.info(\n                `Field action (${fieldActionDefinition.name}) is missing multiplicity, ingoring`\n              );\n              continue;\n            }\n            if (fieldActionDefinition.name === 'Expression') {\n              // Expression is handled in special manner\n              continue;\n            }\n            this.actions[fieldActionDefinition.multiplicity].push(\n              fieldActionDefinition\n            );\n          }\n        }\n        this.sortFieldActionDefinitions();\n        this.isInitialized = true;\n        resolve(true);\n        return;\n      }\n\n      if (\n        this.cfg.mappingService == null ||\n        this.cfg.initCfg.baseMappingServiceUrl == null\n      ) {\n        this.cfg.errorService.addError(\n          new ErrorInfo({\n            message:\n              'Mapping service URL is not provided. Field Actions will not be used.',\n            level: ErrorLevel.WARN,\n            scope: ErrorScope.APPLICATION,\n            type: ErrorType.INTERNAL,\n          })\n        );\n        this.isInitialized = true;\n        resolve(false);\n        return;\n      }\n\n      // Fetch the field actions from the runtime service.\n      this.doFetchFieldActions()\n        .then((fetchedActionConfigs: FieldActionDefinition[]) => {\n          if (fetchedActionConfigs.length === 1) {\n            this.cfg.logger!.info('No field action was returned from backend');\n            resolve(false);\n          }\n          this.clearActionDefinitions();\n          fetchedActionConfigs.forEach((action) => {\n            if (!action.multiplicity) {\n              this.cfg.logger!.info(\n                `Field action  (${action.name}) is missing multiplicity, ignoring`\n              );\n              return;\n            }\n            if (action.name === 'Expression') {\n              // Expression is handled in special manner\n              return;\n            }\n            this.actions[action.multiplicity].push(action);\n          });\n          this.sortFieldActionDefinitions();\n          this.isInitialized = true;\n          resolve(true);\n        })\n        .catch((error: any) => {\n          this.cfg.errorService.addBackendError(\n            `Could not load field action configs: (${error.message})`,\n            error\n          );\n          resolve(false);\n        });\n    });\n  }\n\n  getActionDefinitionForName(\n    actionName: string,\n    multiplicity?: Multiplicity\n  ): FieldActionDefinition | null {\n    if (!this.actions || !actionName) {\n      return null;\n    }\n    let actions: FieldActionDefinition[] = [];\n    if (multiplicity) {\n      actions = this.actions[multiplicity];\n    } else {\n      Object.values(this.actions).forEach(\n        (arr) => (actions = actions.concat(arr))\n      );\n    }\n    for (const actionDef of actions) {\n      if (actionName === actionDef.name) {\n        return actionDef;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Return the field action Definitions applicable to the specified field mapping pair.\n   * @param mapping\n   * @param isSource\n   * @param multiplicity\n   */\n  getActionsAppliesToField(\n    mapping: MappingModel,\n    isSource: boolean = true,\n    multiplicity: Multiplicity = Multiplicity.ONE_TO_ONE\n  ): FieldActionDefinition[] {\n    if (!mapping || !this.actions) {\n      return [];\n    }\n    return this.actions[multiplicity].filter((d) =>\n      this.appliesToField(d, mapping, isSource)\n    );\n  }\n\n  private doFetchFieldActions(): Promise<FieldActionDefinition[]> {\n    return new Promise<FieldActionDefinition[]>((resolve, reject) => {\n      const actionConfigs: FieldActionDefinition[] = [];\n      const url: string =\n        this.cfg.initCfg.baseMappingServiceUrl + 'fieldActions';\n      this.cfg.logger!.debug('Field Action Config Request');\n      this.api\n        .get(url, { headers: this.headers })\n        .json<IActionDetailsContainer>()\n        .then((body) => {\n          this.cfg.logger!.debug(\n            `Field Action Config Response: ${JSON.stringify(body)}`\n          );\n          if (body?.ActionDetails?.actionDetail?.length) {\n            for (const actionDetail of body.ActionDetails.actionDetail) {\n              const fieldActionConfig =\n                this.extractFieldActionDefinition(actionDetail);\n              actionConfigs.push(fieldActionConfig);\n            }\n          }\n          resolve(actionConfigs);\n        })\n        .catch((error: any) => {\n          reject(error);\n        });\n    });\n  }\n\n  private extractFieldActionDefinition(\n    actionDetail: IActionDetail\n  ): FieldActionDefinition {\n    this.cfg.logger!.trace(\n      `Deserializing field action definition: ${JSON.stringify(actionDetail)}`\n    );\n\n    const fieldActionDefinition = new FieldActionDefinition();\n    fieldActionDefinition.name = actionDetail.name;\n    fieldActionDefinition.isCustom = actionDetail.custom;\n    fieldActionDefinition.sourceType = actionDetail.sourceType;\n    fieldActionDefinition.targetType = actionDetail.targetType;\n    fieldActionDefinition.method = actionDetail.method;\n    fieldActionDefinition.multiplicity = actionDetail.multiplicity;\n    fieldActionDefinition.serviceObject = actionDetail;\n\n    if (actionDetail.actionSchema) {\n      for (const key of Object.keys(actionDetail.actionSchema.properties)) {\n        const propertyObject = actionDetail.actionSchema.properties[key];\n        if (key === '@type') {\n          fieldActionDefinition.name = propertyObject.const;\n          continue;\n        }\n        const argTypeString = (propertyObject.type as string).toUpperCase();\n        const argType = argTypeString\n          ? FieldType[argTypeString as keyof typeof FieldType]\n          : FieldType.STRING;\n        const argumentDefinition = new FieldActionArgument();\n        argumentDefinition.name = key;\n        argumentDefinition.type = argType;\n        if (propertyObject.enum) {\n          argumentDefinition.values = propertyObject.enum;\n        }\n        argumentDefinition.serviceObject = propertyObject;\n        fieldActionDefinition.arguments.push(argumentDefinition);\n      }\n    }\n    return fieldActionDefinition;\n  }\n\n  private sortFieldActionDefinitions() {\n    (Object.keys(this.actions) as [keyof typeof Multiplicity]).forEach(\n      (multiplicity) => {\n        const definitions = this.actions[multiplicity];\n        const sortedActionDefinitions: FieldActionDefinition[] = [];\n        if (definitions == null || definitions.length === 0) {\n          return;\n        }\n\n        const defsByName: { [key: string]: FieldActionDefinition[] } = {};\n        const defNames: string[] = [];\n        for (const fieldActionConfig of definitions) {\n          const name: string = fieldActionConfig.name;\n          let sameNamedDefs: FieldActionDefinition[] = defsByName[name];\n          if (!sameNamedDefs) {\n            sameNamedDefs = [];\n            defNames.push(name);\n          }\n          sameNamedDefs.push(fieldActionConfig);\n          defsByName[name] = sameNamedDefs;\n        }\n\n        defNames.sort();\n\n        for (const name of defNames) {\n          const sameNamedDefs: FieldActionDefinition[] = defsByName[name];\n          for (const fieldActionDefinition of sameNamedDefs) {\n            sortedActionDefinitions.push(fieldActionDefinition);\n          }\n        }\n        this.actions[multiplicity] = sortedActionDefinitions;\n      }\n    );\n  }\n\n  /**\n   * Return true if the action's source/target types and collection types match the respective source/target\n   * field properties for source transformations, or matches the respective target field properties only for\n   * a target transformation.\n   *\n   * @param action\n   * @param mapping\n   * @param isSource\n   */\n  appliesToField(\n    action: FieldActionDefinition,\n    mapping: MappingModel,\n    isSource: boolean\n  ): boolean {\n    if (mapping == null) {\n      return false;\n    }\n    const selectedSourceField: Field = this.getActualField(mapping, true);\n    const selectedTargetField: Field = this.getActualField(mapping, false);\n\n    if (\n      (isSource && selectedSourceField == null) ||\n      (!isSource && selectedTargetField == null)\n    ) {\n      return false;\n    }\n\n    return isSource\n      ? this.appliesToSourceField(action, mapping, selectedSourceField)\n      : this.appliesToTargetField(action, mapping, selectedTargetField);\n  }\n\n  /**\n   * Return the first non-padding field in either the source or target mappings.\n   *\n   * @param mapping\n   * @param isSource\n   */\n  private getActualField(mapping: MappingModel, isSource: boolean): Field {\n    const targetField = mapping\n      .getFields(isSource)\n      .find((f) => f.name !== '<padding field>');\n    // TODO: maybe throw an exception instead of assuming the field will be found?\n    return targetField!;\n  }\n\n  /**\n   * Check if it could be applied to source field.\n   * @param action\n   * @param _\n   * @param selectedSourceField selected source field\n   */\n  private appliesToSourceField(\n    action: FieldActionDefinition,\n    _: MappingModel,\n    selectedSourceField: Field\n  ): boolean {\n    // Check for matching types - date.\n    if (this.matchesDate(action.sourceType, selectedSourceField.type)) {\n      return true;\n    }\n\n    // Check for matching types - numeric.\n    if (this.matchesNumeric(action.sourceType, selectedSourceField.type)) {\n      return true;\n    }\n\n    // First check if the source types match.\n    if (\n      action.sourceType === 'ANY' ||\n      selectedSourceField.type === action.sourceType\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if it could be applied for target field. Target type may not change.\n   * @param action\n   * @param _\n   * @param selectedTargetField selected target field\n   */\n  private appliesToTargetField(\n    action: FieldActionDefinition,\n    _: MappingModel,\n    selectedTargetField: Field\n  ): boolean {\n    if (selectedTargetField == null) {\n      return false;\n    }\n\n    if (action.multiplicity !== Multiplicity.ONE_TO_ONE) {\n      return false;\n    }\n\n    // Check for matching types - date.\n    if (\n      this.matchesDate(action.sourceType, selectedTargetField.type) &&\n      this.matchesDate(action.targetType, selectedTargetField.type)\n    ) {\n      return true;\n    }\n\n    // Check for matching types - numeric.\n    if (\n      this.matchesNumeric(action.sourceType, selectedTargetField.type) &&\n      this.matchesNumeric(action.targetType, selectedTargetField.type)\n    ) {\n      return true;\n    }\n\n    if (\n      action.sourceType !== 'ANY' &&\n      action.sourceType !== selectedTargetField.type\n    ) {\n      return false;\n    }\n\n    // All other types must match the selected field types with the candidate field action types.\n    return (\n      action.targetType === 'ANY' ||\n      selectedTargetField.type === action.targetType\n    );\n  }\n\n  /**\n   * Return true if the candidate type and selected type are generically a date, false otherwise.\n   *\n   * @param candidateType\n   * @param selectedType\n   */\n  private matchesDate(candidateType: string, selectedType: string): boolean {\n    return (\n      candidateType === 'ANY' ||\n      (candidateType === 'ANY_DATE' &&\n        ['DATE', 'DATE_TIME', 'DATE_TIME_TZ', 'TIME'].indexOf(selectedType) !==\n          -1)\n    );\n  }\n\n  /**\n   * Return true if the candidate type and selected type are generically numeric, false otherwise.\n   *\n   * @param candidateType\n   * @param selectedType\n   */\n  private matchesNumeric(candidateType: string, selectedType: string): boolean {\n    return (\n      candidateType === 'ANY' ||\n      (candidateType === 'NUMBER' &&\n        [\n          'LONG',\n          'INTEGER',\n          'FLOAT',\n          'DOUBLE',\n          'SHORT',\n          'BYTE',\n          'DECIMAL',\n          'NUMBER',\n        ].indexOf(selectedType) !== -1)\n    );\n  }\n\n  private clearActionDefinitions() {\n    (Object.keys(Multiplicity) as [keyof typeof Multiplicity]).forEach(\n      (m) => (this.actions[m] = [])\n    );\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport {\n  ErrorInfo,\n  ErrorLevel,\n  ErrorScope,\n  ErrorType,\n} from '../models/error.model';\nimport {\n  IAtlasMappingContainer,\n  IStringMapContainer,\n} from '../contracts/mapping';\nimport { gzip, inflate } from 'pako';\n\nimport { ADMDigest } from '../contracts/adm-digest';\nimport { CommonUtil } from '../utils/common-util';\nimport { ConfigModel } from '../models/config.model';\nimport { HTTP_STATUS_NO_CONTENT } from '../common/config.types';\nimport { MappingDigestUtil } from '../utils/mapping-digest-util';\nimport ky from 'ky';\nimport log from 'loglevel';\n\nexport enum FileName {\n  DIGEST = 'Mapping digest file',\n  ADM = 'ADM archive file',\n  JAR = 'Jar file',\n}\n\nexport enum FileType {\n  DIGEST = 'GZ',\n  ADM = 'ZIP',\n  JAR = 'JAR',\n}\n\n/**\n * Handles file manipulation stored in the backend, including import/export via UI.\n */\nexport class FileManagementService {\n  _cfg!: ConfigModel;\n\n  constructor(private api: typeof ky) {}\n\n  get cfg() {\n    return this._cfg;\n  }\n\n  set cfg(cfg: ConfigModel) {\n    this._cfg = cfg;\n    if (!this._cfg.logger) {\n      this._cfg.logger = log.getLogger('file-management');\n    }\n  }\n\n  findMappingFiles(filter: string): Promise<string[]> {\n    return new Promise<string[]>((resolve, reject) => {\n      const url =\n        this.cfg.initCfg.baseMappingServiceUrl +\n        'mappings' +\n        (filter == null ? '' : '?filter=' + filter);\n      this.cfg.logger!.debug('Mapping List Request');\n      this.api\n        .get(url)\n        .json<IStringMapContainer>()\n        .then((body) => {\n          this.cfg.logger!.debug(\n            `Mapping List Response: ${JSON.stringify(body)}`\n          );\n          const entries = body.StringMap.stringMapEntry;\n          resolve(entries.map((item) => item.name));\n        })\n        .catch((error: any) => {\n          if (error.status !== HTTP_STATUS_NO_CONTENT) {\n            this.cfg.errorService.addBackendError(\n              'Error occurred while accessing the current mapping files from the runtime service.',\n              error\n            );\n            reject(error);\n          }\n        });\n    });\n  }\n\n  /**\n   * Retrieve the current user data mappings digest file from the server as a GZIP compressed byte array buffer.\n   */\n  getCurrentMappingDigest(): Promise<ADMDigest | null> {\n    return new Promise<ADMDigest | null>((resolve, reject) => {\n      this.getCurrentFile(FileName.DIGEST, FileType.DIGEST)\n        .then((gzipped) => {\n          if (!gzipped) {\n            resolve(null);\n            return;\n          }\n          const gunzipped = inflate(gzipped);\n          const stringified = new Uint8Array(gunzipped).reduce(\n            (data, byte) => data + String.fromCharCode(byte),\n            ''\n          );\n          const admDigest = CommonUtil.objectize(stringified);\n          resolve(admDigest);\n        })\n        .catch((error) => {\n          reject(error);\n        });\n    });\n  }\n\n  getCurrentADMArchive(): Promise<Uint8Array | null> {\n    return this.getCurrentFile(FileName.ADM, FileType.ADM);\n  }\n\n  private getCurrentFile(\n    fileName: string,\n    fileType: string\n  ): Promise<Uint8Array | null> {\n    return new Promise<Uint8Array | null>((resolve, reject) => {\n      const url = `${this.cfg.initCfg.baseMappingServiceUrl}mapping/${fileType}/`;\n      this.cfg.logger!.debug(`Get Current ${fileName} Request: ${url}`);\n      const headers = {\n        'Content-Type': 'application/octet-stream',\n        Accept: 'application/octet-stream',\n        'Response-Type': 'application/octet-stream',\n      };\n      this.api\n        .get(url, { headers })\n        .arrayBuffer()\n        .then((body: ArrayBuffer) => {\n          this.cfg.logger!.debug(\n            `Get Current ${fileName} Response: ${JSON.stringify(body)}`\n          );\n          if (body.byteLength) {\n            resolve(new Uint8Array(body));\n          } else {\n            resolve(null);\n          }\n        })\n        .catch((error: any) => {\n          if (error.status !== HTTP_STATUS_NO_CONTENT) {\n            this.cfg.errorService.addBackendError(\n              `Error occurred while accessing the ${fileName} from the runtime service.`,\n              error\n            );\n            reject(error);\n          }\n        });\n    });\n  }\n\n  /**\n   * Delete mapping files on the runtime.\n   */\n  resetMappings(): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      const url = this.cfg.initCfg.baseMappingServiceUrl + 'mapping/RESET';\n      this.cfg.logger!.debug('Reset Mappings Request');\n      this.api\n        .delete(url)\n        .arrayBuffer()\n        .then((res: any) => {\n          this.cfg.logger!.debug(\n            `Reset Mappings Response: ${JSON.stringify(res)}`\n          );\n          resolve(true);\n          return res;\n        })\n        .catch((error: any) => {\n          this.cfg.errorService.addBackendError(\n            'Error occurred while resetting mappings.',\n            error\n          );\n          resolve(false);\n        });\n    });\n  }\n\n  /**\n   * Delete user-defined JAR library files on the runtime.\n   */\n  resetLibs(): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      const url = this.cfg.initCfg.baseMappingServiceUrl + 'mapping/resetLibs';\n      this.cfg.logger!.debug('Reset Libs Request');\n      this.api\n        .delete(url)\n        .arrayBuffer()\n        .then((res: any) => {\n          this.cfg.logger!.debug(`Reset Libs Response: ${JSON.stringify(res)}`);\n          resolve(true);\n          return res;\n        })\n        .catch((error: any) => {\n          this.cfg.errorService.addBackendError(\n            'Error occurred while resetting user-defined JAR libraries.',\n            error\n          );\n          resolve(false);\n        });\n    });\n  }\n\n  /**\n   * Clear error service and delete jar libraries, documents and mappings.\n   */\n  resetAll(): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      this.cfg.errorService.resetAll();\n      this.cfg.fileService\n        .resetMappings()\n        .then(async () => {\n          this.cfg.mappings = null;\n          this.cfg.clearDocs();\n          this.cfg.fileService\n            .resetLibs()\n            .then((value) => {\n              resolve(value);\n            })\n            .catch((error) => {\n              this.cfg.errorService.addBackendError(\n                `Failed to remove jar files: ${error.message}`,\n                error\n              );\n              resolve(false);\n            });\n        })\n        .catch((error) => {\n          this.cfg.errorService.addBackendError(\n            `Failed to remove mappings: ${error.message}`,\n            error\n          );\n          resolve(false);\n        });\n    });\n  }\n\n  /**\n   * Commit the specified AtlasMapping object to the runtime service.  The mappings\n   * are kept separate so they can be updated with minimal overhead.\n   *\n   * @param buffer - The stringified AtlasMapping JSON\n   */\n  setMappingToService(\n    atlasMappingContainer: IAtlasMappingContainer\n  ): Promise<boolean> {\n    const jsonBuffer = JSON.stringify(atlasMappingContainer);\n    return this.setMappingStringToService(jsonBuffer);\n  }\n\n  /**\n   * Commit the specified AtlasMapping JSON user mapping string to the runtime service.  The mappings\n   * are kept separate so they can be updated with minimal overhead.\n   *\n   * @param buffer - The stringified AtlasMapping JSON\n   */\n  setMappingStringToService(jsonBuffer: string): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      const url = this.cfg.initCfg.baseMappingServiceUrl + 'mapping/JSON';\n      const headers = {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        'Response-Type': 'application/json',\n      };\n      this.cfg.logger!.debug(\n        `Set Mapping Request (set mapping): ${jsonBuffer}`\n      );\n      this.api\n        .put(url, { headers, body: jsonBuffer })\n        .arrayBuffer()\n        .then((res) => {\n          this.cfg.logger!.debug(\n            `Set Mapping Response: ${JSON.stringify(res)}`\n          );\n          resolve(true);\n        })\n        .catch((error: any) => {\n          this.cfg.errorService.addBackendError(\n            `Unable to update the mappings file to the AtlasMap design runtime service. ${error.status} ${error.statusText}`,\n            error\n          );\n          resolve(false);\n        });\n    });\n  }\n\n  setMappingDigestToService(mappingDigest: ADMDigest): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      // Compress the JSON buffer - write out as binary.\n      const strBuffer = JSON.stringify(mappingDigest);\n      const binBuffer = CommonUtil.str2bytes(strBuffer);\n      let compressedBuffer: Uint8Array;\n      try {\n        compressedBuffer = gzip(binBuffer);\n      } catch (error1) {\n        this.cfg.errorService.addError(\n          new ErrorInfo({\n            message: 'Unable to compress the current data mappings.',\n            level: ErrorLevel.ERROR,\n            scope: ErrorScope.APPLICATION,\n            type: ErrorType.INTERNAL,\n            object: error1,\n          })\n        );\n        resolve(false);\n        return;\n      }\n      // Update .../target/mappings/adm-catalog-files.gz\n      const url = this.cfg.initCfg.baseMappingServiceUrl + 'mapping/GZ/0';\n      const fileContent: Blob = new Blob([compressedBuffer], {\n        type: 'application/octet-stream',\n      });\n      this.setBinaryFileToService(fileContent, url, FileName.DIGEST).then(\n        (value) => {\n          resolve(value);\n        }\n      );\n    });\n  }\n\n  private setADMArchiveFileToService(\n    compressedBuffer: BlobPart\n  ): Promise<boolean> {\n    const url = this.cfg.initCfg.baseMappingServiceUrl + 'mapping/ZIP/';\n    const fileContent: Blob = new Blob([compressedBuffer], {\n      type: 'application/octet-stream',\n    });\n    return this.setBinaryFileToService(fileContent, url, FileName.ADM);\n  }\n\n  /**\n   * The user has either exported their mappings or imported new mappings.\n   * Either way we're saving them on the server.\n   *\n   * @param compressedBuffer\n   */\n  private setBinaryFileToService(\n    compressedBuffer: BlobPart,\n    url: string,\n    fileName: FileName\n  ): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      this.cfg.logger!.debug(`Set ${fileName} Request`);\n      this.api\n        .put(url, { body: compressedBuffer })\n        .arrayBuffer()\n        .then((res) => {\n          this.cfg.logger!.debug(\n            `Set ${fileName} Response: ${JSON.stringify(res)}`\n          );\n          resolve(true);\n        })\n        .catch((error: any) => {\n          this.cfg.errorService.addBackendError(\n            `Unable to update the ${fileName} to the AtlasMap design runtime service.\n              ${error.status} ${error.statusText}`,\n            error\n          );\n          resolve(false);\n        });\n    });\n  }\n\n  /**\n   * Push a user-defined Java archive file (JAR binary buffer) to the runtime.\n   *\n   * @param binaryBuffer - binary JAR file\n   */\n  importJarFile(binaryBuffer: BlobPart): Promise<boolean> {\n    return new Promise<boolean>(async (resolve) => {\n      const url = this.cfg.initCfg.baseMappingServiceUrl + 'library';\n      const fileContent: Blob = new Blob([binaryBuffer], {\n        type: 'application/octet-stream',\n      });\n      const jarUpdated = await this.setBinaryFileToService(\n        fileContent,\n        url,\n        FileName.JAR\n      );\n      if (jarUpdated && this.cfg.mappingService) {\n        this.cfg.mappingService.notifyMappingUpdated();\n        await this.cfg.fieldActionService.fetchFieldActions();\n        resolve(true);\n      } else {\n        resolve(false);\n      }\n    });\n  }\n\n  /**\n   * Generate mapping digest file from current state and push it to the runtime.\n   *\n   * @returns {@link Promise}\n   */\n  updateDigestFile(): Promise<boolean> {\n    return new Promise<boolean>(async (resolve) => {\n      try {\n        let mappingJson = undefined;\n        // Retrieve the JSON mappings buffer from the server.\n        if (this.cfg.mappings) {\n          mappingJson = await this.getCurrentMappingJson();\n        }\n        const mappingDigest = MappingDigestUtil.generateMappingDigest(\n          this.cfg,\n          mappingJson\n        );\n\n        // Save mapping digest file to the runtime.\n        this.setMappingDigestToService(mappingDigest).then((value) => {\n          resolve(value);\n        });\n      } catch (error) {\n        this.cfg.errorService.addError(\n          new ErrorInfo({\n            message: 'Unable to update mapping digest file.',\n            level: ErrorLevel.ERROR,\n            scope: ErrorScope.APPLICATION,\n            type: ErrorType.INTERNAL,\n            object: error,\n          })\n        );\n        resolve(false);\n        return;\n      }\n    });\n  }\n\n  /**\n   * Update the current mapping files and export the ADM archive file with current mappings.\n   *\n   * Establish the mapping digest file content in JSON format (mappings + schema + instance-schema),\n   * compress it (GZIP), update the runtime, then fetch the full ADM archive ZIP file from the runtime\n   * and export it.\n   *\n   * @param event\n   */\n  exportADMArchive(mappingsFileName: string): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      this.updateDigestFile().then(() => {\n        // Fetch the full ADM archive file from the runtime (ZIP) and export it to to the local\n        // downloads area.\n        this.getCurrentADMArchive().then(async (value: Uint8Array | null) => {\n          // If value is null then no compressed mappings digest file is available on the server.\n          if (value === null) {\n            resolve(false);\n            return;\n          }\n          // Tack on a .adm suffix if one wasn't already specified.\n          if (mappingsFileName.split('.').pop() !== 'adm') {\n            mappingsFileName = mappingsFileName.concat('.adm');\n          }\n          const fileContent = new Blob([value], {\n            type: 'application/octet-stream',\n          });\n          CommonUtil.writeFile(fileContent, mappingsFileName)\n            .then((value2) => {\n              resolve(value2);\n            })\n            .catch((error) => {\n              this.cfg.errorService.addError(\n                new ErrorInfo({\n                  message: 'Unable to save the current data mappings.',\n                  level: ErrorLevel.ERROR,\n                  scope: ErrorScope.APPLICATION,\n                  type: ErrorType.INTERNAL,\n                  object: error,\n                })\n              );\n              resolve(false);\n            });\n        });\n      });\n    });\n  }\n\n  /**\n   * Clean up all existing mappings, documents, libraries and import specified ADM archive file,\n   * push it to the runtime and reflect back in UI. The ADM file is in (ZIP) file format.\n   * Once pushed, we can retrieve from runtime the extracted compressed (GZIP) mappings\n   * digest file as well as the mappings JSON file.  These files exist separately for performance reasons.\n   *\n   * Once the runtime has its ADM archive file, digest file and mappings file set then restart the DM.\n   *\n   * @param mappingsFileName - ADM archive file\n   */\n  importADMArchive(admFile: File): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      this.resetAll().then(() => {\n        const reader = new FileReader();\n\n        // Turn the imported ADM file into a binary octet stream.\n        CommonUtil.readBinaryFile(admFile, reader)\n          .then((fileBin) => {\n            // Push the binary stream to the runtime.\n            this.setADMArchiveFileToService(fileBin).then((value) => {\n              resolve(value);\n            });\n          })\n          .catch((error) => {\n            this.cfg.errorService.addError(\n              new ErrorInfo({\n                message: `Unable to import the specified ADM file '${admFile.name}'`,\n                level: ErrorLevel.ERROR,\n                scope: ErrorScope.APPLICATION,\n                type: ErrorType.INTERNAL,\n                object: error,\n              })\n            );\n            resolve(false);\n          });\n      });\n    });\n  }\n\n  /**\n   * Retrieve the current user AtlasMap data mappings from the server as a JSON object.\n   */\n  getCurrentMappingJson(): Promise<IAtlasMappingContainer> {\n    return new Promise<any>((resolve, reject) => {\n      if (this.cfg.mappings === null) {\n        reject();\n        return;\n      }\n      this.cfg.mappingFiles[0] = this.cfg.mappings.name!;\n      const baseURL: string =\n        this.cfg.initCfg.baseMappingServiceUrl + 'mapping/JSON/';\n      this.cfg.logger!.debug('Get Current Mapping Request');\n      this.api\n        .get(baseURL)\n        .json<IAtlasMappingContainer>()\n        .then((body) => {\n          this.cfg.logger!.debug(\n            `Get Current Mapping Response: ${JSON.stringify(body)}`\n          );\n          resolve(body);\n        })\n        .catch((error: any) => {\n          if (error.status !== HTTP_STATUS_NO_CONTENT) {\n            this.cfg.errorService.addBackendError(\n              'Error occurred while accessing the current mappings from the backend service.',\n              error\n            );\n            reject(error);\n          } else {\n            resolve(undefined);\n          }\n        });\n    });\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport {\n  ErrorInfo,\n  ErrorLevel,\n  ErrorScope,\n  ErrorType,\n} from '../models/error.model';\nimport { MappedField, MappingModel } from '../models/mapping.model';\nimport { TransitionMode, TransitionModel } from '../models/transition.model';\n\nimport { CommonUtil } from '../utils/common-util';\nimport { ConfigModel } from '../models/config.model';\nimport { ExpressionModel } from '../models/expression.model';\nimport { Field } from '../models/field.model';\nimport { FieldActionArgumentValue } from '../models/field-action.model';\nimport { FieldType } from '../contracts/common';\nimport { IExpressionNode } from '../contracts/expression';\nimport { MappingUtil } from '../utils/mapping-util';\nimport { Multiplicity } from '../contracts/field-action';\nimport { Subscription } from 'rxjs';\n\n/**\n * Manages conditional mapping expression.\n */\nexport class MappingExpressionService {\n  cfg!: ConfigModel;\n\n  private mappingUpdatedSubscription?: Subscription;\n\n  willClearOutSourceFieldsOnTogglingExpression() {\n    if (this.cfg.mappings?.activeMapping?.transition.enableExpression) {\n      return (\n        this.cfg.mappings.activeMapping.getFirstCollectionField(true) != null\n      );\n    } else {\n      return false;\n    }\n  }\n\n  isExpressionEnabledForActiveMapping(): boolean {\n    return !!this.cfg.mappings?.activeMapping?.transition?.enableExpression;\n  }\n\n  toggleExpressionMode() {\n    if (\n      !this.cfg.mappings ||\n      !this.cfg.mappings.activeMapping ||\n      !this.cfg.mappings.activeMapping.transition\n    ) {\n      this.cfg.errorService.addError(\n        new ErrorInfo({\n          message: 'Please select a mapping first.',\n          level: ErrorLevel.INFO,\n          scope: ErrorScope.MAPPING,\n          type: ErrorType.USER,\n        })\n      );\n      return;\n    }\n    const activeMapping = this.cfg.mappings.activeMapping;\n    if (activeMapping.transition.mode === TransitionMode.ONE_TO_MANY) {\n      this.cfg.errorService.addError(\n        new ErrorInfo({\n          message: `Cannot establish a conditional mapping expression when multiple target fields are selected.\n        Please select only one target field and try again.`,\n          level: ErrorLevel.WARN,\n          scope: ErrorScope.MAPPING,\n          type: ErrorType.USER,\n          mapping: activeMapping,\n        })\n      );\n      return;\n    }\n\n    if (this.willClearOutSourceFieldsOnTogglingExpression()) {\n      // Clear out source fields, if the mapping contains a source collection\n      activeMapping.sourceFields.splice(0, activeMapping.sourceFields.length);\n    }\n\n    activeMapping.transition.enableExpression =\n      !activeMapping.transition.enableExpression;\n    if (activeMapping.transition.enableExpression) {\n      activeMapping.transition.mode = TransitionMode.EXPRESSION;\n      activeMapping.transition.transitionFieldAction = null;\n      this.mappingUpdatedSubscription =\n        this.cfg.mappingService.mappingUpdated$.subscribe(() => {\n          if (\n            !this.cfg ||\n            !this.cfg.mappings ||\n            !this.cfg.mappings.activeMapping\n          ) {\n            return;\n          }\n          if (this.cfg.mappings.activeMapping.isFullyMapped()) {\n            this.updateExpression(this.cfg.mappings.activeMapping);\n          }\n        });\n      if (activeMapping.transition.expression) {\n        this.cfg.mappings.activeMapping.transition.expression.expressionUpdatedSource.next();\n      }\n    } else {\n      this.mappingUpdatedSubscription?.unsubscribe();\n      activeMapping.transition.mode = TransitionMode.ONE_TO_ONE;\n      this.cfg.mappingService.updateActiveMappingTransition();\n    }\n  }\n\n  updateExpression(mapping: MappingModel, position?: string, offset?: number) {\n    // Update conditional expression field references.\n    mapping.transition.expression?.updateFieldReference(\n      mapping,\n      position,\n      offset\n    );\n  }\n\n  /**\n   * Add the specified document ID/field path to the specified mapping/ expression.\n   *\n   * @param mapping\n   * @param docId\n   * @param fieldPath\n   * @param newTextNode\n   * @param atIndex\n   * @param isTrailer\n   */\n  addFieldToExpression(\n    mapping: MappingModel,\n    docId: string,\n    fieldPath: string,\n    newTextNode: IExpressionNode,\n    atIndex: number,\n    isTrailer: boolean\n  ) {\n    let mappedField = mapping.getMappedFieldByPath(fieldPath, true, docId);\n\n    if (!mappedField) {\n      // If the selected field was not part of the original mapping\n      // and is complex then add it as a reference node.\n      mappedField = mapping.getReferenceField(docId, fieldPath);\n      if (!mappedField) {\n        // Try adding the selected field to the active mapping.\n        const docDef = this.cfg.getDocForIdentifier(docId, true);\n        const field = Field.getField(fieldPath, docDef?.getAllFields()!);\n        if (field) {\n          this.updateExpression(\n            mapping,\n            newTextNode.getUuid(),\n            isTrailer ? newTextNode.toText().length : atIndex\n          );\n          this.cfg.mappingService.addFieldToActiveMapping(field);\n        }\n        mappedField = mapping.getMappedFieldByPath(fieldPath, true, docId);\n        if (!mappedField) {\n          return;\n        }\n      }\n    }\n    mapping.transition!.expression?.addConditionalExpressionNode(\n      mappedField,\n      newTextNode.getUuid(),\n      isTrailer ? newTextNode.str.length : atIndex\n    );\n  }\n\n  /**\n   * Return an array of strings representing display names of mapping fields based on the\n   * specified filter.\n   * @todo ATM this is specialized for listing up candidate fields for adding into expression.\n   * We will need to consolidate with field filter on the Document tree when we implement server\n   * side field search - https://github.com/atlasmap/atlasmap/issues/603\n   *\n   * @param filter\n   */\n  executeFieldSearch(\n    configModel: ConfigModel,\n    filter: string,\n    isSource: boolean\n  ): string[][] {\n    const activeMapping = configModel.mappings!.activeMapping;\n    if (!activeMapping) {\n      return [];\n    }\n    const formattedFields: string[][] = [];\n    let fields: Field[] = [];\n    for (const docDef of configModel.getDocs(isSource)) {\n      fields = docDef.getTerminalFields();\n      fields = fields.concat(docDef.getComplexFields());\n      Field.alphabetizeFields(fields);\n      let documentName = '';\n      let fieldCount = -1;\n\n      for (const field of fields) {\n        const formattedField: string[] = [''];\n        let displayName =\n          field == null ? '' : field.getFieldLabel(configModel.showTypes, true);\n\n        if (\n          filter == null ||\n          filter === '' ||\n          displayName.toLowerCase().indexOf(filter.toLowerCase()) !== -1\n        ) {\n          if (\n            !configModel.mappingService.isFieldSelectable(\n              activeMapping,\n              field\n            ) &&\n            field.type !== FieldType.COMPLEX\n          ) {\n            continue;\n          }\n          if (documentName !== field.docDef.name) {\n            if (fieldCount === 0) {\n              formattedFields.pop();\n              continue;\n            } else {\n              const documentField = [''];\n              documentName = field.docDef.name;\n              documentField[0] = documentName;\n              documentField[1] = field.docDef.id;\n              fieldCount = 0;\n              formattedFields.push(documentField);\n            }\n          }\n          displayName = CommonUtil.extractDisplayPath(field.path, 100);\n          formattedField[0] = field.docDef.id;\n          formattedField[1] = field.path;\n          fieldCount++;\n          formattedFields.push(formattedField);\n        }\n        if (formattedFields.length > 19) {\n          break;\n        }\n      }\n    }\n    return formattedFields;\n  }\n\n  /**\n   * Return a string, in either text or HTML form, representing the\n   * expression mapping of either the optionally specified mapping or\n   * the active mapping if it exists, empty string otherwise.\n   * @todo avoid any, use typed mapping object - https://github.com/atlasmap/atlasmap/issues/2975\n   * @param asHTML\n   * @param mapping\n   */\n  getMappingExpressionStr(asHTML: boolean, mapping?: any): string {\n    if (!mapping && !MappingUtil.activeMapping(this.cfg)) {\n      return '';\n    }\n    if (!mapping) {\n      mapping = this.cfg.mappings?.activeMapping;\n    }\n    if (!mapping.transition.expression) {\n      if (\n        mapping.transition.enableExpression &&\n        MappingUtil.hasFieldAction(mapping.sourceFields)\n      ) {\n        this.createMappingExpression(mapping);\n      } else {\n        return '';\n      }\n    }\n\n    if (mapping.transition.expression && mapping.transition.enableExpression) {\n      return asHTML\n        ? mapping.transition.expression.expressionHTML\n        : mapping.transition.expression.toText(true);\n    }\n    return '';\n  }\n\n  /**\n   * Create a conditional mapping expression from the specified mapping model.  Start\n   * with a multiplicity action if applicable, then any field-specific field actions.\n   *\n   * @param mapping\n   */\n  createMappingExpression(mapping: MappingModel): string {\n    let expr = '';\n    const sourceMappedFields = mapping.getMappedFields(true);\n    const sourceMappedCollection = MappingUtil.hasMappedCollection(\n      mapping,\n      true\n    );\n    const targetMappedFields = mapping.getMappedFields(false);\n    const targetMappedCollection = MappingUtil.hasMappedCollection(\n      mapping,\n      false\n    );\n\n    if (\n      sourceMappedFields.length > 1 ||\n      (sourceMappedCollection &&\n        mapping.transition.transitionFieldAction?.definition?.multiplicity ===\n          Multiplicity.MANY_TO_ONE)\n    ) {\n      expr = 'Concatenate (';\n      expr += this.fieldActionsToExpression(mapping);\n      expr +=\n        \", '\" +\n        TransitionModel.delimiterModels[mapping.transition.delimiter]\n          .actualDelimiter +\n        \"')\";\n    } else if (\n      (targetMappedFields.length > 1 || targetMappedCollection) &&\n      mapping.transition.transitionFieldAction?.definition?.multiplicity ===\n        Multiplicity.ONE_TO_MANY\n    ) {\n      expr = 'Split (';\n      expr += this.fieldActionsToExpression(mapping);\n      expr += ')';\n    } else {\n      expr += this.fieldActionsToExpression(mapping);\n    }\n    mapping.transition.expression = new ExpressionModel(mapping, this.cfg);\n    mapping.transition.expression.insertText(expr);\n    return expr;\n  }\n\n  private qualifiedExpressionRef(mappedField: MappedField): string {\n    if (mappedField.field?.path !== null) {\n      return (\n        '${' +\n        mappedField.field?.docDef?.id +\n        ':' +\n        mappedField.field?.path +\n        '}'\n      );\n    } else {\n      return 'null';\n    }\n  }\n\n  /**\n   * Create a conditional expression fragment based on the specified field action\n   * argument and type.\n   *\n   * @param actionArgument\n   * @param actionArgType\n   */\n  private fieldActionArgumentToExpression(\n    actionArgument: FieldActionArgumentValue,\n    actionArgType: string\n  ): string {\n    if (actionArgType === 'string') {\n      return \"'\" + actionArgument.value + \"'\";\n    } else {\n      return actionArgument.value;\n    }\n  }\n\n  /**\n   * Create a conditional expression fragment based on a single field action\n   * and its arguments if any.\n   *\n   * @param mappedField\n   * @param mfActionIndex\n   */\n  private fieldActionToExpression(\n    mappedField: MappedField,\n    mfActionIndex: number\n  ): string {\n    let action = mappedField.actions[mfActionIndex];\n    let expression = action.name + ' (';\n    if (mfActionIndex < mappedField.actions.length - 1) {\n      mfActionIndex++;\n      expression += this.fieldActionToExpression(mappedField, mfActionIndex);\n    } else {\n      expression += this.qualifiedExpressionRef(mappedField);\n    }\n    if (action.argumentValues.length > 0) {\n      for (\n        let actionArgIndex = 0;\n        actionArgIndex < action.argumentValues.length;\n        actionArgIndex++\n      ) {\n        expression +=\n          ', ' +\n          this.fieldActionArgumentToExpression(\n            action.argumentValues[actionArgIndex],\n            action.definition!.arguments[actionArgIndex].type\n          );\n      }\n    }\n    expression += ')';\n    return expression;\n  }\n\n  /**\n   * Create a conditional expression fragment based on the field actions of the specified\n   * mapping model and the root field reference.\n   *\n   * @param mapping\n   */\n  private fieldActionsToExpression(mapping: MappingModel): string {\n    let expression = '';\n    let mappedField: MappedField;\n\n    for (\n      let mappedFieldIndex = 0;\n      mappedFieldIndex < mapping.sourceFields.length;\n      mappedFieldIndex++\n    ) {\n      mappedField = mapping.sourceFields[mappedFieldIndex];\n      if (mappedField.actions.length > 0) {\n        let mfActionIndex = 0;\n        expression += this.fieldActionToExpression(mappedField, mfActionIndex);\n      } else {\n        expression += this.qualifiedExpressionRef(mappedField);\n      }\n      if (mappedFieldIndex !== mapping.sourceFields.length - 1) {\n        expression += ', ';\n      }\n    }\n    return expression;\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\nimport {\n  ErrorInfo,\n  ErrorLevel,\n  ErrorScope,\n  ErrorType,\n} from '../models/error.model';\nimport {\n  IAtlasMappingContainer,\n  IValidationsContainer,\n} from '../contracts/mapping';\nimport { LookupTableData, LookupTableUtil } from '../utils/lookup-table-util';\nimport { MappedField, MappingModel } from '../models/mapping.model';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { CommonUtil } from '../utils/common-util';\nimport { ConfigModel } from '../models/config.model';\nimport { Field } from '../models/field.model';\nimport { FieldAction } from '../models/field-action.model';\nimport { MappingDefinition } from '../models/mapping-definition.model';\nimport { MappingSerializer } from '../utils/mapping-serializer';\nimport { MappingUtil } from '../utils/mapping-util';\nimport { Multiplicity } from '../contracts/field-action';\nimport { PaddingField } from '../models/document-definition.model';\nimport { TransitionMode } from '../models/transition.model';\nimport ky from 'ky';\nimport log from 'loglevel';\n\n/**\n * Handles mapping updates. It restores mapping status from backend and reflect in UI,\n * and/or reflect mapping changes caused by the user action made in UI to the backend.\n */\nexport class MappingManagementService {\n  _cfg!: ConfigModel;\n\n  lineRefreshSource = new Subject<void>();\n  lineRefresh$ = this.lineRefreshSource.asObservable();\n  mappingUpdatedSource = new Subject<void>();\n  mappingUpdated$ = this.mappingUpdatedSource.asObservable();\n\n  debugMappingUpdatedSubscription?: Subscription;\n\n  mappingSelectionRequiredSource = new Subject<Field>();\n  mappingSelectionRequired$ =\n    this.mappingSelectionRequiredSource.asObservable();\n\n  constructor(private api: typeof ky) {}\n\n  get cfg() {\n    return this._cfg;\n  }\n\n  set cfg(cfg: ConfigModel) {\n    this._cfg = cfg;\n    if (!this._cfg.logger) {\n      this._cfg.logger = log.getLogger('mapping-management');\n    }\n    if (this._cfg.logger.getLevel() <= this._cfg.logger.levels.DEBUG) {\n      this.mappingUpdated$.subscribe(() => {\n        if (!this.cfg.mappings) {\n          return;\n        }\n        if (this.cfg.mappings && this.cfg.mappings.activeMapping) {\n          this.cfg.logger!.info(\n            'mapping updated: ' +\n              JSON.stringify(MappingSerializer.serializeMappings(this.cfg))\n          );\n        }\n      });\n    }\n  }\n\n  /**\n   * Retrieve current mapping definition JSON file from backend, deserialize it and\n   * load it into AtlasMap UI.\n   *\n   * @param mappingDefinition {@link MappingDefinition}\n   * @returns\n   */\n  fetchMappings(\n    _mappingFiles: string[],\n    mappingDefinition: MappingDefinition\n  ): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      this.cfg.fileService\n        .getCurrentMappingJson()\n        .then(async (mappingJson: any) => {\n          if (!mappingJson) {\n            resolve(false);\n            return;\n          }\n          this.cfg.mappings = mappingDefinition;\n          MappingSerializer.deserializeMappingServiceJSON(\n            mappingJson,\n            this.cfg\n          );\n          this.updateMappingsTransition();\n          resolve(true);\n        })\n        .catch((error) => {\n          this.cfg.errorService.addBackendError(\n            'Failed to load mapping definition from backend:',\n            error\n          );\n          resolve(false);\n        });\n    });\n  }\n\n  updateMappingsTransition() {\n    this.cfg\n      .mappings!.getAllMappings(true)\n      .forEach((m) => this.updateTransition(m)); // TODO: check this non null operator\n  }\n\n  updateActiveMappingTransition() {\n    if (this.cfg.mappings?.activeMapping) {\n      this.updateTransition(this.cfg.mappings?.activeMapping);\n    }\n  }\n\n  /**\n   * Remove the specified mapping model from the mappings array and update the runtime.\n   *\n   * @param mappingModel\n   */\n  async removeMapping(mappingModel: MappingModel): Promise<boolean> {\n    return new Promise<boolean>(async (resolve) => {\n      const mappingWasRemoved: boolean =\n        this.cfg.mappings!.removeMapping(mappingModel); // TODO: check this non null operator\n      if (mappingWasRemoved) {\n        this.deselectMapping();\n        await this.notifyMappingUpdated();\n      } else {\n        this.deselectMapping();\n      }\n      resolve(true);\n    });\n  }\n\n  /**\n   * Remove all mappings from the current session.\n   */\n  async removeAllMappings(): Promise<boolean> {\n    return new Promise<boolean>(async (resolve) => {\n      // TODO: check these non null operator on the mappings\n      for (const mapping of this.cfg.mappings!.getAllMappings(true)) {\n        this.cfg.mappings!.removeMapping(mapping);\n        this.deselectMapping();\n      }\n      await this.notifyMappingUpdated();\n      resolve(true);\n    });\n  }\n\n  async updateMappedField(mapping: MappingModel): Promise<boolean> {\n    return new Promise<boolean>(async (resolve) => {\n      if (mapping.isEmpty()) {\n        this.cfg.mappings!.removeMapping(mapping); // TODO: check this non null operator\n        this.deselectMapping();\n      } else {\n        this.updateTransition(mapping);\n      }\n      await this.notifyMappingUpdated();\n      resolve(true);\n    });\n  }\n\n  /**\n   * Move the specified mapped field in the specified mapping to the specified index.\n   *\n   * @param mapping\n   * @param insertedMappedField\n   * @param targetIndex\n   */\n  moveMappedFieldTo(\n    mapping: MappingModel,\n    insertedMappedField: MappedField,\n    targetIndex: number\n  ): void {\n    if (!mapping || !insertedMappedField) {\n      return;\n    }\n    const mappedFields = mapping.getMappedFields(\n      insertedMappedField.isSource()\n    );\n    mappedFields.splice(\n      mapping.getIndexForMappedField(insertedMappedField)! - 1,\n      1\n    );\n    mappedFields.splice(targetIndex - 1, 0, insertedMappedField);\n    this.clearExtraPaddingFields(mappedFields, true);\n    this.notifyMappingUpdated();\n  }\n\n  /**\n   * Given an index range, fill in the mappings gap with place-holder fields.\n   *\n   * @param count - number of padding fields to add\n   * @param mapping - mapping to modify\n   * @param basePadIndex - 0 based\n   * @param isSource\n   */\n  addPlaceholders(\n    count: number,\n    mapping: MappingModel,\n    basePadIndex: number,\n    isSource: boolean\n  ) {\n    let padField = null;\n    for (let i = 0; i < count; i++) {\n      padField = new MappedField();\n      padField.field = new PaddingField(isSource);\n      if (isSource) {\n        mapping.sourceFields.splice(basePadIndex + i, 0, padField);\n      } else {\n        mapping.targetFields.splice(basePadIndex + i, 0, padField);\n      }\n    }\n  }\n\n  addFieldToActiveMapping(field: Field): void {\n    let mapping: MappingModel | null = this.cfg.mappings!.activeMapping;\n    if (!mapping) {\n      this.cfg.errorService.addError(\n        new ErrorInfo({\n          message: `No mapping is selected to add a field '${field.name}'`,\n          level: ErrorLevel.ERROR,\n          scope: ErrorScope.MAPPING,\n          type: ErrorType.USER,\n        })\n      );\n      return;\n    }\n\n    const exclusionReason = this.getFieldSelectionExclusionReason(\n      mapping,\n      field\n    );\n    if (exclusionReason != null) {\n      this.cfg.errorService.addError(\n        new ErrorInfo({\n          message: `The field '${field.name}' cannot be selected, ${exclusionReason}.`,\n          level: ErrorLevel.ERROR,\n          mapping: mapping,\n          scope: ErrorScope.MAPPING,\n          type: ErrorType.USER,\n        })\n      );\n      return;\n    }\n    mapping.addField(field, false);\n\n    this.updateTransition(mapping);\n    if (mapping.sourceFields.length > 0 || mapping.targetFields.length > 0) {\n      this.notifyMappingUpdated();\n    }\n    return;\n  }\n\n  getFieldSelectionExclusionReason(\n    mapping: MappingModel,\n    field: Field\n  ): string | null {\n    if (!field.isTerminal()) {\n      return 'field is a parent field';\n    }\n\n    if (mapping.getAllMappedFields().length === 0) {\n      // if mapping hasn't had a field selected yet, allow it\n      return null;\n    }\n\n    // Non-collection target fields may only be mapped once.\n    const existingMappedField = mapping.getMappedTarget(field);\n    if (existingMappedField != null && !field.isInCollection) {\n      return (\n        'it is already the target of another mapping (' +\n        existingMappedField +\n        '). '\n      );\n    }\n\n    const lookupMode: boolean = mapping.isLookupMode();\n\n    if (lookupMode) {\n      if (!field.enumeration) {\n        return 'only Enumeration fields are valid for this mapping';\n      }\n      return null;\n    }\n    // enums are not selectable in these modes\n    if (field.enumeration) {\n      return 'Enumeration fields are not valid for this mapping';\n    }\n    // Expression mapping\n    if (\n      mapping.transition.enableExpression &&\n      !field.isSource() &&\n      mapping.getMappedFields(false).length > 0\n    ) {\n      return 'cannot add multiple target fields when conditional mapping is enabled.';\n    }\n\n    return null;\n  }\n\n  isFieldSelectable(mapping: MappingModel, field: Field): boolean {\n    return this.getFieldSelectionExclusionReason(mapping, field) == null;\n  }\n\n  /**\n   * Instantiate a new mapping model and associate the selected field with it.\n   * @param selectedField\n   * @param compoundSelection - indicates a compound-selection (ctrl/cmd-M1) if true, standard mouse click if false.\n   */\n  addNewMapping(selectedField: Field, compoundSelection: boolean): void {\n    if (!compoundSelection) {\n      this.deselectMapping();\n    }\n    const mapping: MappingModel = new MappingModel();\n    if (selectedField != null) {\n      mapping.addField(selectedField, false);\n      this.updateTransition(mapping);\n      this.selectMapping(mapping);\n      this.notifyMappingUpdated();\n    } else {\n      this.selectMapping(mapping);\n    }\n  }\n\n  /**\n   * Instantiate a new mapping model.\n   */\n  newMapping(): void {\n    this.deselectMapping();\n    const mapping: MappingModel = new MappingModel();\n    // Determine type of mapping (i.e., transition mode)\n    this.updateTransition(mapping);\n    // SelectMapping marks new mapping as active mapping, which is necessary so\n    // that it gets added to the existing mappings in notifyMappingUpdated().\n    // TODO: this seems very unintuitive, seems like some step to explicitly\n    // add the new mapping would make more sense\n    this.selectMapping(mapping);\n    this.notifyMappingUpdated();\n  }\n\n  selectMapping(mappingModel: MappingModel) {\n    if (mappingModel == null) {\n      this.deselectMapping();\n      return;\n    }\n    this.cfg.mappings!.activeMapping = mappingModel; // TODO: check this non null operator\n    this.cfg.showMappingDetailTray = true;\n    this.mappingUpdatedSource.next();\n  }\n\n  deselectMapping(): void {\n    this.cfg.showMappingDetailTray = false;\n    this.cfg.mappings!.activeMapping = null; // TODO: check this non null operator\n    this.notifyMappingUpdated();\n  }\n\n  /**\n   * Remove any mappings referencing the specified document ID.\n   *\n   * @param docId - Specified document ID\n   * @param cfg\n   */\n  removeDocumentReferenceFromAllMappings(docId: string) {\n    for (const mapping of this.cfg.mappings!.getAllMappings(true)) {\n      for (const mappedField of mapping.getAllFields()) {\n        if (\n          mappedField instanceof PaddingField ||\n          mappedField.docDef.id !== docId\n        ) {\n          continue;\n        }\n        this.removeFieldFromAllMappings(mappedField);\n        if (\n          mapping.sourceFields.length === 0 ||\n          mapping.targetFields.length === 0\n        ) {\n          this.cfg.mappings!.removeMapping(mapping); // TODO: check this non null operator\n          if (mapping === this.cfg.mappings!.activeMapping) {\n            // TODO: check this non null operator\n            this.cfg.mappingService.deselectMapping();\n          }\n        }\n      }\n    }\n  }\n\n  removeFieldFromAllMappings(field: Field): void {\n    // TODO: check this non null operator\n    for (const mapping of this.cfg.mappings!.getAllMappings(true)) {\n      const mappedField = mapping.getMappedFieldForField(field);\n      if (mappedField != null) {\n        mapping.removeMappedField(mappedField);\n        if (mapping.isEmpty()) {\n          this.cfg.mappings!.removeMapping(mapping); // TODO: check this non null operator\n        }\n      }\n    }\n  }\n\n  /**\n   * Invoke the runtime service to validate the current active mapping.\n   */\n  private async validateMappings(\n    payload: IAtlasMappingContainer\n  ): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      if (\n        this.cfg.initCfg.baseMappingServiceUrl === null ||\n        this.cfg.mappings === null\n      ) {\n        // validation service not configured or required\n        resolve(false);\n        return;\n      }\n\n      this.cfg.errorService.clearValidationErrors();\n      const url: string =\n        this.cfg.initCfg.baseMappingServiceUrl +\n        'mapping/validate/' +\n        this.cfg.mappingDefinitionId;\n      this.cfg.logger!.debug(\n        `Validation Service Request: ${JSON.stringify(payload)}\\n`\n      );\n      this.api\n        .put(url, { json: payload })\n        .json<IValidationsContainer>()\n        .then((body) => {\n          this.cfg.logger!.debug(\n            `Validation Service Response: ${JSON.stringify(body)}\\n`\n          );\n          this.processValidationResponse(body, resolve);\n        })\n        .catch(() => {\n          this.cfg.logger!.warn('Unable to fetch validation data.');\n          resolve(false);\n        });\n    });\n  }\n\n  private processValidationResponse(\n    body: IValidationsContainer,\n    resolve: (value: boolean) => void\n  ) {\n    if (this.cfg.mappings === null) {\n      resolve(false);\n      return;\n    }\n    const errors: ErrorInfo[] = [];\n\n    // This should be eventually turned into mapping entry level validation.\n    // https://github.com/atlasmap/atlasmap-ui/issues/116\n    if (body && body.Validations && body.Validations.validation) {\n      for (const validation of body.Validations.validation) {\n        const level: ErrorLevel =\n          ErrorLevel[validation.status ? validation.status : 'ERROR'];\n        let scope: ErrorScope =\n          ErrorScope[validation.scope ? validation.scope : 'MAPPING'];\n        let validatedMapping: MappingModel | undefined = undefined;\n        if (!scope || scope !== ErrorScope.MAPPING || !validation.id) {\n          scope = ErrorScope.APPLICATION;\n        } else {\n          scope = ErrorScope.MAPPING;\n          if (this.cfg.mappings && this.cfg.mappings.mappings) {\n            validatedMapping = this.cfg.mappings.mappings.find(\n              (m) => m.uuid === validation.id\n            )!; // TODO: check this non null operator\n          }\n        }\n        errors.push(\n          new ErrorInfo({\n            message: validation.message,\n            level: level,\n            scope: scope,\n            mapping: validatedMapping,\n            type: ErrorType.VALIDATION,\n          })\n        );\n      }\n    }\n    this.cfg.errorService.addError(...errors);\n    resolve(true);\n  }\n\n  /**\n   * Notify the line machine to update the lines between panels.  Most widgets require a\n   * small delay to allow the panel to complete forming so add it here.\n   */\n  notifyLineRefresh(): void {\n    setTimeout(() => {\n      this.lineRefreshSource.next();\n    }, 1);\n  }\n\n  /**\n   * Validate and save complete mappings.  Triggered either as an observable\n   * or directly.\n   */\n  notifyMappingUpdated(): Promise<boolean> {\n    return new Promise<boolean>(async (resolve) => {\n      if (this.cfg.mappings) {\n        const activeMapping: MappingModel = this.cfg.mappings.activeMapping!; // TODO: check this non null operator\n        if (\n          activeMapping &&\n          this.cfg.mappings.mappings.indexOf(activeMapping) === -1\n        ) {\n          this.cfg.mappings.mappings.push(activeMapping);\n        }\n        const payload = MappingSerializer.serializeMappings(this.cfg);\n        if (await this.validateMappings(payload)) {\n          await this.cfg.fileService.setMappingToService(payload);\n        }\n      }\n      this.mappingUpdatedSource.next();\n      this.notifyLineRefresh();\n      resolve(true);\n    });\n  }\n\n  /**\n   * Update mode transition from a single mapping to multiple-mappings and back.\n   *\n   * @param mapping\n   * @param position\n   * @param offset\n   */\n  private updateTransition(mapping: MappingModel): void {\n    if (mapping.transition.enableExpression) {\n      return;\n    }\n\n    for (const field of mapping.getAllFields()) {\n      if (field.enumeration) {\n        mapping.transition.mode = TransitionMode.ENUM;\n        LookupTableUtil.populateMappingLookupTable(this.cfg.mappings!, mapping); // TODO: check this non null operator\n        return;\n      }\n    }\n\n    const sourceMappedFields = mapping.getMappedFields(true);\n    const sourceMappedCollection = MappingUtil.hasMappedCollection(\n      mapping,\n      true\n    );\n    const targetMappedFields = mapping.getMappedFields(false);\n    const targetMappedCollection = MappingUtil.hasMappedCollection(\n      mapping,\n      false\n    );\n\n    if (sourceMappedCollection && targetMappedCollection) {\n      mapping.transition.mode = TransitionMode.FOR_EACH;\n      return;\n    }\n    if (sourceMappedFields.length > 1 || sourceMappedCollection) {\n      mapping.transition.mode = TransitionMode.MANY_TO_ONE;\n      if (\n        !mapping.transition.transitionFieldAction ||\n        !mapping.transition.transitionFieldAction.definition ||\n        mapping.transition.transitionFieldAction.definition.multiplicity !==\n          Multiplicity.MANY_TO_ONE\n      ) {\n        mapping.transition.transitionFieldAction = FieldAction.create(\n          this.cfg.fieldActionService.getActionDefinitionForName(\n            'Concatenate',\n            Multiplicity.MANY_TO_ONE\n          )!\n        ); // TODO: check this non null operator\n        mapping.transition.transitionFieldAction.setArgumentValue(\n          'delimiter',\n          ' '\n        );\n        mapping.transition.transitionFieldAction.setArgumentValue(\n          'delimitingEmptyValues',\n          'true'\n        );\n      }\n      return;\n    }\n    if (targetMappedFields.length > 1 || targetMappedCollection) {\n      mapping.transition.mode = TransitionMode.ONE_TO_MANY;\n      if (\n        !mapping.transition.transitionFieldAction ||\n        mapping.transition.transitionFieldAction.definition?.multiplicity !==\n          Multiplicity.ONE_TO_MANY\n      ) {\n        mapping.transition.transitionFieldAction = FieldAction.create(\n          this.cfg.fieldActionService.getActionDefinitionForName(\n            'Split',\n            Multiplicity.ONE_TO_MANY\n          )!\n        ); // TODO: check this non null operator\n        mapping.transition.transitionFieldAction.setArgumentValue(\n          'delimiter',\n          ' '\n        );\n        mapping.transition.transitionFieldAction.setArgumentValue(\n          'collapseRepeatingDelimiters',\n          'false'\n        );\n      }\n      return;\n    }\n    mapping.transition.mode = TransitionMode.ONE_TO_ONE;\n    mapping.transition.transitionFieldAction = null;\n  }\n\n  /**\n   * Remove any trailing padding fields for the mapped field array.  This occurs when a user moves\n   * a mapped element above the last padding field.\n   *\n   * @param mappedFields\n   * @param trailing - Remove trailing padding fields only\n   */\n  private clearExtraPaddingFields(\n    mappedFields: MappedField[],\n    trailing: boolean\n  ): void {\n    let index = 0;\n    let mField = null;\n\n    for (index = mappedFields.length - 1; index >= 0; index--) {\n      mField = mappedFields[index];\n      if (mField.isPadField()) {\n        CommonUtil.removeItemFromArray(mField, mappedFields);\n        continue;\n      }\n      if (trailing) {\n        break;\n      }\n    }\n  }\n\n  /**\n   * Get the enumeration values for the specified mapping and return it in\n   * the form of a lookup table.\n   *\n   * @param cfg\n   * @param mapping\n   */\n  getEnumerationValues(\n    cfg: ConfigModel,\n    mapping: MappingModel\n  ): LookupTableData[] {\n    return LookupTableUtil.getEnumerationValues(cfg, mapping);\n  }\n\n  /**\n   * Set the enumeration field value based on the specified enumeration value index.\n   *\n   * @param enumerationField\n   * @param enumerationValue\n   */\n  setEnumFieldValue(enumerationField: Field, enumerationValue: number) {\n    enumerationField.enumIndexValue = enumerationValue;\n  }\n\n  /**\n   * Update the enumeration values for the specified mapping with the specified\n   * enumeration values.\n   *\n   * @param cfg\n   * @param mapping\n   * @param enumerationValues\n   */\n  updateEnumerationValues(\n    cfg: ConfigModel,\n    mapping: MappingModel,\n    enumerationValues: LookupTableData[]\n  ): void {\n    LookupTableUtil.updateEnumerationValues(cfg, mapping, enumerationValues);\n    this.notifyMappingUpdated();\n  }\n\n  /**\n   * Return true if the specified mapping is an enumeration mapping, false otherwise.\n   *\n   * @param mapping\n   */\n  isEnumerationMapping(mapping: MappingModel): boolean {\n    return mapping.transition.mode === TransitionMode.ENUM;\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport {\n  ErrorInfo,\n  ErrorLevel,\n  ErrorScope,\n  ErrorType,\n} from '../models/error.model';\nimport {\n  IProcessMappingRequestContainer,\n  IProcessMappingResponseContainer,\n  PROCESS_MAPPING_REQUEST_JSON_TYPE,\n} from '../contracts/mapping-preview';\nimport { Subject, Subscription } from 'rxjs';\nimport { ConfigModel } from '../models/config.model';\nimport { MappingModel } from '../models/mapping.model';\nimport { MappingSerializer } from '../utils/mapping-serializer';\nimport ky from 'ky';\n\n/**\n * Manages Mapping Preview.\n */\nexport class MappingPreviewService {\n  cfg!: ConfigModel;\n\n  mappingPreviewInputSource = new Subject<MappingModel>();\n  mappingPreviewInput$ = this.mappingPreviewInputSource.asObservable();\n  mappingPreviewOutputSource = new Subject<MappingModel>();\n  mappingPreviewOutput$ = this.mappingPreviewOutputSource.asObservable();\n  mappingPreviewErrorSource = new Subject<ErrorInfo[]>();\n  mappingPreviewError$ = this.mappingPreviewErrorSource.asObservable();\n\n  private mappingPreviewInputSubscription?: Subscription;\n  private mappingUpdatedSubscription?: Subscription;\n\n  constructor(private api: typeof ky) {}\n\n  /**\n   * Enable Mapping Preview.\n   */\n  enableMappingPreview(): void {\n    if (this.cfg.initCfg.baseMappingServiceUrl == null) {\n      // process mapping service not configured.\n      return;\n    }\n    this.cfg.showMappingPreview = true;\n    this.mappingPreviewInputSubscription =\n      this.createMappingPreviewSubscription();\n    this.mappingUpdatedSubscription = this.createMappingUpdatedSubscription();\n  }\n\n  private createMappingPreviewSubscription(): Subscription {\n    return this.mappingPreviewInput$.subscribe((inputFieldMapping) => {\n      if (!inputFieldMapping || !inputFieldMapping.isFullyMapped()) {\n        return;\n      }\n      let hasValue = false;\n      for (const sourceField of inputFieldMapping.getFields(true)) {\n        if (sourceField.value) {\n          hasValue = true;\n          break;\n        }\n      }\n      if (!hasValue) {\n        for (const targetField of inputFieldMapping.getFields(false)) {\n          if (targetField.value) {\n            hasValue = true;\n            break;\n          }\n        }\n      }\n      if (!hasValue) {\n        return;\n      }\n      const payload = this.createPreviewRequestBody(inputFieldMapping);\n      this.cfg.logger!.debug(\n        `Process Mapping Preview Request: ${JSON.stringify(payload)}`\n      );\n      const url: string =\n        this.cfg.initCfg.baseMappingServiceUrl + 'mapping/process';\n      this.api\n        .put(url, { json: payload })\n        .json<IProcessMappingResponseContainer>()\n        .then((body) => {\n          this.cfg.logger!.debug(\n            `Process Mapping Preview Response: ${JSON.stringify(body)}`\n          );\n          this.processPreviewResponse(inputFieldMapping, body);\n        })\n        .catch((error: any) => {\n          if (\n            this.cfg.mappings &&\n            this.cfg.mappings.activeMapping &&\n            this.cfg.mappings.activeMapping === inputFieldMapping\n          ) {\n            this.cfg.errorService.addError(\n              new ErrorInfo({\n                message: error,\n                level: ErrorLevel.ERROR,\n                mapping: inputFieldMapping,\n                scope: ErrorScope.MAPPING,\n                type: ErrorType.PREVIEW,\n              })\n            );\n          }\n          this.mappingPreviewErrorSource.next([\n            new ErrorInfo({ message: error, level: ErrorLevel.ERROR }),\n          ]);\n        });\n    });\n  }\n\n  private createPreviewRequestBody(\n    inputFieldMapping: MappingModel\n  ): IProcessMappingRequestContainer {\n    return {\n      ProcessMappingRequest: {\n        jsonType: PROCESS_MAPPING_REQUEST_JSON_TYPE,\n        mapping: MappingSerializer.serializeFieldMapping(\n          this.cfg,\n          inputFieldMapping,\n          'preview',\n          false\n        ),\n      },\n    };\n  }\n\n  private processPreviewResponse(\n    inputFieldMapping: MappingModel,\n    body: IProcessMappingResponseContainer\n  ) {\n    const answer = MappingSerializer.deserializeFieldMapping(\n      body.ProcessMappingResponse.mapping,\n      this.cfg\n    );\n    for (const toWrite of inputFieldMapping.targetFields) {\n      for (const toRead of answer.targetFields) {\n        // TODO: check these non null operator\n        if (\n          toWrite.field?.docDef?.id === toRead.field?.docDef.id &&\n          toWrite.field?.path === toRead.field?.path\n        ) {\n          // TODO let field component subscribe mappingPreviewOutputSource instead of doing this\n          // TODO: check this non null operator\n          toWrite.field!.value = toRead.mappingField?.value!;\n          const index = answer.targetFields.indexOf(toRead);\n          if (index !== -1) {\n            answer.targetFields.splice(index, 1);\n            break;\n          }\n        }\n      }\n    }\n    this.mappingPreviewOutputSource.next(answer);\n    const audits = MappingSerializer.deserializeAudits(\n      body.ProcessMappingResponse.audits,\n      ErrorType.PREVIEW\n    );\n    // TODO: check this non null operator\n    if (this.cfg.mappings!.activeMapping === inputFieldMapping) {\n      audits.forEach((a) => (a.mapping = inputFieldMapping));\n      this.cfg.errorService.addError(...audits);\n    }\n    this.mappingPreviewErrorSource.next(audits);\n  }\n\n  private createMappingUpdatedSubscription(): Subscription {\n    return this.cfg.mappingService.mappingUpdated$.subscribe(() => {\n      if (!this.cfg || !this.cfg.mappings || !this.cfg.mappings.activeMapping) {\n        return;\n      }\n      if (this.cfg.mappings.activeMapping.isFullyMapped()) {\n        this.mappingPreviewInputSource.next(this.cfg.mappings.activeMapping);\n      }\n    });\n  }\n\n  /**\n   * On mapping preview disable, clear any preview values and unsubscribe from\n   * both the mapping-updated and mapping-preview subscriptions.\n   */\n  disableMappingPreview(): void {\n    let mappedValueCleared = false;\n    this.cfg.showMappingPreview = false;\n\n    // Clear any preview values on mapping preview disable.\n    if (this.cfg.mappings?.activeMapping?.isFullyMapped()) {\n      for (const mapping of this.cfg.mappings.getAllMappings(true)) {\n        for (const mappedField of mapping.getAllFields()) {\n          if (mappedField.value?.length > 0 && !mappedField.isConstant()) {\n            mappedField.value = '';\n            mappedValueCleared = true;\n          }\n        }\n      }\n    }\n    if (mappedValueCleared) {\n      this.cfg.mappingService.notifyMappingUpdated();\n    }\n    if (this.mappingUpdatedSubscription) {\n      this.mappingUpdatedSubscription.unsubscribe();\n      this.mappingUpdatedSubscription = undefined;\n    }\n    if (this.mappingPreviewInputSubscription) {\n      this.mappingPreviewInputSubscription.unsubscribe();\n      this.mappingPreviewInputSubscription = undefined;\n    }\n  }\n\n  /**\n   * Toggle Mapping Preview.\n   * @param enabled\n   */\n  toggleMappingPreview(enabled: boolean) {\n    if (enabled) {\n      this.enableMappingPreview();\n    } else {\n      this.disableMappingPreview();\n    }\n    return enabled;\n  }\n}\n","/*\n    Copyright (C) 2017 Red Hat, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n            http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\nimport { DocumentType, IStringContainer } from '../contracts/common';\nimport {\n  ErrorInfo,\n  ErrorLevel,\n  ErrorScope,\n  ErrorType,\n} from '../models/error.model';\nimport { Observable, Subject } from 'rxjs';\n\nimport { ADMDigest } from '../contracts/adm-digest';\nimport { CommonUtil } from '../utils/common-util';\nimport { ConfigModel } from '../models/config.model';\nimport { DocumentManagementService } from './document-management.service';\nimport { ErrorHandlerService } from './error-handler.service';\nimport { FieldActionService } from './field-action.service';\nimport { FileManagementService } from './file-management.service';\nimport { LookupTableUtil } from '../utils/lookup-table-util';\nimport { MappingDefinition } from '../models/mapping-definition.model';\nimport { MappingExpressionService } from './mapping-expression.service';\nimport { MappingManagementService } from './mapping-management.service';\nimport { MappingPreviewService } from './mapping-preview.service';\nimport { MappingSerializer } from '../utils/mapping-serializer';\nimport { MappingUtil } from '../utils/mapping-util';\nimport ky from 'ky/umd';\nimport log from 'loglevel';\n\nlog.setDefaultLevel(log.levels.WARN);\n\n/**\n * Initialize AtlasMap UI core library. It initializes {@link ConfigModel} and core services.\n */\nexport class InitializationService {\n  cfg: ConfigModel = ConfigModel.getConfig();\n\n  systemInitializedSource = new Subject<void>();\n  systemInitialized$: Observable<void> =\n    this.systemInitializedSource.asObservable();\n\n  initializationStatusChangedSource = new Subject<void>();\n  initializationStatusChanged$: Observable<void> =\n    this.initializationStatusChangedSource.asObservable();\n\n  private documentService: DocumentManagementService;\n  private mappingService: MappingManagementService;\n  private errorService: ErrorHandlerService;\n  private fieldActionService: FieldActionService;\n  private fileService: FileManagementService;\n  private previewService: MappingPreviewService;\n  private expressionService: MappingExpressionService;\n\n  constructor(private api: typeof ky) {\n    this.documentService = new DocumentManagementService(this.api);\n    this.mappingService = new MappingManagementService(this.api);\n    this.errorService = new ErrorHandlerService();\n    this.fieldActionService = new FieldActionService(this.api);\n    this.fileService = new FileManagementService(this.api);\n    this.previewService = new MappingPreviewService(this.api);\n    this.expressionService = new MappingExpressionService();\n    this.resetConfig();\n    this.documentService.initialize();\n  }\n\n  resetConfig(): void {\n    this.cfg = new ConfigModel();\n    this.cfg.documentService = this.documentService;\n    this.cfg.documentService.cfg = this.cfg;\n    this.cfg.mappingService = this.mappingService;\n    this.cfg.mappingService.cfg = this.cfg;\n    this.cfg.errorService = this.errorService;\n    this.cfg.fieldActionService = this.fieldActionService;\n    this.cfg.fieldActionService.cfg = this.cfg;\n    this.cfg.fileService = this.fileService;\n    this.cfg.fileService.cfg = this.cfg;\n    this.cfg.previewService = this.previewService;\n    this.cfg.previewService.cfg = this.cfg;\n    this.cfg.expressionService = this.expressionService;\n    this.cfg.expressionService.cfg = this.cfg;\n    this.cfg.initializationService = this;\n    this.cfg.logger = log.getLogger('config');\n    ConfigModel.setConfig(this.cfg);\n  }\n\n  initialize(): Promise<boolean> {\n    return new Promise<boolean>(async (resolve) => {\n      this.cfg.setConstantPropertyDocs();\n      this.cfg.errorService.resetAll();\n      this.cfg.fieldActionService.isInitialized = false;\n      this.cfg.initCfg.initialized = false;\n      this.cfg.initCfg.mappingInitialized = false;\n\n      if (this.cfg.mappingService == null) {\n        this.cfg.errorService.addError(\n          new ErrorInfo({\n            message:\n              'Mapping service is not configured, validation service will not be used.',\n            level: ErrorLevel.WARN,\n            scope: ErrorScope.APPLICATION,\n            type: ErrorType.INTERNAL,\n          })\n        );\n      } else if (this.cfg.initCfg.baseMappingServiceUrl == null) {\n        this.cfg.errorService.addError(\n          new ErrorInfo({\n            message:\n              'Mapping service URL is not configured, validation service will not be used.',\n            level: ErrorLevel.WARN,\n            scope: ErrorScope.APPLICATION,\n            type: ErrorType.INTERNAL,\n          })\n        );\n      }\n\n      if (!this.cfg.fieldActionService) {\n        this.handleError('FieldActionService is not configured');\n        resolve(false);\n        return;\n      }\n\n      // Verify the runtime service is out there.\n      try {\n        if (!(await this.runtimeServiceActive())) {\n          this.handleError('The AtlasMap runtime service is not available.');\n          resolve(false);\n          return;\n        }\n      } catch (error) {\n        this.handleError('The AtlasMap runtime service is not available.');\n        resolve(false);\n        return;\n      }\n\n      // load documents from initialization parameters in embedded mode\n      this.updateLoadingStatus('Loading source/target documents.');\n      this.cfg.documentService.inspectDocuments().subscribe({\n        next: () => {\n          this.updateStatus();\n        },\n      });\n\n      this.initializeWithMappingDigest().finally(() => {\n        this.updateStatus();\n      });\n      resolve(true);\n    });\n  }\n\n  /**\n   * Return true if the runtime service is available, false otherwise.\n   */\n  runtimeServiceActive(): Promise<boolean> {\n    return new Promise<boolean>((resolve, reject) => {\n      const url: string = this.cfg.initCfg.baseMappingServiceUrl + 'ping';\n      this.cfg.logger!.debug('Runtime Service Ping Request');\n      this.api\n        .get(url)\n        .json<IStringContainer>()\n        .then((body) => {\n          this.cfg.logger!.debug(\n            `Runtime Service Ping Response: ${body.String}`\n          );\n          resolve(body?.String === 'pong');\n        })\n        .catch((error: any) => {\n          reject(error);\n        });\n    });\n  }\n\n  /**\n   * Retrieve AtlasMap design time backend runtime version.\n   * @returns\n   */\n  getRuntimeVersion(): Promise<string> {\n    const url = this.cfg.initCfg.baseMappingServiceUrl + 'version';\n    return new Promise<string>((resolve, reject) => {\n      this.api\n        .get(url)\n        .json<IStringContainer>()\n        .then((body) => {\n          this.cfg.logger!.debug(\n            `Runtime Service Version Response: ${body.String}`\n          );\n          resolve(body.String);\n        })\n        .catch((error) => {\n          reject(error);\n        });\n    });\n  }\n\n  /**\n   * Initialize with the {@link ADMDigest} mapping digest from either an imported ADM archive\n   * file or from the DM runtime digest file is presented to update the canvas.\n   *\n   * @param mappingDigest - {@link ADMDigest} mapping digest\n   */\n  private initializeWithMappingDigest(): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      this.cfg.fileService\n        .getCurrentMappingDigest()\n        .then(async (mappingDigest: ADMDigest | null) => {\n          // If digest is null then no compressed mappings digest file is available on the server.\n          if (!mappingDigest) {\n            if (this.cfg.mappings === null) {\n              this.cfg.mappings = new MappingDefinition();\n            }\n\n            // load field actions - do this even with no documents so the default field actions are loaded.\n            await this.cfg.fieldActionService.fetchFieldActions();\n            this.updateStatus();\n            resolve(true);\n            return;\n          }\n\n          await this.addDocumentsFromMappingDigest(mappingDigest);\n\n          if (!mappingDigest || !mappingDigest.exportMappings) {\n            resolve(false);\n            return;\n          }\n          // Reinitialize the model mappings.\n          const digestMappingsName =\n            MappingSerializer.deserializeAtlasMappingName(\n              CommonUtil.objectize(mappingDigest.exportMappings.value)\n            );\n\n          // If the live UI mappings name does not match the UI mappings name extracted from the\n          // catalog file then use the mappings from the catalog file. Otherwise use the live\n          // UI file.\n          this.cfg.fileService\n            .findMappingFiles('UI')\n            .then(async (files: string[]) => {\n              await this.cfg.fileService.setMappingDigestToService(\n                mappingDigest\n              );\n              await this.cfg.fieldActionService.fetchFieldActions();\n              if (digestMappingsName !== files[0]) {\n                await this.cfg.fileService.setMappingStringToService(\n                  mappingDigest.exportMappings.value\n                );\n              }\n              // load both default and custom field actions\n              await this.cfg.fieldActionService.fetchFieldActions();\n\n              // load mappings\n              this.fetchMappings().then((value) => {\n                resolve(value);\n              });\n            })\n            .catch(() => {\n              resolve(false);\n            });\n        })\n        .catch(() => {\n          resolve(false);\n        });\n    });\n  }\n\n  private addDocumentsFromMappingDigest(\n    mappingDigest: ADMDigest\n  ): Promise<boolean> {\n    return new Promise<any>(async (resolve) => {\n      this.cfg.errorService.resetAll();\n\n      let fragIndex = 0;\n\n      // Reinitialize the model documents.\n      for (let metaFragment of mappingDigest.exportMeta) {\n        const fragData = mappingDigest.exportBlockData[fragIndex].value;\n        const docID = metaFragment.id ? metaFragment.id : metaFragment.name;\n        const docType = metaFragment.dataSourceType\n          ? (metaFragment.dataSourceType as DocumentType)\n          : (metaFragment.documentType as DocumentType);\n        const isSource =\n          typeof metaFragment.isSource === 'string'\n            ? (metaFragment.isSource as string).toLowerCase() === 'true'\n            : metaFragment.isSource;\n        await this.cfg.documentService.addDocument(\n          fragData,\n          docID,\n          metaFragment.name,\n          docType,\n          metaFragment.inspectionType,\n          isSource,\n          metaFragment.inspectionParameters\n        );\n        this.updateStatus();\n        fragIndex++;\n      }\n      this.cfg.mappingService.notifyMappingUpdated();\n      resolve(true);\n    });\n  }\n\n  /**\n   * Fetch mapping files and initialize user mappings in the canvas.\n   *\n   * @param mappingFiles\n   */\n  private fetchMappings(): Promise<boolean> {\n    return new Promise<boolean>(async (resolve) => {\n      if (this.cfg.mappings != null) {\n        resolve(true);\n        return;\n      }\n\n      this.cfg.mappings = new MappingDefinition();\n      let mappingFiles = this.cfg.mappingFiles;\n      if (!this.cfg.mappingFiles || this.cfg.mappingFiles.length === 0) {\n        mappingFiles = await this.cfg.fileService.findMappingFiles('UI');\n      }\n      if (mappingFiles.length === 0) {\n        resolve(false);\n      }\n\n      this.cfg.mappingService\n        .fetchMappings(mappingFiles, this.cfg.mappings)\n        .then(() => {\n          this.cfg.initCfg.mappingInitialized = true;\n          this.updateStatus();\n          this.cfg.mappingService\n            .notifyMappingUpdated()\n            .then(() => resolve(true));\n        });\n    });\n  }\n\n  updateStatus(): void {\n    const documentCount: number = this.cfg.getAllDocs().length;\n    let finishedDocCount = 0;\n    for (const docDef of this.cfg.getAllDocs()) {\n      if (docDef.initialized || docDef.errorOccurred) {\n        finishedDocCount++;\n      }\n    }\n\n    if (\n      documentCount === finishedDocCount &&\n      this.cfg.fieldActionService.isInitialized\n    ) {\n      if (this.cfg.preloadedMappingJson) {\n        MappingSerializer.deserializeMappingServiceJSON(\n          JSON.parse(this.cfg.preloadedMappingJson),\n          this.cfg\n        );\n        this.cfg.preloadedMappingJson = null;\n      }\n      if (this.cfg.mappings) {\n        LookupTableUtil.updateLookupTables(this.cfg.mappings);\n        MappingUtil.updateDocumentNamespacesFromMappings(this.cfg);\n        MappingUtil.updateMappingsFromDocuments(this.cfg);\n        for (const d of this.cfg.getAllDocs()) {\n          d.updateFromMappings(this.cfg.mappings);\n        }\n        MappingUtil.removeStaleMappings(this.cfg);\n        this.cfg.mappingService.updateMappingsTransition();\n      }\n      this.updateInitComplete();\n    }\n  }\n\n  private handleError(message: string, error?: any) {\n    message = 'Data Mapper UI Initialization Error: ' + message;\n    this.cfg.errorService.addError(\n      new ErrorInfo({\n        message: message,\n        scope: ErrorScope.APPLICATION,\n        level: ErrorLevel.ERROR,\n        type: ErrorType.INTERNAL,\n        object: error,\n      })\n    );\n    this.updateLoadingStatus(message);\n    this.cfg.initCfg.initializationErrorOccurred = true;\n    this.cfg.initCfg.initialized = true;\n    this.systemInitializedSource.next();\n  }\n\n  updateInitComplete(): void {\n    this.updateLoadingStatus('Initialization complete.');\n    this.cfg.initCfg.initialized = true;\n    this.systemInitializedSource.next();\n  }\n\n  updateLoadingStatus(status: string): void {\n    this.cfg.initCfg.loadingStatus = status;\n    this.initializationStatusChangedSource.next();\n  }\n\n  initializeWithADMArchiveFile(file: File): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      this.updateLoadingStatus('Importing ADM archive file');\n      this.cfg.fileService.importADMArchive(file).then(() => {\n        this.initialize().then((value) => {\n          resolve(value);\n        });\n      });\n    });\n  }\n\n  resetAtlasMap(): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      this.cfg.fileService.resetAll().then((value) => {\n        this.initialize().then((value2) => {\n          resolve(value && value2);\n        });\n      });\n    });\n  }\n}\n"],"names":["FIELD_PATH_SEPARATOR","MODEL_PACKAGE_PREFIX","DATA_SOURCE_JSON_TYPE","DataSourceType","CollectionType","FieldStatus","FieldType","DocumentType","InspectionType","DocumentDefaultName","collectionTypes","ARRAY","LIST","MAP","NONE","constantTypes","propertyTypes","HTTP_STATUS_OK","HTTP_STATUS_NO_CONTENT","getCsvParameterOptions","name","label","value","options","required","JAVA_MODEL_PACKAGE_PREFIX","JAVA_INSPECTION_REQUEST_JSON_TYPE","JAVA_CLASS_JSON_TYPE","JAVA_ENUM_FIELD_JSON_TYPE","Modifier","JSON_MODEL_PACKAGE_PREFIX","JSON_DATA_SOURCE_JSON_TYPE","JSON_ENUM_FIELD_JSON_TYPE","JSON_INSPECTION_REQUEST_JSON_TYPE","XML_MODEL_PACKAGE_PREFIX","XML_DATA_SOURCE_JSON_TYPE","XML_ENUM_FIELD_JSON_TYPE","XML_INSPECTION_REQUEST_JSON_TYPE","Multiplicity","ATLAS_MAPPING_JSON_TYPE","MAPPING_JSON_TYPE","COLLECTION_JSON_TYPE","FIELD_GROUP_JSON_TYPE","PROPERTY_FIELD_JSON_TYPE","CONSTANT_FIELD_JSON_TYPE","MappingType","ValidationScope","ValidationStatus","PROCESS_MAPPING_REQUEST_JSON_TYPE","AuditStatus","CommonUtil","removeItemFromArray","item","items","length","i","itemWasRemoved","splice","splitByString","inStr","splitMarker","splitLoc","splitLocEnd","fragment","splitMarkerLen","result","indexOf","substring","push","str2bytes","str","bytes","Uint8Array","charCodeAt","readFile","file","reader","Promise","resolve","onload","fileBody","readAsText","readBinaryFile","Int8Array","readAsArrayBuffer","writeFile","fileContent","fName","saveAs","toDisplayable","camelCaseString","displayableString","charAt","toUpperCase","index","chr","toLowerCase","extractDisplayPath","path","fieldWidth","MAX_PATH_WIDTH","segmentedPath","split","leaf","substr","delta","sanitizeJSON","buffer","jsonBuffer","JSON","stringify","replace","toString","objectize","parse","EnumValue","Field","jsonType","uuid","uuidCounter","fieldHasUnmappedChild","field","isTerminal","partOfMapping","children","childField","hasUnmappedChildren","getFieldPaths","fields","paths","getFieldNames","getField","fieldPath","find","alphabetizeFields","fieldsByPath","fieldPaths","fieldKey","sort","expandToRoot","parent","collapsed","isPropertyOrConstant","docDef","showFields","parentField","getNameWithNamespace","namespaceAlias","isParentField","isCollection","isPrimitive","type","isStringField","enumeration","copy","Object","assign","documentField","copyFrom","that","getCollectionParentField","isInCollection","getCollectionCount","count","isSource","getCollectionType","isArray","getFieldLabel","showTypes","includePath","pathComps","isAttribute","startsWith","isProperty","PROPERTY","isConstant","CONSTANT","NamespaceModel","getUnqualifiedNamespace","unqualifiedNamespace","ns","alias","getPrettyLabel","isTarget","uri","PaddingField","_isSource","classIdentifier","displayName","DocumentDefinition","getComplexField","complexFieldsByClassIdentifier","getEnumField","enumFieldsByClassIdentifier","getAllFields","allFields","fieldExists","targetField","targetFieldDocDefType","isFieldsExist","foundFields","getFields","getName","getNamespaceForAlias","namespaces","pathSeparator","originalPath","currentParentPath","currentPathSection","populateChildren","getComplexFields","discoverAllComplexFields","getTerminalFields","terminalFields","initializeFromFields","JAVA","prepareComplexFields","populateFieldData","initialized","updateField","oldPath","addField","cachedField","rewriteFieldPath","pathSegments","slice","child","clearFields","getFieldIndex","removeField","targetIndex","oldFieldPath","updateFromMappings","mappingDefinition","partOfTransformation","getAllMappings","mapping","getMappedFieldForField","actions","newFieldKey","discoverComplexFields","key","hasOwnProperty","complexFields","status","concat","_type","DataMapperInitializationModel","DocumentInitializationModel","ConfigModel","setConstantPropertyDocs","getConfig","cfg","setConfig","initializePropertyDoc","propertyDoc","PROPERTIES","id","Math","floor","random","sourcePropertyDoc","targetPropertyDoc","constantDoc","CONSTANTS","addDocument","docInitModel","initModel","description","inspectionType","inspectionSource","inspectionResult","inspectionParameters","selectedRoot","XSD","collectionType","collectionClassName","sourceDocs","targetDocs","addDocuments","docModels","docDefs","docModel","getDocsWithoutPropertyDoc","getDocs","docs","clearDocs","mappingFiles","hasJavaDocuments","getAllDocs","doc","getDocForIdentifier","documentId","d","getFirstXmlDoc","XML","documentsAreLoaded","_showMappingPreview","show","ErrorLevel","ErrorScope","ErrorType","ErrorInfo","init","_identifier","errorIdentifierCounter","Examples","ExpressionUpdatedEvent","node","offset","ExpressionNode","prefix","sequence","getUuid","TextNode","PREFIX","toText","toHTML","FieldNode","mappedField","metaStr","collectionContextPath","fieldParts","getMappedFieldByPath","getReferenceField","getMappedFieldForIndex","enumIdxVal","enumIndexValue","enumValues","textStr","referenceFields","titleAddendum","mappedFieldName","getIndexForMappedField","hasComplexField","fieldType","ExpressionModel","Subject","expressionUpdatedSource","asObservable","generateInitialExpression","getUserMappedFields","forEach","f","appendFieldNode","getLastNodeIndex","_nodes","getLastNode","getNode","nodeId","n","setConfigModel","clearText","startOffset","endOffset","targetNode","lastNode","keyPos","cleanStr","updateCache","next","insertText","insertNodes","createNodesFromText","newNodes","insertPosition","last","updatedEvent","targetNodeIndex","undefined","pre","post","lastNewNodeIndex","mergedTextNode","lastAddedIndex","nodes","space","nextNodeIndex","nextNode","pop","removeToken","tokenPosition","removeNext","removed","mappingService","updateMappedField","targetFieldNode","newOffset","glue","targetString","clearToEnd","updateFieldReference","mappedFields","getReferenceMappedFields","fieldNodes","filter","includes","mfield","r","clear","textCache","expressionHTML","addConditionalExpressionNode","answer","text","position","collectionContextFieldNode","search","nodeMetaVal","fn","isNaN","Number","parseInt","errorService","addError","message","level","ERROR","scope","MAPPING","INTERNAL","_hasComplexField","FieldActionArgument","STRING","FieldActionArgumentValue","FieldActionDefinition","ONE_TO_ONE","populateFieldAction","action","definition","argumentValues","arguments","arg","setArgumentValue","getArgumentForName","argument","FieldAction","create","instance","getArgumentValue","argumentName","argValue","newArgValue","DocumentInspectionModel","parseFieldFromDocument","WARN","APPLICATION","USER","parsedField","DocumentInspectionRequestModel","DocumentInspectionRequestOptions","CsvInspectionModel","CsvInspectionRequestModel","isOnlineInspectionCapable","initCfg","baseCSVInspectionServiceUrl","object","parseResponse","responseJson","CsvInspectionResponse","extractCSVDocumentDefinitionFromInspectionResponse","CsvDocument","extractCSVDocumentDefinition","Error","body","errorMessage","errorOccurred","csvDocument","params","URLSearchParams","parseCSVFieldFromDocument","column","COMPLEX","csvComplexType","csvFields","csvField","CsvInspectionRequestOptions","JavaInspectionModel","JavaInspectionRequestModel","baseJavaInspectionServiceUrl","javaClass","ClassInspectionResponse","JavaClass","docIdentifier","className","lastIndexOf","rootField","valueOf","parseJavaFieldFromDocument","javaFields","javaField","javaEnumFields","javaEnumField","enumValue","parsedEnumValue","ordinal","JavaInspectionRequestOptions","request","ClassInspectionRequest","disablePrivateOnlyFields","disableProtectedOnlyFields","disablePublicOnlyFields","disablePublicGetterSetterFields","json","fieldNameExclusions","string","classNameExclusions","JsonInspectionModel","JsonInspectionRequestModel","baseJSONInspectionServiceUrl","JsonInspectionResponse","extractJSONDocumentDefinitionFromInspectionResponse","JsonDocument","extractJSONDocumentDefinition","jsonDocument","parseJSONFieldFromDocument","complex","jsonEnumFields","jsonEnumField","jsonFields","jsonField","JsonInspectionRequestOptions","JsonInspectionRequest","jsonData","XmlInspectionModel","XmlInspectionRequestModel","baseXMLInspectionServiceUrl","XmlInspectionResponse","extractXMLDocumentDefinitionFromInspectionResponse","XmlDocument","extractXMLDocumentDefinition","xmlDocument","xmlNamespaces","xmlNamespace","serviceNS","locationUri","targetNamespace","isSelectedRootElement","parseXMLFieldFromDocument","xmlEnumFields","xmlEnumField","xmlFields","xmlField","XmlInspectionRequestOptions","XmlInspectionRequest","xmlData","LookupTableEntry","LookupTable","Date","getTime","getInputOutputKey","sourceIdentifier","targetIdentifier","getEntryForSource","sourceValue","autocreate","lookupEntry","entry","counter","targetValue","TransitionMode","TransitionDelimiter","TransitionDelimiterModel","delimiter","serializedValue","prettyName","actualDelimiter","SPACE","TransitionModel","initialize","delimiterModels","models","AMPERSAND","AT_SIGN","BACKSLASH","COLON","COMMA","DASH","EQUAL","HASH","PERIOD","PIPE","SEMICOLON","SLASH","UNDERSCORE","USER_DEFINED","delimiterToModel","model","getMappingModeName","mode","actionName","MANY_TO_ONE","ONE_TO_MANY","ENUM","FOR_EACH","EXPRESSION","getPrettyName","transitionFieldActionName","transitionFieldAction","lookupTableName","expression","isOneToManyMode","isOneToOneMode","isManyToOneMode","isForEachMode","isEnumerationMode","isExpressionMode","MappingDefinition","templateExists","templateText","addTable","table","tablesBySourceTargetKey","tablesByName","tables","getTableByName","getTableBySourceTarget","getTables","removeTableByName","iokey","includeActiveMapping","mappings","activeMapping","findMappingsForField","mappingsForField","m","isFieldMapped","removeMapping","transition","MappedField","sortMappedFieldsByPath","isPadField","removeAction","MappingModel","getFirstCollectionField","sourceFields","targetFields","isLookupMode","first","getMappedFields","unshift","mf","getUserFieldCount","userFieldCount","hasMappedField","isEmpty","isFullyMapped","addMappedField","removeMappedField","removeReferenceField","notifyMappingUpdated","docId","createReferenceField","referenceFieldExists","referenceField","workingFields","resultFields","shift","getLastMappedField","names","hasFieldActions","getAllMappedFields","hasTransformation","getMappedTarget","mappedOutputField","_Pact","prototype","then","onFulfilled","onRejected","state","s","callback","_settle","v","e","o","_this","pact","bind","observer","_isSettledPact","thenable","_forTo","array","check","reject","_cycle","_iteratorSymbol","Symbol","iterator","_forOf","target","step","done","_fixup","TypeError","values","_asyncIteratorSymbol","asyncIterator","_catch","recover","DocumentInspectionUtil","fromDocumentDefinition","CSV","fromJavaProperties","simpleName","JAVA_CLASS","removeDocumentIfAlreadyExists","fromNonJavaProperties","documentType","existing","Guid","newGuid","c","EnumerationUnspecified","LookupTableData","LookupTableUtil","populateMappingLookupTable","inputIdentifier","outputIdentifier","inputField","outputField","updateLookupTables","t","getFirstMappingForLookupTable","errorNoTable","getEnumerationValues","targetValues","enumVals","sourceField","sourceEnum","tableData","sourceEnumValue","targetEnumValues","selected","selectedTargetEnumValue","updateEnumerationValues","enumerationValues","lte","MappingDigestUtil","generateMappingDigest","mappingJson","mappingDigest","exportMappings","exportMeta","exportBlockData","dataSourceType","MappingUtil","updateMappingsFromDocuments","updateMappedFieldsFromDocuments","mappedFieldIndex","mappingField","isPropertyField","isConstantField","constantField","userCreated","propMappingField","propertyField","fieldName","zeroBasedIndex","addPlaceholders","removeStaleMappings","sourceFieldPaths","targetSourcePaths","mappingIsStale","isMappingStale","updateDocumentNamespacesFromMappings","parsedDocs","parsedDoc","getDocById","identifier","hasFieldAction","hasMappedCollection","MappingSerializer","serializeMappings","ignoreValue","jsonMappings","serializedFieldMapping","serializeFieldMapping","input","error","serializedLookupTables","serializeLookupTables","constantDescriptions","serializeConstants","sourcePropertyDescriptions","serializeProperties","targetPropertyDescriptions","serializedDataSources","serializeDocuments","payload","AtlasMapping","dataSource","lookupTables","lookupTable","constants","constant","properties","property","serializedInputFields","serializeFields","serializedOutputFields","jsonMapping","mappingExpression","expressionService","getMappingExpressionStr","serializeAction","inputFieldGroup","mappingAction","serializedInputFieldGroup","serializedFieldGroup0","serializedFieldGroupi","mappingType","LOOKUP","deserializeMappingServiceJSON","deserializeConstants","deserializeProperties","deserializeAtlasMappingName","deserializeDocs","deserializeMappings","deserializeLookupTables","addInputFieldGroupFields","deserializeMappedField","deserializeFieldMapping","isLookupMapping","deserializeFieldMappingFromType","deserializeInputFieldGroup","enableExpression","firstAction","Expression","expr","parsedAction","parseAction","fieldActionService","getActionDefinitionForName","deserializeAudits","audits","errorType","errors","audit","msg","createInputFieldGroup","isComplex","serializedDocs","serializedDoc","SOURCE","TARGET","characterEncoding","locale","xmlDoc","template","jsonDoc","propertyDescriptions","serializedTables","lookupEntries","serializedEntry","sourceType","targetType","serializedTable","processCollectionPreview","serializedField","fieldsJson","collectionInstanceInputFieldGroup","processActionArguments","actionArguments","isCustom","argumentConfig","collectionInputFieldGroup","attribute","documentService","getPropertyPath","includeIndexes","serializeActions","collectionParentField","actionJson","docRef","xmlDocRef","svcNS","createdByUser","fieldMapping","isCollectionMapping","collection","innerFieldMapping","parsedTable","parsedEntry","deserializeFieldActions","multiplicity","logger","warn","parseNewAction","parseOldAction","keys","actionParams","paramName","parsedArgumentValue","entries","valueString","DocumentManagementService","api","mappingUpdatedSubscription","mappingUpdated$","subscribe","uninitialize","unsubscribe","inspectDocuments","Observable","inspectionModel","inspectDocument","debug","url","addBackendError","getLibraryClassNames","baseMappingServiceUrl","get","classNames","ArrayList","importNonJavaDocument","selectedFile","isSchema","docType","userFileSuffix","handleError","addNonJavaDocument","fileText","userFile","SCHEMA","INSTANCE","INFO","FileReader","clearValidationErrors","userFileComps","join","importJavaDocument","addJavaDocument","docBody","docName","parameters","doAddDocument","docdef","filterDocumentFields","searchFilter","searchIsEmpty","defaultVisibility","visibleInCurrentDocumentSearch","searchFieldCount","searchResultsExist","markChildrenVisible","MAX_SEARCH_MATCH","notifyLineRefresh","createConstant","constName","constValue","constType","addToActiveMapping","addFieldToActiveMapping","deleteConstant","removeFieldFromAllMappings","editConstant","origName","constFieldName","getConstantType","getConstantTypeIndex","createProperty","propName","propType","propScope","deleteProperty","editProperty","newName","newScope","getPropertyType","getPropertyTypeIndex","ErrorHandlerService","filterWith","store","FORM","formErrors","emitUpdatedEvent","getErrors","removeError","formErrorUpdatedSource","closed","excludeByIdentifier","resetAll","clearAllErrors","complete","clearPreviewErrors","PREVIEW","VALIDATION","clearFieldErrors","FIELD","clearFormErrors","errorUpdatedSource","createFormErrorChannel","isRequiredFieldValid","fieldDescription","FieldActionService","ZERO_TO_ONE","MANY_TO_MANY","Accept","fetchFieldActions","preloadedFieldActionMetadata","clearActionDefinitions","ActionDetails","actionDetail","fieldActionDefinition","extractFieldActionDefinition","info","sortFieldActionDefinitions","isInitialized","doFetchFieldActions","fetchedActionConfigs","arr","actionDef","getActionsAppliesToField","appliesToField","actionConfigs","headers","fieldActionConfig","trace","custom","method","serviceObject","actionSchema","propertyObject","argTypeString","argType","argumentDefinition","definitions","sortedActionDefinitions","defsByName","defNames","sameNamedDefs","selectedSourceField","getActualField","selectedTargetField","appliesToSourceField","appliesToTargetField","_","matchesDate","matchesNumeric","candidateType","selectedType","FileName","FileType","FileManagementService","findMappingFiles","StringMap","stringMapEntry","map","getCurrentMappingDigest","getCurrentFile","DIGEST","gzipped","gunzipped","inflate","stringified","reduce","data","byte","String","fromCharCode","admDigest","getCurrentADMArchive","ADM","fileName","fileType","arrayBuffer","byteLength","resetMappings","res","resetLibs","fileService","setMappingToService","atlasMappingContainer","setMappingStringToService","put","statusText","setMappingDigestToService","strBuffer","binBuffer","compressedBuffer","gzip","error1","Blob","setBinaryFileToService","setADMArchiveFileToService","importJarFile","binaryBuffer","JAR","jarUpdated","updateDigestFile","getCurrentMappingJson","exportADMArchive","mappingsFileName","value2","importADMArchive","admFile","fileBin","baseURL","_cfg","log","getLogger","MappingExpressionService","willClearOutSourceFieldsOnTogglingExpression","isExpressionEnabledForActiveMapping","toggleExpressionMode","updateExpression","updateActiveMappingTransition","addFieldToExpression","newTextNode","atIndex","isTrailer","executeFieldSearch","configModel","formattedFields","documentName","fieldCount","formattedField","isFieldSelectable","asHTML","createMappingExpression","sourceMappedFields","sourceMappedCollection","targetMappedFields","targetMappedCollection","fieldActionsToExpression","qualifiedExpressionRef","fieldActionArgumentToExpression","actionArgument","actionArgType","fieldActionToExpression","mfActionIndex","actionArgIndex","MappingManagementService","lineRefreshSource","mappingUpdatedSource","mappingSelectionRequiredSource","fetchMappings","_mappingFiles","updateMappingsTransition","updateTransition","mappingModel","mappingWasRemoved","deselectMapping","removeAllMappings","moveMappedFieldTo","insertedMappedField","clearExtraPaddingFields","basePadIndex","padField","exclusionReason","getFieldSelectionExclusionReason","existingMappedField","lookupMode","addNewMapping","selectedField","compoundSelection","selectMapping","newMapping","showMappingDetailTray","removeDocumentReferenceFromAllMappings","validateMappings","mappingDefinitionId","processValidationResponse","Validations","validation","validatedMapping","setTimeout","trailing","mField","setEnumFieldValue","enumerationField","enumerationValue","isEnumerationMapping","getLevel","levels","DEBUG","MappingPreviewService","mappingPreviewInputSource","mappingPreviewOutputSource","mappingPreviewErrorSource","enableMappingPreview","showMappingPreview","mappingPreviewInputSubscription","createMappingPreviewSubscription","createMappingUpdatedSubscription","mappingPreviewInput$","inputFieldMapping","hasValue","createPreviewRequestBody","processPreviewResponse","ProcessMappingRequest","ProcessMappingResponse","toWrite","toRead","a","disableMappingPreview","mappedValueCleared","toggleMappingPreview","enabled","setDefaultLevel","InitializationService","systemInitializedSource","initializationStatusChangedSource","previewService","resetConfig","initializationService","updateLoadingStatus","updateStatus","initializeWithMappingDigest","mappingInitialized","runtimeServiceActive","getRuntimeVersion","addDocumentsFromMappingDigest","digestMappingsName","files","fragIndex","metaFragment","fragData","docID","documentCount","finishedDocCount","preloadedMappingJson","updateInitComplete","initializationErrorOccurred","loadingStatus","initializeWithADMArchiveFile","resetAtlasMap"],"mappings":"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"}