import { CollectionType, DocumentType, InspectionType } from '../contracts/common';
import { DocumentDefinition } from './document-definition.model';
import { DocumentManagementService } from '../services/document-management.service';
import { ErrorHandlerService } from '../services/error-handler.service';
import { FieldActionService } from '../services/field-action.service';
import { FileManagementService } from '../services/file-management.service';
import { InitializationService } from '../services/initialization.service';
import { Logger } from 'loglevel';
import { MappingDefinition } from './mapping-definition.model';
import { MappingExpressionService } from '../services/mapping-expression.service';
import { MappingManagementService } from '../services/mapping-management.service';
import { MappingPreviewService } from '../services/mapping-preview.service';
export declare class DataMapperInitializationModel {
    dataMapperVersion: string;
    initialized: boolean;
    loadingStatus: string;
    admHttpTimeout: number;
    initializationErrorOccurred: boolean;
    baseJavaInspectionServiceUrl?: string;
    baseXMLInspectionServiceUrl?: string;
    baseJSONInspectionServiceUrl?: string;
    baseCSVInspectionServiceUrl?: string;
    baseMappingServiceUrl?: string;
    xsrfHeaderName?: string;
    xsrfCookieName?: string;
    xsrfDefaultTokenValue?: string;
    classPathFetchTimeoutInMilliseconds: number;
    pomPayload?: string;
    classPath?: string;
    fieldNameExclusions: string[];
    classNameExclusions: string[];
    disablePrivateOnlyFields: boolean;
    disableProtectedOnlyFields: boolean;
    disablePublicOnlyFields: boolean;
    disablePublicGetterSetterFields: boolean;
    disableMappingPreviewMode: boolean;
    disableNavbar: boolean;
    mappingInitialized: boolean;
}
export declare class DocumentInitializationModel {
    id: string;
    type: DocumentType;
    name: string;
    description: string;
    isSource: boolean;
    showFields: boolean;
    inspectionType: InspectionType;
    inspectionSource: string;
    inspectionParameters: {
        [key: string]: string;
    };
    inspectionResult: string;
    selectedRoot: string;
    collectionType?: CollectionType;
    collectionClassName?: string;
}
/**
 * The central store of the AtlasMap UI core library. It is expected to be initialized through
 * {@link InitializationService}.
 */
export declare class ConfigModel {
    private static cfg;
    initCfg: DataMapperInitializationModel;
    showMappingDetailTray: boolean;
    showMappingTable: boolean;
    showNamespaceTable: boolean;
    showLinesAlways: boolean;
    showTypes: boolean;
    showMappedFields: boolean;
    showUnmappedFields: boolean;
    _showMappingPreview: boolean;
    currentDraggedField: any;
    documentService: DocumentManagementService;
    mappingService: MappingManagementService;
    errorService: ErrorHandlerService;
    initializationService: InitializationService;
    fieldActionService: FieldActionService;
    fileService: FileManagementService;
    previewService: MappingPreviewService;
    expressionService: MappingExpressionService;
    sourceDocs: DocumentDefinition[];
    targetDocs: DocumentDefinition[];
    sourcePropertyDoc: DocumentDefinition;
    targetPropertyDoc: DocumentDefinition;
    constantDoc: DocumentDefinition;
    mappingFiles: string[];
    mappingDefinitionId: number;
    mappings: MappingDefinition | null;
    preloadedMappingJson: string | null;
    preloadedFieldActionMetadata: any;
    logger?: Logger;
    constructor();
    static getConfig(): ConfigModel;
    static setConfig(cfg: ConfigModel): void;
    initializePropertyDoc(propertyDoc: DocumentDefinition, isSource: boolean): void;
    setConstantPropertyDocs(): void;
    set showMappingPreview(show: boolean);
    get showMappingPreview(): boolean;
    addDocument(docInitModel: DocumentInitializationModel): DocumentDefinition;
    addDocuments(docModels: DocumentInitializationModel[]): DocumentDefinition[];
    getDocsWithoutPropertyDoc(isSource: boolean): DocumentDefinition[];
    getDocs(isSource: boolean): DocumentDefinition[];
    /**
     * Clear source/target/mapping documents from the model.  Reset constant and property document definitions.
     */
    clearDocs(): void;
    hasJavaDocuments(): boolean;
    getDocForIdentifier(documentId: string, isSource: boolean): DocumentDefinition | null;
    getFirstXmlDoc(isSource: boolean): DocumentDefinition;
    getAllDocs(): DocumentDefinition[];
    documentsAreLoaded(): boolean;
}
//# sourceMappingURL=config.model.d.ts.map