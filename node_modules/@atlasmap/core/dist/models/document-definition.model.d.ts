import { DocumentType, InspectionType } from '../contracts/common';
import { DocumentInitializationModel } from './config.model';
import { Field } from './field.model';
import { MappingDefinition } from './mapping-definition.model';
export declare class NamespaceModel {
    private static unqualifiedNamespace;
    alias: string;
    uri: string;
    locationUri: string | undefined;
    createdByUser: boolean;
    isTarget: boolean;
    static getUnqualifiedNamespace(): NamespaceModel;
    getPrettyLabel(): string;
    copy(): NamespaceModel;
    copyFrom(that: NamespaceModel): void;
}
export declare class PaddingField extends Field {
    private _isSource;
    constructor(_isSource: boolean);
    isSource(): boolean;
}
export declare class DocumentDefinition {
    private static padField;
    LEFT_BRACKET: string;
    RIGHT_BRACKET: string;
    initModel: DocumentInitializationModel;
    id: string;
    _type: DocumentType;
    name: string;
    description: string | undefined;
    uri: string;
    inspectionType: InspectionType;
    inspectionParameters: {
        [key: string]: string;
    };
    inspectionSource: string;
    inspectionResult: string;
    isSource: boolean;
    isPropertyOrConstant: boolean;
    selectedRoot: string;
    classPath: string;
    initialized: boolean;
    errorOccurred: boolean;
    fields: Field[];
    allFields: Field[];
    terminalFields: Field[];
    complexFieldsByClassIdentifier: {
        [key: string]: Field;
    };
    enumFieldsByClassIdentifier: {
        [key: string]: Field;
    };
    fieldsByPath: {
        [key: string]: Field;
    };
    fieldPaths: string[];
    showFields: boolean;
    visibleInCurrentDocumentSearch: boolean;
    namespaces: NamespaceModel[];
    characterEncoding: string;
    locale: string;
    set type(type: DocumentType);
    get type(): DocumentType;
    getComplexField(classIdentifier: string): Field;
    getEnumField(classIdentifier: string): Field;
    getAllFields(): Field[];
    /**
     * Return true if the specified field name already exists in the specified document definition,
     * false otherwise.
     *
     * @param targetField
     * @param targetFieldDocDefType
     */
    fieldExists(targetField: Field, targetFieldDocDefType: DocumentType): boolean;
    isFieldsExist(fields: Field[]): boolean;
    getFields(fieldPaths: string[]): Field[];
    getName(showTypes: boolean): string;
    getNamespaceForAlias(alias: string): NamespaceModel;
    getField(fieldPath: string): Field | null;
    getComplexFields(): Field[];
    getTerminalFields(): Field[];
    initializeFromFields(): void;
    updateField(field: Field, oldPath: string | null): void;
    addField(field: Field): void;
    /**
     * Return true if the passed field is terminal or children are detected, false otherwise.
     * @param field - target field
     */
    populateChildren(field: Field): boolean;
    private rewriteFieldPath;
    /**
     * Clear all fields in this document.
     */
    clearFields(): void;
    getFieldIndex(field: Field, fields: Field[]): number;
    /**
     * Remove the specified field from this document definition.
     *
     * @param field
     */
    removeField(field: Field): void;
    updateFromMappings(mappingDefinition: MappingDefinition): void;
    private populateFieldData;
    private prepareComplexFields;
    private discoverAllComplexFields;
    private discoverComplexFields;
}
//# sourceMappingURL=document-definition.model.d.ts.map