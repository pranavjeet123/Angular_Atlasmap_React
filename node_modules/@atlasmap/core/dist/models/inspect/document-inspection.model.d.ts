import { Input, Options } from 'ky';
import { ConfigModel } from '../config.model';
import { DocumentDefinition } from '../document-definition.model';
import { Field } from '../field.model';
import { IField } from '../../contracts/common';
/**
 * Encapsulates Document inspection context.
 */
export declare abstract class DocumentInspectionModel {
    cfg: ConfigModel;
    doc: DocumentDefinition;
    request: DocumentInspectionRequestModel;
    constructor(cfg: ConfigModel, doc: DocumentDefinition);
    /**
     * Validates if the online inspection is available for this type of Document.
     */
    abstract isOnlineInspectionCapable(): boolean;
    /**
     * Parse inspection response returned from backend.
     *
     * @param responseJson
     */
    abstract parseResponse(responseJson: any): void;
    protected parseFieldFromDocument(field: IField, parentField: Field | null): Field | null;
}
export declare abstract class DocumentInspectionRequestModel {
    protected cfg: ConfigModel;
    protected doc: DocumentDefinition;
    constructor(cfg: ConfigModel, doc: DocumentDefinition);
    url: Input;
    options: DocumentInspectionRequestOptions;
}
export declare abstract class DocumentInspectionRequestOptions implements Options {
    protected cfg: ConfigModel;
    protected doc: DocumentDefinition;
    constructor(cfg: ConfigModel, doc: DocumentDefinition);
    json: any;
    headers: {
        [key: string]: string;
    };
    searchParams: {
        [key: string]: string;
    };
}
//# sourceMappingURL=document-inspection.model.d.ts.map