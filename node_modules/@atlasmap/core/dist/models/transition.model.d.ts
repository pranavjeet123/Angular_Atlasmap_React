import { ExpressionModel } from './expression.model';
import { FieldAction } from './field-action.model';
export declare enum TransitionMode {
    ONE_TO_ONE = "ONE_TO_ONE",
    ONE_TO_MANY = "ONE_TO_MANY",
    ENUM = "ENUM",
    MANY_TO_ONE = "MANY_TO_ONE",
    FOR_EACH = "FOR_EACH",
    EXPRESSION = "EXPRESSION"
}
export declare enum TransitionDelimiter {
    NONE = 0,
    AMPERSAND = 1,
    AT_SIGN = 2,
    BACKSLASH = 3,
    COLON = 4,
    COMMA = 5,
    DASH = 6,
    EQUAL = 7,
    HASH = 8,
    PERIOD = 9,
    PIPE = 10,
    SEMICOLON = 11,
    SLASH = 12,
    SPACE = 13,
    UNDERSCORE = 14,
    USER_DEFINED = 15
}
export declare class TransitionDelimiterModel {
    delimiter: TransitionDelimiter;
    serializedValue: string | null;
    prettyName: string | null;
    actualDelimiter: string;
    constructor(delimiter: TransitionDelimiter, serializedValue: string | null, prettyName: string, actualDelimiter: string);
}
export declare class TransitionModel {
    static delimiterModels: TransitionDelimiterModel[];
    mode: TransitionMode;
    delimiter: TransitionDelimiter;
    userDelimiter: string;
    lookupTableName: string | null;
    expression: ExpressionModel;
    enableExpression: boolean;
    transitionFieldAction: FieldAction | null;
    constructor();
    static initialize(): void;
    static delimiterToModel(delimiter: string): TransitionDelimiterModel;
    /**
     * Translate a mapping mode number into a string.
     * @param mode
     */
    static getMappingModeName(mode: TransitionMode): string;
    getPrettyName(): string;
    isOneToManyMode(): boolean;
    isOneToOneMode(): boolean;
    isManyToOneMode(): boolean;
    isForEachMode(): boolean;
    isEnumerationMode(): boolean;
    isExpressionMode(): boolean;
}
//# sourceMappingURL=transition.model.d.ts.map