import { FieldActionDefinition } from '../models/field-action.model';
import { Multiplicity } from '../contracts/field-action';
import { ConfigModel } from '../models/config.model';
import { MappingModel } from '../models/mapping.model';
import ky from 'ky';
export declare class FieldActionService {
    private api;
    cfg: ConfigModel;
    actions: {
        [key in Multiplicity]: FieldActionDefinition[];
    };
    isInitialized: boolean;
    private headers;
    constructor(api: typeof ky);
    fetchFieldActions(): Promise<boolean>;
    getActionDefinitionForName(actionName: string, multiplicity?: Multiplicity): FieldActionDefinition | null;
    /**
     * Return the field action Definitions applicable to the specified field mapping pair.
     * @param mapping
     * @param isSource
     * @param multiplicity
     */
    getActionsAppliesToField(mapping: MappingModel, isSource?: boolean, multiplicity?: Multiplicity): FieldActionDefinition[];
    private doFetchFieldActions;
    private extractFieldActionDefinition;
    private sortFieldActionDefinitions;
    /**
     * Return true if the action's source/target types and collection types match the respective source/target
     * field properties for source transformations, or matches the respective target field properties only for
     * a target transformation.
     *
     * @param action
     * @param mapping
     * @param isSource
     */
    appliesToField(action: FieldActionDefinition, mapping: MappingModel, isSource: boolean): boolean;
    /**
     * Return the first non-padding field in either the source or target mappings.
     *
     * @param mapping
     * @param isSource
     */
    private getActualField;
    /**
     * Check if it could be applied to source field.
     * @param action
     * @param _
     * @param selectedSourceField selected source field
     */
    private appliesToSourceField;
    /**
     * Check if it could be applied for target field. Target type may not change.
     * @param action
     * @param _
     * @param selectedTargetField selected target field
     */
    private appliesToTargetField;
    /**
     * Return true if the candidate type and selected type are generically a date, false otherwise.
     *
     * @param candidateType
     * @param selectedType
     */
    private matchesDate;
    /**
     * Return true if the candidate type and selected type are generically numeric, false otherwise.
     *
     * @param candidateType
     * @param selectedType
     */
    private matchesNumeric;
    private clearActionDefinitions;
}
//# sourceMappingURL=field-action.service.d.ts.map