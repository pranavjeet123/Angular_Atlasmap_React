import { Observable, Subject } from 'rxjs';
import { ConfigModel } from '../models/config.model';
import ky from 'ky/umd';
/**
 * Initialize AtlasMap UI core library. It initializes {@link ConfigModel} and core services.
 */
export declare class InitializationService {
    private api;
    cfg: ConfigModel;
    systemInitializedSource: Subject<void>;
    systemInitialized$: Observable<void>;
    initializationStatusChangedSource: Subject<void>;
    initializationStatusChanged$: Observable<void>;
    private documentService;
    private mappingService;
    private errorService;
    private fieldActionService;
    private fileService;
    private previewService;
    private expressionService;
    constructor(api: typeof ky);
    resetConfig(): void;
    initialize(): Promise<boolean>;
    /**
     * Return true if the runtime service is available, false otherwise.
     */
    runtimeServiceActive(): Promise<boolean>;
    /**
     * Retrieve AtlasMap design time backend runtime version.
     * @returns
     */
    getRuntimeVersion(): Promise<string>;
    /**
     * Initialize with the {@link ADMDigest} mapping digest from either an imported ADM archive
     * file or from the DM runtime digest file is presented to update the canvas.
     *
     * @param mappingDigest - {@link ADMDigest} mapping digest
     */
    private initializeWithMappingDigest;
    private addDocumentsFromMappingDigest;
    /**
     * Fetch mapping files and initialize user mappings in the canvas.
     *
     * @param mappingFiles
     */
    private fetchMappings;
    updateStatus(): void;
    private handleError;
    updateInitComplete(): void;
    updateLoadingStatus(status: string): void;
    initializeWithADMArchiveFile(file: File): Promise<boolean>;
    resetAtlasMap(): Promise<boolean>;
}
//# sourceMappingURL=initialization.service.d.ts.map