import { ErrorInfo } from '../models/error.model';
import { Subject } from 'rxjs';
import { ConfigModel } from '../models/config.model';
import { MappingModel } from '../models/mapping.model';
import ky from 'ky';
/**
 * Manages Mapping Preview.
 */
export declare class MappingPreviewService {
    private api;
    cfg: ConfigModel;
    mappingPreviewInputSource: Subject<MappingModel>;
    mappingPreviewInput$: import("rxjs").Observable<MappingModel>;
    mappingPreviewOutputSource: Subject<MappingModel>;
    mappingPreviewOutput$: import("rxjs").Observable<MappingModel>;
    mappingPreviewErrorSource: Subject<ErrorInfo[]>;
    mappingPreviewError$: import("rxjs").Observable<ErrorInfo[]>;
    private mappingPreviewInputSubscription?;
    private mappingUpdatedSubscription?;
    constructor(api: typeof ky);
    /**
     * Enable Mapping Preview.
     */
    enableMappingPreview(): void;
    private createMappingPreviewSubscription;
    private createPreviewRequestBody;
    private processPreviewResponse;
    private createMappingUpdatedSubscription;
    /**
     * On mapping preview disable, clear any preview values and unsubscribe from
     * both the mapping-updated and mapping-preview subscriptions.
     */
    disableMappingPreview(): void;
    /**
     * Toggle Mapping Preview.
     * @param enabled
     */
    toggleMappingPreview(enabled: boolean): boolean;
}
//# sourceMappingURL=mapping-preview.service.d.ts.map