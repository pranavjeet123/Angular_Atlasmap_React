export declare class CommonUtil {
    static removeItemFromArray(item: any, items: any[]): boolean;
    /**
     * Split a source string by the specified substring into a string array.
     *
     * @param inStr
     * @param splitMarker
     */
    static splitByString(inStr: string, splitMarker: string): string[];
    /**
     * Turn a string into a byte array.
     *
     * @param str
     */
    static str2bytes(str: string): Uint8Array;
    /**
     * Asynchronously read from the specified file and return as a string.
     *
     * @param fileName
     * @param reader
     */
    static readFile(file: File, reader: FileReader): Promise<string>;
    /**
     *  Perform an asynchronous binary read of the specified file name with the specified reader object.
     *
     * @param fileName - file to read
     * @param reader - reader object
     */
    static readBinaryFile(file: File, reader: FileReader): Promise<Int8Array>;
    /**
     * Asynchronously write the specified file content (Blob) to the specified file name.  It will appear
     * in the user's local Downloads directory (or equivalent).
     *
     * @param fileContent
     * @param fName
     */
    static writeFile(fileContent: Blob, fName: string): Promise<boolean>;
    /**
     * Convert a camel-case string into human-readable form.
     *
     * @param camelCaseString
     */
    static toDisplayable(camelCaseString: string): string;
    /**
     * Return a string path that fits into the width provided.  Capture as much of the leaf
     * as possible, then as much of the beginning with the remaining space.
     *
     * @param path
     * @param fieldWidth
     */
    static extractDisplayPath(path: string, fieldWidth: number): string;
    /**
     * Use the JSON utility to translate the specified buffer into a JSON buffer - then replace any
     * non-ascii character encodings with unicode escape sequences.
     *
     * @param buffer
     */
    static sanitizeJSON(buffer: string): string;
    /**
     * Restrict JSON parsing to the document management service.
     *
     * @param buffer
     */
    static objectize(buffer: any): any;
}
//# sourceMappingURL=common-util.d.ts.map