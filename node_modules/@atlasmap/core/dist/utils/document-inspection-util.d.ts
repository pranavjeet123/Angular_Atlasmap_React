import { CollectionType, DocumentType, InspectionType } from '../contracts/common';
import { ConfigModel } from '../models/config.model';
import { DocumentDefinition } from '../models/document-definition.model';
import { DocumentInspectionModel } from '../models/inspect/document-inspection.model';
import { JavaInspectionModel } from '../models/inspect/java-inspection.model';
export declare class DocumentInspectionUtil {
    /**
     * Create one of the subclass of {@link DocumentInspectionModel} which
     * corresponds to the existing {@link DocumentDefinition} passed in as an argument.
     * @see fromNonJavaProperties()
     * @see fromJavaProperties()
     *
     * @param cfg
     * @param doc
     * @returns
     */
    static fromDocumentDefinition(cfg: ConfigModel, doc: DocumentDefinition): DocumentInspectionModel;
    /**
     * Create {@link JavaInspectionModel} from arguments and add corresponding
     * {@link DocumentDefinition} into {@link ConfigModel}.
     * @see fromDocumentDefinition()
     * @see fromNonJavaProperties()
     * @todo https://github.com/atlasmap/atlasmap/issues/2919
     * Assign GUID to Java Document ID as well, and use simple class name for default Document name
     *
     * @param cfg
     * @param className
     * @param isSource
     * @param collectionType
     * @param collectionClassName
     * @returns
     */
    static fromJavaProperties(cfg: ConfigModel, className: string, isSource: boolean, collectionType?: CollectionType, collectionClassName?: string): JavaInspectionModel;
    /**
     * Create one of the subclass of {@link DocumentInspectionModel}
     * other than Java from arguments and add corresponding
     * {@link DocumentDefinition} into {@link ConfigModel}..
     * @see fromDocumentDefinition()
     * @see fromJavaProperties()
     *
     * @param cfg
     * @param id
     * @param name
     * @param documentType
     * @param inspectionType
     * @param inspectionSource
     * @param isSource
     * @param inspectionParameters
     * @returns
     */
    static fromNonJavaProperties(cfg: ConfigModel, id: string, name: string, documentType: DocumentType, inspectionType: InspectionType, inspectionSource: string, isSource: boolean, inspectionParameters?: {
        [key: string]: string;
    }): DocumentInspectionModel;
    private static removeDocumentIfAlreadyExists;
}
//# sourceMappingURL=document-inspection-util.d.ts.map