import { IAtlasMappingContainer, IMapping } from '../contracts/mapping';
import { IField } from '../contracts/common';
import { ErrorInfo, ErrorType } from '../models/error.model';
import { MappingModel } from '../models/mapping.model';
import { ConfigModel } from '../models/config.model';
import { IAudits } from '../contracts/mapping-preview';
export declare class MappingSerializer {
    static serializeMappings(cfg: ConfigModel, ignoreValue?: boolean): IAtlasMappingContainer;
    static serializeFieldMapping(cfg: ConfigModel, mapping: MappingModel, id: string, ignoreValue?: boolean): IMapping;
    static deserializeMappingServiceJSON(json: IAtlasMappingContainer, cfg: ConfigModel): void;
    /**
     * Return the AtlasMap mappings file name from the specified JSON buffer or an empty string.
     *
     * @param json
     */
    static deserializeAtlasMappingName(json: IAtlasMappingContainer): string;
    static addInputFieldGroupFields(inputField: IField[], mapping: MappingModel, cfg: ConfigModel): void;
    static deserializeFieldMapping(mappingJson: IMapping, cfg: ConfigModel): MappingModel;
    private static deserializeInputFieldGroup;
    static deserializeAudits(audits: IAudits, errorType: ErrorType): ErrorInfo[];
    private static createInputFieldGroup;
    private static serializeDocuments;
    private static serializeConstants;
    private static serializeProperties;
    private static serializeLookupTables;
    /**
     * Generate serialized meta-data representing a direct-reference instance collection preview.
     *
     * @param cfg
     * @param mapping
     * @param field
     * @param serializedField
     * @param fieldsJson
     */
    private static processCollectionPreview;
    /**
     * Serialize field action arguments.
     *
     * @param action
     * @param cfg
     */
    private static processActionArguments;
    private static serializeFields;
    /**
     * Walk the list of actions associated with the specified mapped field and serialize them into JSON.
     *
     * @param cfg
     * @param mappedField
     * @param serializedField
     */
    private static serializeActions;
    private static serializeAction;
    private static deserializeDocs;
    private static deserializeMappings;
    /**
     * @deprecated Deserialize a field mapping based on its mapping type.  This is deprecated in favor of
     * concatenate/ split actions.
     *
     * @param mapping
     * @param fieldMapping
     * @param docRefs
     * @param cfg
     * @param ignoreValue
     */
    private static deserializeFieldMappingFromType;
    private static deserializeConstants;
    private static deserializeProperties;
    private static deserializeLookupTables;
    /**
     * Walk the list of field actions found in the parsed data and restore them to the live mapping.
     *
     * @param field
     * @param mappedField
     * @param mapping
     * @param cfg
     * @param isSource
     */
    private static deserializeFieldActions;
    private static deserializeMappedField;
    private static parseAction;
    /**
     * @deprecated actionName: {param:...} style has been deprecated. Use {`@type`: actionName} style action description.
     */
    private static parseOldAction;
    private static parseNewAction;
}
//# sourceMappingURL=mapping-serializer.d.ts.map