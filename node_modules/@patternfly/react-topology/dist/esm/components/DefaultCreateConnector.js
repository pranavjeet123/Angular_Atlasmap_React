import * as React from 'react';
import { css } from '@patternfly/react-styles';
import AddCircleOIcon from '@patternfly/react-icons/dist/esm/icons/add-circle-o-icon';
import { Tooltip } from '@patternfly/react-core';
import ConnectorArrow from './ConnectorArrow';
const cursorSize = 20;
const DefaultCreateConnector = ({ startPoint, endPoint, hints, tipContents, className }) => {
    const classes = css('pf-topology-default-create-connector', className);
    return (React.createElement("g", { className: classes },
        React.createElement("line", { className: "pf-topology-default-create-connector__line", x1: startPoint.x, y1: startPoint.y, x2: endPoint.x, y2: endPoint.y }),
        hints && hints[hints.length - 1] === 'create' ? (React.createElement("g", { transform: `translate(${endPoint.x - cursorSize / 2},${endPoint.y - cursorSize / 2})`, className: "pf-topology-default-create-connector__create" },
            React.createElement("circle", { className: "pf-topology-default-create-connector__create__bg", cx: cursorSize / 2, cy: cursorSize / 2, r: cursorSize / 2 }),
            tipContents ? (React.createElement(Tooltip, { content: tipContents, trigger: "manual", isVisible: true, animationDuration: 0, entryDelay: 0, exitDelay: 0 },
                React.createElement(AddCircleOIcon, { className: "pf-topology-default-create-connector__create__cursor", style: { fontSize: cursorSize } }))) : (React.createElement(AddCircleOIcon, { className: "pf-topology-default-create-connector__create__cursor", style: { fontSize: cursorSize } })))) : (React.createElement(ConnectorArrow, { className: "pf-topology-default-create-connector__arrow", startPoint: startPoint, endPoint: endPoint }))));
};
export default DefaultCreateConnector;
//# sourceMappingURL=DefaultCreateConnector.js.map