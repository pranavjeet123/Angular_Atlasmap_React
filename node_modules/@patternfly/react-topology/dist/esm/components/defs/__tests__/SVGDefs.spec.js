import * as React from 'react';
import { mount } from 'enzyme';
import SVGDefs from '../SVGDefs';
import { SVGDefsSetter } from "../SVGDefsSetter";
import SVGDefsContext from '../SVGDefsContext';
describe('SVGDefs', () => {
    it('should get #addDef and #removeDef from context', () => {
        const contextProps = {
            addDef: jest.fn(),
            removeDef: jest.fn(),
        };
        const props = {
            id: 'foo',
            children: React.createElement("span", null),
        };
        const wrapper = mount(React.createElement(SVGDefsContext.Provider, { value: contextProps },
            React.createElement(SVGDefs, Object.assign({}, props))));
        const innerWrapper = wrapper.find(SVGDefsSetter).first();
        expect(innerWrapper.props()).toEqual(Object.assign(Object.assign({}, contextProps), props));
    });
});
describe('SVGDefsSetter', () => {
    it('should callback #addDef and #removeDef on update', () => {
        const props = {
            id: 'foo',
            addDef: jest.fn(),
            removeDef: jest.fn(),
            children: React.createElement("span", null),
        };
        const wrapper = mount(React.createElement(SVGDefsSetter, Object.assign({}, props)));
        expect(props.addDef).toHaveBeenCalledWith(props.id, props.children);
        // test update
        const newChild = React.createElement("span", null);
        wrapper.setProps({ children: newChild });
        expect(props.addDef).toHaveBeenCalledTimes(2);
        expect(props.addDef).toHaveBeenLastCalledWith(props.id, newChild);
        // test unmount
        wrapper.unmount();
        expect(props.removeDef).toHaveBeenCalledTimes(1);
        expect(props.removeDef).toHaveBeenLastCalledWith(props.id);
    });
});
//# sourceMappingURL=SVGDefs.spec.js.map