"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const react_styles_1 = require("@patternfly/react-styles");
const _ = tslib_1.__importStar(require("lodash"));
const pointsStringFromPoints = (points) => _.reduce(points, (result, nextPoint) => `${result} ${nextPoint[0]},${nextPoint[1]}`, '');
const ConnectorArrow = ({ startPoint, endPoint, className = '', isTarget = true, size = 10, dragRef }) => {
    if (!startPoint || !endPoint) {
        return null;
    }
    const arrowEndPoint = isTarget ? [endPoint.x, endPoint.y] : [startPoint.x, startPoint.y];
    const prevPoint = isTarget ? [startPoint.x, startPoint.y] : [endPoint.x, endPoint.y];
    const length = Math.sqrt(Math.pow((arrowEndPoint[0] - prevPoint[0]), 2) + Math.pow((arrowEndPoint[1] - prevPoint[1]), 2));
    if (!length) {
        return null;
    }
    const ratio = (length - size) / length;
    const arrowStartPoint = [
        prevPoint[0] + (arrowEndPoint[0] - prevPoint[0]) * ratio,
        prevPoint[1] + (arrowEndPoint[1] - prevPoint[1]) * ratio
    ];
    const arrowPoints = [
        [0, size / 2],
        [0, -size / 2],
        [size, 0]
    ];
    const padding = Math.max(size, 8);
    const deltaY = padding / 2;
    const boundingBox = [
        [0, -deltaY],
        [padding, -deltaY],
        [padding, deltaY],
        [0, deltaY]
    ];
    const angleDeg = 180 - (Math.atan2(arrowEndPoint[1] - prevPoint[1], prevPoint[0] - arrowEndPoint[0]) * 180) / Math.PI;
    return (React.createElement("g", { transform: `translate(${arrowStartPoint[0]}, ${arrowStartPoint[1]}) rotate(${angleDeg})`, ref: dragRef, className: react_styles_1.css('pf-topology-connector-arrow', className) },
        React.createElement("polygon", { points: pointsStringFromPoints(arrowPoints) }),
        React.createElement("polygon", { points: pointsStringFromPoints(boundingBox), fillOpacity: 0, strokeWidth: 0 })));
};
exports.default = ConnectorArrow;
//# sourceMappingURL=ConnectorArrow.js.map