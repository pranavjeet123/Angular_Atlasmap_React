"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TopologySideBar = void 0;
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const times_icon_1 = tslib_1.__importDefault(require('@patternfly/react-icons/dist/js/icons/times-icon'));
const react_core_1 = require("@patternfly/react-core");
require("@patternfly/react-styles/css/components/Topology/topology-side-bar.css");
const TopologySideBar = (_a) => {
    var { className = '', resizable = false, show, onClose = null, header, children = null } = _a, otherProps = tslib_1.__rest(_a, ["className", "resizable", "show", "onClose", "header", "children"]);
    const [isIn, setIsIn] = React.useState(false);
    React.useEffect(() => {
        let timer = null;
        if (isIn !== show) {
            clearTimeout(timer);
            timer = setTimeout(() => setIsIn(show), 150);
        }
        return () => {
            clearTimeout(timer);
        };
    }, [show, isIn]);
    const classNames = resizable
        ? `pf-topology-resizable-side-bar ${className}`
        : `pf-topology-side-bar fade ${className}${show ? ' shown' : ''}${isIn ? ' in' : ''}`;
    return (React.createElement("div", Object.assign({}, otherProps, { role: "dialog", className: classNames }), (resizable || show) && (React.createElement(React.Fragment, null,
        onClose && (React.createElement(react_core_1.Button, { className: "pf-topology-side-bar__dismiss", variant: "plain", onClick: onClose, "aria-label": "Close" },
            React.createElement(times_icon_1.default, null))),
        header && React.createElement("div", { className: "pf-topology-side-bar__header" }, header),
        React.createElement("div", { className: "pf-topology-side-bar__body" }, children)))));
};
exports.TopologySideBar = TopologySideBar;
exports.TopologySideBar.displayName = 'TopologySideBar';
//# sourceMappingURL=TopologySideBar.js.map