import { Edge, Graph, Layout, Node } from '../types';
import { BaseLayout } from './BaseLayout';
import { LayoutOptions } from './LayoutOptions';
import { LayoutLink } from './LayoutLink';
import { LayoutGroup } from './LayoutGroup';
import { LayoutNode } from './LayoutNode';
import { ColaNode } from './ColaNode';
import { ColaGroup } from './ColaGroup';
import { ColaLink } from './ColaLink';
export interface ColaLayoutOptions {
    maxTicks: number;
    initialUnconstrainedIterations: number;
    initialUserConstraintIterations: number;
    initialAllConstraintsIterations: number;
    gridSnapIterations: number;
}
declare class ColaLayout extends BaseLayout implements Layout {
    private d3Cola;
    private colaOptions;
    private tickCount;
    private destroyed;
    private simulationRunning;
    private simulationStopped;
    private restartOnEnd;
    private addingNodes;
    constructor(graph: Graph, options?: Partial<ColaLayoutOptions & LayoutOptions>);
    protected getLinkDistance: (link: ColaLink) => number;
    protected initializeLayout(): void;
    protected onSimulationEnd: () => void;
    destroy(): void;
    initDrag(): void;
    protected getConstraints(nodes: ColaNode[], groups: ColaGroup[], edges: ColaLink[]): any[];
    protected stopSimulation(): void;
    protected createLayoutNode(node: Node, nodeDistance: number, index: number): ColaNode;
    protected createLayoutLink(edge: Edge, source: LayoutNode, target: LayoutNode): LayoutLink;
    protected createLayoutGroup(node: Node, padding: number, index: number): ColaGroup;
    protected setupLayout(graph: Graph, nodes: LayoutNode[], edges: LayoutLink[], groups: LayoutGroup[]): void;
    protected updateExistingNodes(existingNodes: LayoutNode[]): void;
    private startColaLayout;
    protected startLayout(graph: Graph, initialRun: boolean, addingNodes: boolean): void;
}
export { ColaLayout, ColaNode, ColaGroup, ColaLink };
//# sourceMappingURL=ColaLayout.d.ts.map